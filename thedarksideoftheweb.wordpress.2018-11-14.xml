
<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5" created="2018-11-14 16:33" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>The Dark Side Of The Web</title>
	<link>http://www.thedarksideofthewebblog.com</link>
	<description>Un blog sur le développement web</description>
	<pubDate>Wed, 14 Nov 2018 16:33:48 +0000</pubDate>
	<language>fr-FR</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.thedarksideofthewebblog.com</wp:base_site_url>
	<wp:base_blog_url>http://www.thedarksideofthewebblog.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>raphael@raphaellefebvre.be</wp:author_login><wp:author_email>raphael@raphaellefebvre.be</wp:author_email><wp:author_display_name><![CDATA[Raphaël]]></wp:author_display_name><wp:author_first_name><![CDATA[Raphaël]]></wp:author_first_name><wp:author_last_name><![CDATA[Lefebvre]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.5</generator>

	<item>
		<title>Espace de code sécurisé</title>
		<link>http://www.thedarksideofthewebblog.com/espace-de-code-securise/</link>
		<pubDate>Tue, 29 Jan 2013 23:02:16 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[Je me souviens avoir lu un article un jour, qui recensait les aberrations physiques dans Star Wars. On y expliquait notamment qu’il était impossible de déployer des vaisseaux aussi imposants hors d’une planète, ou encore, plus prosaïquement, que l’absence de matière dans l’espace rendait la propagation du bruit impossible. Les chasseurs impériaux n’auraient dès lors pas dû pousser des râlements de chat souffrant de pharyngite aiguë.

Pourtant, le succès de la saga n’aurait pas été aussi colossal sans ces nécessaires entorses à la réalité, partie intégrante de la magie de son univers et stimuli indéniables de notre imagination. Après tout, il s’agit d’une œuvre de l’esprit, et, comme chacun sait, la physique s’applique partout dans l’univers, si ce n’est dans un recoin très sombre où aucune règle n’est figée: notre pensée.

Il est facile d’imaginer que notre intelligence étant purement éthérée, elle ne se soumette aucunement aux lois qui touchent la matière telles que la physique les décrit en tant que science. Certaines coïncidences, qu’il est certes difficile de trouver fondées, ébranlent néanmoins cette frontière pourtant imperméable, évoquant des ressemblances étonnantes entre le comportement de la matière et le comportement humain.

Ainsi, par exemple, le principe d’inertie appliqué en mécanique et qui explique la résistance d’un corps face à une modification de son mouvement, rappelle étrangement la résistance au changement que nous connaissons tous en tant qu’individu. Inutile de parler de la gravité qui pousse deux corps à s’attirer réciproquement, ou encore de l'équation de Schrödinger qui seule peut expliquer l’attrait de mon chat pour les boîtes en carton.

Il en va de même de l’entropie sans laquelle on ne pourrait expliquer la vitesse à laquelle notre code devient un vrai foutoir. L’entropie est sans doute la force qui nous pousse à sombrer du côté obscur. C'est le Dark Vador des applications.
<h2 id="entropie">L’entropie dans Javascript</h2>
On le sait, le Javascript n'est pas un langage orienté objet dont le paradigme permet de regrouper le code en classe, à l'instar de Java, PHP, etc. Il s'agit d'un fonctionnement particulier, que certains aiment et d'autres moins, basé sur le <a title="Wikipédia - La programmation orientée prototype" href="http://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_prototype" target="_blank">prototypage</a>.

Cette architecture émane directement de la <a title="js-attitude: JavaScript N'a Rien à Voir Avec Java : Petite Histoire D'un Marketing Malheureux" href="http://www.js-attitude.fr/2012/09/17/javascript-n-a-rien-a-voir-avec-java/" target="_blank">volonté de ses concepteurs</a> de créer un langage de script simple, facile et accessible à tous. Cette philosophie de base est des plus légitimes. Un des points forts du web demeure dans son accessibilité, bien adaptée à des sites modestes tels qu'ils composent une part importante du web.

Toutefois, force est de constater que notre code Javascript a tendance à se complexifier avec le temps, et à devenir très difficilement maintenable... Au final, il se transforme en une accumulation de variables et de fonctions, clairsemées entre plusieurs fichiers où s'entremêlent parfois des fonctionnalités différentes, et où les dépendances gangrènent toute possibilité d'évolution future.
<div class="comment">
<ul>
	<li>Les fonctionnalités se mélangent.</li>
	<li>Les portées de codes différents se chevauchent.</li>
	<li>Il est difficile d'entrer dans ce code, et de connaître le contexte d'exécution.</li>
	<li>Le refactoring du JS est compliqué.</li>
	<li>Il est difficile de recenser le code mort.</li>
	<li>Toute modification de HTML est compromise par la crainte d’un effet de bord.</li>
</ul>
</div>
&nbsp;
<h2 id="interaction-faible">Principes d'interaction faible</h2>
Face à cette tendance inévitable, seule une bonne organisation du code peut garantir souplesse et évolutivité.

Une des premières règles consiste à maximiser l'indépendance par rapport au HTML. Il existe une série de solutions, allant de simples <a title="tuts plus - Important Considerations When Building Single Page Web Apps" href="http://net.tutsplus.com/tutorials/javascript-ajax/important-considerations-when-building-single-page-web-apps/" target="_blank">best-practices</a> à l'utilisation de <a title="Blog du Webdesign - Backbone, Spine, Knockout, Meteor : Les nouveaux frameworks de développement front end" href="http://www.blogduwebdesign.com/developpement-javascript/backbone-spine-knockout-meteor-les-nouveaux-frameworks-de-developpement-front-end/680http://" target="_blank">frameworks MVC</a> comme <a title="Backbone.js" href="http://backbonejs.org/" target="_blank">Backbone.js</a> ou le prometteur <a title="Meteor.js" href="http://www.meteor.com/" target="_blank">Meteor.js</a>. Nous n’allons toutefois pas aborder ce point qui dépasse le sujet de cet article.

L'autre bonne pratique, simple et purement liée au Javascript, consiste à sécuriser son espace de travail. Il s'agit de regrouper son code en fonctionnalités dont les interactions avec l'extérieur sont identifiées et contrôlées au mieux.
<h3 id="iife">Les fonctions IIFE</h3>
Sans conteste, la première bonne pratique en la matière consiste à regrouper chaque fonctionnalité au sein d'une même fonction IIFE. Une fonction <a title="Ben Alman: Immediately-Invoked Function Expression (IIFE)" href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank">IIFE</a> (<em>Immediately-Invoked Function Expression</em>) est une simple fonction, telles que nous les utilisons tous les jours, si ce n'est qu'elle est appelée automatiquement. L'ensemble du code d'une fonctionnalité peut y être transposé sans problème (fonctions, variables et objets), ce qui permet de scinder notre application en briques de base bien délimitées et recyclables.

<iframe style="width: 100%; height: 190px;" src="http://jsfiddle.net/rlefebvre/vR889/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cette encapsulation du code empêche également les variables déclarées au sein de la fonction d'être visibles depuis l'extérieur. Si toutes les fonctionnalités d'une application sont traitées de la sorte, elles demeureront isolées et donc protégées les unes des autres. L'espace global n'est pas pollué par une multitude de variables qui seraient visibles à travers toutes les fonctionnalités, même lorsque celles-ci ne les utilisent pas.

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/mX9KD/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

En s’astreignant à toujours passer les variables externes au travers des arguments de la fonction, nous pouvons facilement identifier les dépendances du code envers l'extérieur. Nous contrôlons ainsi au mieux la portée des variables externes.

<iframe style="width: 100%; height: 200px;" src="http://jsfiddle.net/rlefebvre/NyCFk/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Bien sûr, l'inverse n'est malheureusement pas vrai. Les variables externes demeurent visibles à l'intérieur de la fonction. Aucun stratagème ne peut, à ma connaissance, totalement isoler une fonction Javascript de l'extérieur.

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/u9yFB/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<ul>
	<li><a title="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank">Ben Alman: Immediately-Invoked Function Expression (IIFE)</a></li>
	<li><a title="http://www.wewereweb.be/javascript-les-iife-ou-comprendre-les-function/2012/10/13/" href="http://www.wewereweb.be/javascript-les-iife-ou-comprendre-les-function/2012/10/13/" target="_blank">We were web: Javascript: les IIFE ou comprendre les (function() {…}) ()</a></li>
	<li><a title="http://sametmax.com/la-fonction-anonyme-appelee-immediatement-en-javascript-function/" href="http://sametmax.com/la-fonction-anonyme-appelee-immediatement-en-javascript-function/" target="_blank">Sam &amp; Max: La fonction anonyme appelée immédiatement en Javascript: (function())()</a></li>
	<li><a title="http://dmitrysoshnikov.com/ecmascript/chapter-5-functions/#question-about-surrounding-parentheses" href="http://dmitrysoshnikov.com/ecmascript/chapter-5-functions/#question-about-surrounding-parentheses" target="_blank">Dmitry Soshnikov: ECMA-262-3 in detail - Question “about surrounding parentheses”</a></li>
</ul>
<h3 id="mode-strict">Le mode strict</h3>
Un peu plus haut, j'indiquais que les variables internes n'étaient pas accessibles depuis l'extérieur. Ceci n'est pas tout à fait exact. En effet, si, toujours à l'intérieur d'une fonction, je ne déclare pas ma variable à l'aide du mot-clé <em>var</em>, elle sera automatiquement assignée comme attribut de <em>window.</em> Elle pourra ainsi, bien naturellement, être appelée depuis l'extérieur de la fonction, comme tout autre attribut de <em>window</em>. C’est ce qu’on appelle, par abus de langage, une variable globale.

<iframe style="width: 100%; height: 125px;" src="http://jsfiddle.net/rlefebvre/RWYDF/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Il existe heureusement une façon d'obliger la déclaration de toute variable, en utilisant le mode strict (<em>strict mode</em>) d'<a title="Wikipédia - ECMAScript" href="http://fr.wikipedia.org/wiki/ECMAScript" target="_blank">ECMAScript 5</a>. Ce mode, encore peu connu et donc trop peu usité, contraint Javascript à signaler une série d'erreurs potentiellement dangereuses et habituellement permises par le langage. Pour ce faire, il suffit de déclarer la directive (on parle parfois de <em>pragma</em>) "<em>use strict</em>" au début d'une fonction.

<iframe style="width: 100%; height: 110px;" src="http://jsfiddle.net/rlefebvre/zYG5v/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

A noter qu'il est possible de déclarer le mode strict au début de l'espace global pour qu'il s'applique à l'ensemble du code. Cette méthode n'est toutefois pas conseillée car elle pourrait altérer le comportement des bibliothèques de code externes dont on ne maîtrise pas l'implémentation. <a title="jshint" href="http://www.jshint.com/" target="_blank">jsHint </a>et <a title="jsLint" href="http://www.jslint.com/" target="_blank">jsLint</a> s'attendent d'ailleurs à trouver, par défaut, le mode strict activé localement au sein des fonctions, et signalent une erreur s'il est demandé au niveau global.

Enfin, nous ne devons pas nous inquiéter de la compatibilité ascendante du mode strict. Etant donné que cette directive est spécifiée à l'intérieur de simples ou de doubles guillemets, les moteurs Javascript antérieurs à ES5 et qui ne peuvent interpréter une telle commande, ne lanceront pas d'erreurs, croyant lire une simple <em>String</em>.
<ul>
	<li><a title="https://javascriptweblog.wordpress.com/2011/05/03/javascript-strict-mode/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+JavascriptJavascript+%28JavaScript%2C+JavaScript%29&amp;utm_content=Netvibes" href="https://javascriptweblog.wordpress.com/2011/05/03/javascript-strict-mode/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+JavascriptJavascript+%28JavaScript%2C+JavaScript%29&amp;utm_content=Netvibes" target="_blank">Angus Croll: JavaScript Strict Mode</a></li>
	<li><a title="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/" href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/" target="_blank">John Resig: ECMAScript 5 Strict Mode, JSON, and More</a></li>
	<li><a title="http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/" href="http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/" target="_blank">Douglas Crockford: Strict Mode Is Coming To Town</a></li>
</ul>
<h3 id="espace-de-noms">Les espaces de noms</h3>
Un problème peut alors se poser. Puisque je ne vois plus les variables depuis l'extérieur, comment utiliser ma fonctionnalité en dehors de son bloc de code?

Une procédure simple existe pour répondre à cette nécessité, qui permet de garder un code clair tout en rendant accessible une sorte d'API spécifique à la fonctionnalité. Elle vise à imiter les <a title="Wikipédia - Espace de noms" href="http://fr.wikipedia.org/wiki/Espace_de_noms" target="_blank">espaces de noms</a> dédiés à un <em>package</em>, en l'émulant via le système traditionnel d'accès aux attributs d'un objet.

En Javascript, <em>window</em> est accessible partout et constitue par ailleurs -du moins si le mode strict n'est pas activé- le contexte de toute fonction qui n'est pas rattachée à un objet. <em>Window</em> est le point commun entre la fonction et l'espace global.

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/LAf79/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Dès lors, <em>window</em> peut accueillir des attributs spécifiques qu'on lui assigne depuis la fonction et qui vont constituer ainsi une liste de <em>packages</em> renfermant les fonctionnalités.

<iframe style="width: 100%; height: 450px;" src="http://jsfiddle.net/rlefebvre/CqYqg/5/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<ul>
<ul>
	<li><a itemprop="url" href="http://falola.developpez.com/tutoriels/javascript/namespace/" target="_blank">Nourdine Falola: Espaces de noms (ou namespace) en JavaScript</a></li>
</ul>
</ul>
<h3 id="gestion-des-erreurs">La gestion des erreurs</h3>
Il est très facile, surtout avec le mode <em>strict </em>activé, que des erreurs soient renvoyées par le code, auxquelles nous n'aurions pas pensé tout de suite. Or, une fois en production, le comportement de l'application côté client échappe souvent à tout contrôle du développeur. Par défaut, si une erreur se produit, seul l'utilisateur s'en aperçoit, de préférence en jurant sur un site si mal conçu...

En Javascript, une erreur est, en réalité, une <a title="Wikipédia - Système de gestion d'exceptions" href="http://fr.wikipedia.org/wiki/Syst%C3%A8me_de_gestion_d%27exceptions" target="_blank">exception</a> qui étend la classe <a title="Mozilla Developer Network: Error" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error" target="_blank">Error</a>. Sur les différents types d'erreur, je ne peux que vous recommander de parcourir <a title="Exceptional Exception Handling in JavaScript" href="http://www.sitepoint.com/exceptional-exception-handling-in-javascript/" target="_blank">l'article de Colin Ihrig</a>. Il est donc assez aisé d'intercepter l'erreur, si ce n'est même de la loguer.

<iframe style="width: 100%; height: 180px;" src="http://jsfiddle.net/rlefebvre/Deg2M/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Un projet intéressant, <a title="glitch.js" href="https://github.com/jefferyto/glitchjs" target="_blank">Glitch.js</a>, vise à utiliser un <em>wrapper</em> qui fait à la fois office de fonction IIFE et de <em>catcher</em> d'erreur.

<iframe style="width: 100%; height: 170px;" src="http://jsfiddle.net/rlefebvre/g2BXN/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<ul>
	<li><a title="Colin Ihrig: Exceptional Exception Handling in JavaScript" href="http://www.sitepoint.com/exceptional-exception-handling-in-javascript/" target="_blank">Colin Ihrig: Exceptional Exception Handling in JavaScript</a></li>
	<li><a title="Jean-Philippe Blary: Logger les erreurs JavaScript" href="http://blog.blary.be/logger-les-erreurs-javascript" target="_blank">Jean-Philippe Blary: Logger les erreurs JavaScript</a></li>
	<li><a title="Joanna Power: JavaScript Error Tracking: Why window.onerror Is Not Enough" href="http://blogs.cozi.com/tech/2008/04/javascript-error-tracking-why-windowonerror-is-not-enough.html" target="_blank">Joanna Power: JavaScript Error Tracking: Why window.onerror Is Not Enough</a></li>
	<li><a title="Ruben Verborgh: Asynchronous error handling in JavaScript" href="http://ruben.verborgh.org/blog/2012/12/31/asynchronous-error-handling-in-javascript/" target="_blank">Ruben Verborgh: Asynchronous error handling in JavaScript</a></li>
</ul>
<h2 id="conclusions">Conclusions</h2>
Un espace de code devient sécurisé lorsque l'on en connait l'étendue, les dépendances,  et les interférences. Seule une politique de régulation claire des entrées et sorties peut minimiser les effets de bords et garantir la maintenance des fonctionnalités.

Cette gestion du code peut se résumer en quatre bonnes pratiques:
<ol>
	<li>Les fonctionnalités sont regroupées en un même bloc de code, de préférence une fonction IIFE.</li>
	<li>Les variables externes nécessaires à la bonne exécution du code sont identifiées dans les paramètres de la fonction.</li>
	<li>Les variables ne sont accessibles depuis l'extérieur de la fonction que par l'intermédiaire de <em>namespaces</em>.</li>
	<li>Les erreurs de la fonction sont rattrapées avant de contaminer les autres fonctionnalités.</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2013-01-30 00:02:16</wp:post_date>
		<wp:post_date_gmt>2013-01-29 23:02:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>espace-de-code-securise</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="error"><![CDATA[error]]></category>
		<category domain="post_tag" nicename="iife"><![CDATA[IIFE]]></category>
		<category domain="category" nicename="les-patterns-de-js"><![CDATA[Les patterns de JS]]></category>
		<category domain="post_tag" nicename="loose-augmentation"><![CDATA[loose augmentation]]></category>
		<category domain="post_tag" nicename="namespace"><![CDATA[namespace]]></category>
		<category domain="post_tag" nicename="strict-mode"><![CDATA[strict mode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[IIFE, module, loose augmentation, strict mode, namespace, error]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Quelques bonnes pratiques pour déployer une fonctionnalité Javascript dans un code sécurisé, qui vont permettre d'en connaître l’étendue, les dépendances, et les interférences.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Nico]]></wp:comment_author>
			<wp:comment_author_email>nikoms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-01-30 03:09:47</wp:comment_date>
			<wp:comment_date_gmt>2013-01-30 02:09:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Effectivement le 'use strict', je ne l'avais encore jamais utilisé]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Nath]]></wp:comment_author>
			<wp:comment_author_email>nathaliedecasteau@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-02-05 17:45:28</wp:comment_date>
			<wp:comment_date_gmt>2013-02-05 16:45:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[je suis fan!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Loïc]]></wp:comment_author>
			<wp:comment_author_email>loicknuchel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>https://twitter.com/loicknuchel</wp:comment_author_url>
			<wp:comment_date>2013-02-06 14:03:01</wp:comment_date>
			<wp:comment_date_gmt>2013-02-06 13:03:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour cet article qui regroupe de manière condensé des bonnes pratiques.
Il y a beaucoup de choses très intéressantes mais j'ai toujours le même problème : j'ai beaucoup de mal à me tenir à ces nombreuses conventions assez strictes...
Lorsque je code en JS, je pense à certaines bonnes pratiques et pas à d'autres, et c'est pas toujours les mêmes auxquelles je pense ou pas... Du coup c'est très bordélique.
J'ai pas encore trouvé de "bonne" solution pour gérer ces "problèmes d'attention"... Mais à force, ça devrait finir par rentrer (après avoir pondu je ne sais combien de lignes un peu bancales, malheureusement...)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[anon]]></wp:comment_author>
			<wp:comment_author_email>a@a.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-02-06 14:20:26</wp:comment_date>
			<wp:comment_date_gmt>2013-02-06 13:20:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Amen]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[This is it! Le contexte en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/this-is-it-le-contexte-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-02-09 12:24:25</wp:comment_date>
			<wp:comment_date_gmt>2013-02-09 11:24:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] une différence importante est à noter ici. Si le mode strict de Javascript est activé, this n&rsquo;est alors pas référencé. La fonction ne se mêle plus à [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Techniv]]></wp:comment_author>
			<wp:comment_author_email>vpeybernes.pro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.techniv.fr</wp:comment_author_url>
			<wp:comment_date>2013-02-14 18:00:09</wp:comment_date>
			<wp:comment_date_gmt>2013-02-14 17:00:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Que de bonnes pratique.
Des classiques, mais qu'il est toujours bon de revoir.

Pour le 'use strict' par contre ça à été une découverte. Je vais approfondir. Merci

J'ai beaucoup aimé ton intro. Et ta manière de présenter les chose.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2013-02-20 20:45:48</wp:comment_date>
			<wp:comment_date_gmt>2013-02-20 19:45:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour ces encouragements qui font bien plaisir! :-D

<strong>1. IIFE</strong>
J'aurais dû préciser que les parenthèses qui entouraient la déclaration des fonctions auto-appelantes permettaient de transformer une instruction en expression, seule cette dernière étant habilitée à être appelée avec les parenthèses qui suivent. De telles parenthèses peuvent s'appliquer partout, et il ne s'agit pas vraiment d'une spécificité des fonctions IIFE. Par exemple (4).toFixed(3);

Autre point, certains passent également la variable <i>undefined</i> parmi les paramètres sans la passer par les arguments. En effet, <i>undefined</i> est accessible en écriture et peut donc être écrasé...

<strong>2. Mode strict</strong>
Le mode strict va bientôt réapparaître dans un tout prochain article.

<strong>3. Namespace</strong>
Je ne pense pas que l'utilisation des namespaces telle qu'exposée dans mon article soit totalement optimale, pour les raisons suivantes:
- <i>window</i> n'est pas une référence absolue, puisque cette variable dépend de l'environnement d'exécution du script. Ainsi, dans node.js, par exemple, </i>window</i> n'existe pas. Ceci rend le code peu portable.
- Il existe un pattern extrêmement puissant qui gère ce problème bien mieux et que je viens de découvrir. Il s'agit de la Loose Augmentation. 
<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/rlefebvre/u3MfK/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
Génial non?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[Espace de code s&eacute;curis&eacute; | The Dark Side Of The Web | Bonnes Pratiques Web | Scoop.it]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/bonnespratiquesweb/p/3998088210/espace-de-code-securise-the-dark-side-of-the-web</wp:comment_author_url>
			<wp:comment_date>2013-03-09 17:10:09</wp:comment_date>
			<wp:comment_date_gmt>2013-03-09 16:10:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &nbsp; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>This is it! Le contexte en Javascript</title>
		<link>http://www.thedarksideofthewebblog.com/this-is-it-le-contexte-en-javascript/</link>
		<pubDate>Mon, 04 Mar 2013 19:45:18 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA["Tous les Crétois sont des menteurs!" C'est par cette phrase que le philosophe Epiménide a livré à l'humanité le plus célèbre des syllogismes. Lui-même étant crétois, il révélait de manière implicite son mensonge et sous-entendait que son affirmation devenait fausse.

J'ai été fort étonné d'apprendre récemment que ce paradoxe logique illustrait une complexité mathématique impliquée dans la théorie des ensembles de Russell, ou encore dans la machine universelle de Turing (mais ne m'en demandez pas plus).

Pour ma part, je garde une préférence pour le <a title="Wikipédia: Paradoxe du fromage à trous" href="http://fr.wikipedia.org/wiki/Paradoxe_du_fromage_%C3%A0_trous">paradoxe du fromage à trous</a>, sans doute parce que cet aliment constitue la base de mon déjeuner, si bien que mes collègues se demandent parfois si je supporte toute autre forme de régime.
<p style="text-align: left; padding-left: 30px;">"Plus il y a de fromage, plus il y a de trous;
or plus il y a de trous, moins il y a de fromage;
donc plus il y a de fromage, moins il y a de fromage."</p>
Ce syllogisme est intéressant car il montre combien le référent est important dans la compréhension du contexte. Si notre pensée conceptualise facilement le langage (un mot peut avoir un sens radicalement différent suivant son utilisation), il n'en est pas toujours de même en informatique.

Aussi, lorsque l'on vient du monde classique de la programmation orientée objet, le contexte de Javascript peut surprendre. Le mot-clé <em>this</em>, qui désigne habituellement l'objet courant, semble insaisissable, voire même spécieux. Il peut être présent en dehors d'un objet, ou, à l'inverse, ne pas le référencer. Si une fonction l'appelle, il peut contenir tantôt l'espace global, tantôt <em>undefined</em>...

Les apparences sont trompeuses et il semble difficile de se fier à ce mot-clé, du moins sans savoir dans quel contexte précis il est utilisé. En somme, <em>this</em> ressemble à un gros fromage à trou: Le référent change en fonction du contexte.

C'est pourquoi cet article propose de réaliser un petit tour des différents types de contexte, d'identifier précisément ce que <em>this</em> nous cache, et de démystifier par la sorte l'orienté objet sous Javascript.
<h2>Le contexte par défaut</h2>
L'Objet Global (<em>Global Object</em>) est un objet spécifique à Javascript qui ne peut être instancié et qui reçoit, en début d'interprétation du code, une série de propriétés utilisables à travers l'ensemble du code. Il s'agit de valeurs comme <em>undefined</em>, <em>Infinity</em> ou <em>NaN</em>, de fonctions comme <em>isNaN()</em>, <em>parseInt()</em>, ou <em>eval()</em>, ou encore d'objets comme <em>Date</em>, <em>Error</em>, ou <em>Math</em>.

Du côté client, lorsque Javascript est exécuté par un navigateur, cet objet est matérialisé par <em>Window</em>, l'objet racine du BOM (Browser Object Model), lequel est accessible par sa propre propriété <em>window (self-referential property)</em>.

Cet objet représente, en quelque sorte, le contexte par défaut.
<h3>L'espace global</h3>
L'espace global est l'espace de code qui n'est situé à l'intérieur d'aucune fonction. Il est lié à l'Objet Global qui en représente le contexte et auquel <em>this</em> fait référence. Dans le cadre d'une interprétation du code par un navigateur, <em>this</em> et <em>window</em> pointeront vers le même contexte.

<iframe style="width: 100%; height: 100px;" src="http://jsfiddle.net/rlefebvre/rYx9E/3/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Il faut noter qu'il ne s'agit pas d'une vérité universelle, et que pour garantir un portage de Javascript, il est préférable d'éviter autant que possible de faire référence à <em>window</em>.
<h3>Les déclarations de fonction</h3>
Les fonctions déclaratives sont, par défaut, également liées à l'Objet Global.

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/M5eB4/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Toutefois, une particularité importante différencie le comportement d'une fonction par rapport à l'espace global. Le mode strict de Javascript empêche en effet le référencement de <em>this</em> dans une fonction, alors qu'il est toujours présent dans l'espace global. La fonction ne se mêle ainsi plus à l'Objet Global dont, il est vrai, elle ne constitue normalement pas une méthode.

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/MCdZd/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h3>Les expressions de fonction</h3>
Le contexte d'exécution d'une expression de fonction ne diffère guère de la fonction déclarative. A nouveau, l'Objet Global lui est assimilé, uniquement si le mode strict n'est pas activé.

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/fgyBm/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/2JXDY/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Il en va de même pour une fonction IIFE qui n'est rien d'autre qu'une expression de fonction appelée directement.

<iframe style="width: 100%; height: 110px;" src="http://jsfiddle.net/rlefebvre/7THtk/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Le mode strict annulant également le référencement de <em>this</em>.

<iframe style="width: 100%; height: 110px;" src="http://jsfiddle.net/rlefebvre/UgGWZ/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cette caractéristique permet de savoir si le mode strict est supporté par l'environnement d'exécution du code.

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/zjX9h/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Le contexte des objets</h2>
Si une fonction est utilisée comme constructeur, c'est-à-dire qu'elle sert à instancier un nouvel objet, son contexte est rattaché à ce dernier, et <em>this</em> représente l'objet courant, tel qu'on en a l'habitude.

<iframe style="width: 100%; height: 110px;" src="http://jsfiddle.net/rlefebvre/QJwtK/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cela semble simple... Nous allons toutefois constater que l'utilisation de ce contexte peut varier dans les fonctions déclarées à l'intérieur de l'objet.
<h3>Les fonctions imbriquées</h3>
Nous avons vu que le contexte d'une fonction était lié à l'Objet Global. Ce comportement est identique si celle-ci est déclarée à l'intérieur d'un objet.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/DBPFb/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Ce dernier cas laisse toutefois quelque peu dubitatif. En effet, pour quelle raison la fonction <em>foo</em> n'hériterait pas du contexte de l'objet qui la contient?

La première chose à bien comprendre, c'est que nous n'avons pas affaire ici à une méthode de l'objet. On parle souvent, à tort, de "méthode privée" lorsqu'une fonction est déclarée de la sorte, parce qu'elle ne sera pas accessible depuis l'extérieur de l'objet. Il s'agit plus exactement d'une <a title="Wikipédia: Fonction imbriquée" href="http://fr.wikipedia.org/wiki/Fonction_imbriqu%C3%A9e" target="_blank">fonction imbriquée</a> (<em>nested function</em>), c'est-à-dire d'une fonction autonome déclarée tout simplement à l'intérieur d'une autre fonction, et accessible depuis cette dernière uniquement. Cette écriture est également permise par <a title="php.net: Les fonctions définies par l'utilisateur" href="http://php.net/manual/fr/functions.user-defined.php#example-159" target="_blank">PHP</a>, bien qu'elle n'y soit, par contre, absolument pas recommandée.

Deuxièmement, il ne faut pas perdre de vue que <em>this</em> n'est pas une variable. Il s'agit d'un mot-clé qui possède une valeur contextuelle. Concrètement, cela signifie que <em>this</em> n'a pas de portée, contrairement à une variable dont la portée est, en Javascript, toujours descendante. Ainsi, les fonctions imbriquées, qui bénéficient normalement d'un accès aux variables de leur fonction conteneur, n'héritent pas du même contexte.

Les expressions de fonctions initialisées à l'aide du mot-clé <em>var</em>, tout comme les déclarations de fonction, possèdent un contexte indépendant de l'objet. La preuve en est que <em>this</em> n'est plus, ici aussi, référencé sous le mode strict, ce qui permet d'éviter toute confusion. Une raison supplémentaire de ne pas hésiter à utiliser ce mode.

<iframe style="width: 100%; height: 160px;" src="http://jsfiddle.net/rlefebvre/vYsXg/4/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h3>Les méthodes d'objet</h3>
Les expressions de fonction n'ont toutefois pas dit leur dernier mot, ce serait trop simple. Car si la variable contenant l'expression est liée à un objet comme attribut, son contexte va, cette fois-ci, être rattaché à ce dernier. La fonction partagera le même contexte que l'objet, en devenant ainsi une de ses méthodes.

Cela fonctionne au sein d'une instance d'<em>Object</em>, par exemple sous la forme d'un littéral.

<iframe style="width: 100%; height: 190px;" src="http://jsfiddle.net/rlefebvre/n3Hg4/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cela fonctionne lorsqu'une fonction sert de constructeur. La variable est directement liée au contexte de <em>MyClass</em>, ce qui permet à la fonction d'en hériter.

<iframe style="width: 100%; height: 220px;" src="http://jsfiddle.net/rlefebvre/YfQWH/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cela fonctionne si on passe par l'attribut <em>prototype</em>.

<iframe style="width: 100%; height: 160px;" src="http://jsfiddle.net/rlefebvre/Rv3kb/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Et cela fonctionne également lorsqu'on utilise la classe <em>Array</em>, qui n'est rien d'autre qu'un objet, certes un peu particulier, mais pouvant tout aussi bien accueillir une fonction.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/wpVa8/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

On constate un comportement différent des fonctions imbriquées qui tient dans la façon dont chacune est appelée. En étant rattachée à l'attribut d'un objet, les méthodes appartiennent à celui-ci, à l'inverse des fonctions imbriquées contenues dans une variable indépendante de l'objet.

On pourrait croire à un particularisme de Javascript. Pourtant, tout comme dans les autres langages orientés objet, seules les fonctions utilisées comme méthodes héritent de manière implicite du contexte de leur objet. De même, les fonctions internes n'héritent jamais de ce contexte, simplement car il ne s'agit pas de méthodes, ce qu'on a tendance à oublier.

La différence de Javascript tient ainsi plus en l'utilisation particulière de ses objets, où méthodes et fonctions sont déclarées à un même niveau (ce qui n'est pas le cas en PHP où toutes les fonctions d'un objet sont ses méthodes, et où les fonctions indépendantes ne peuvent être déclarées de manière imbriquée qu'à l'intérieur d'une de ses méthodes), qu'en une interprétation saugrenue de son contexte.
<h2>Détournement de contexte</h2>
Vous l'aurez compris, le contexte d'une fonction varie selon son utilisation, laquelle peut s'avérer multiple en Javascript. Nous avons étudié un usage classique d'objet et de ses méthodes. Mais déclarer un objet demeure très proche d'une simple fonction qui peut tout aussi bien être utilisée comme constructeur, sans que sa syntaxe interne ne soit modifiée. Les seules différences résident dans l'utilisation du mot-clé <em>new</em> lors de l'appel de la fonction, et de la modification du contexte à l'intérieur de celle-ci.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/eaJTt/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Il en va bien sûr de même pour les instances d'<em>Object</em> dont chaque méthode peut retourner un nouvel objet.

<iframe style="width: 100%; height: 190px;" src="http://jsfiddle.net/rlefebvre/aTRmf/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Ce comportement déplaisant peut se révéler dangereux. Il engendrera d'ailleurs une erreur si, <em>this</em> valant <em>undefined</em> en mode strict, cette valeur est utilisée tel un objet existant.

<iframe style="width: 100%; height: 180px;" src="http://jsfiddle.net/rlefebvre/PnLb7/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Enfin, puisqu'une méthode n'est jamais que la simple valeur d'un attribut, il est également possible de l'assigner à un autre objet. Le contexte de la fonction référence alors l'objet receveur, et plus celui d'origine, ce qui peut entraîner une certaine confusion par rapport au résultat attendu.

<iframe style="width: 100%; height: 250px;" src="http://jsfiddle.net/rlefebvre/bYJkr/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h3>Systématiser l'accès à <em>this</em></h3>
Il est assez frustrant que <em>this</em> demeure inaccessible dans les fonctions imbriquées, alors qu'il est bien reconnu dans les méthodes de l'objet. Comment se dépêtrer d'une telle architecture si le contexte est soumis de la sorte à la déclaration des fonctions?

Une astuce existe pour récupérer le contexte de l'objet et accéder à ses attributs dans une fonction imbriquée. Elle consiste à assigner <em>this</em> à une variable dont la portée sera plus simple à manier.

<iframe style="width: 100%; height: 250px;" src="http://jsfiddle.net/rlefebvre/Nvejf/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

En extrapolant un peu, on peut imaginer prévenir tout problème lié à l'utilisation de la fonction de manière directe plutôt que comme constructeur, en assignant un objet par défaut à cette variable si <em>this</em> n'est pas défini. Tout attribut rattaché à la variable est alors assigné à un objet vide, ce qui ne déclenchera pas d'erreur.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/3S2sX/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Mais je ne sais pas si cette astuce constitue une bonne pratique, et s'il ne vaut tout simplement pas mieux lancer une erreur en testant la valeur de <em>this</em>.

<iframe style="width: 100%; height: 250px;" src="http://jsfiddle.net/rlefebvre/KAD5H/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h3>Call, apply, et bind</h3>
Nous avons tous appris qu'en Javascript, les fonctions étaient des objets, et que, comme tout bon objet qui se respecte, elles possédaient elles-mêmes des propriétés et des méthodes natives.

L'une de ces méthodes nous intéresse particulièrement car elle permet de spécifier le contexte. Il s'agit de la méthode <a title="Mozilla Developer Network: Function.prototype.call" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/Call" target="_blank"><em>call()</em></a> (et de sa soeur <a title="Mozilla Developer Network: Function.prototype.apply" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply" target="_blank"><em>apply()</em></a> dont le comportement est similaire si ce n'est que cette dernière accepte les arguments à faire passer à la fonction sous la forme d'un tableau).

Cette méthode sert à invoquer une fonction et prend, comme premier argument, la valeur que <em>this</em> aura dans celle-ci. Si aucun argument n'est passé (ou que l'on passe <em>null</em> ou <em>undefined</em>) et que la fonction n'est pas exécutée en mode strict, <em>this</em> continuera à valoir l'Objet Global.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/6U5Ub/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Le contexte d'une méthode peut ainsi être associé à n'importe quel objet.

<iframe style="width: 100%; height: 230px;" src="http://jsfiddle.net/rlefebvre/5CEQ2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

En EcmaScript 5, la méthode <a title="Mozilla Developper Network: bind()" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind" target="_blank"><em>bind()</em></a> repose sur un principe similaire, mais permet une écriture plus élégante ainsi qu'un appel transparent.

<iframe style="width: 100%; height: 230px;" src="http://jsfiddle.net/rlefebvre/vmaDN/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Le contexte des évènements</h2>
Le contexte des évènements liés au DOM évolue également suivant la manière dont il est appelé. Mais nous allons constater que l'utilisation de fonctions dans ce cadre se conforme aux règles précédemment étudiées.

D'une manière générale, le contexte d'un attribut pointe vers l'objet HTML associé à l'évènement.

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/GPg73/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cependant, le contexte de l'attribut <em>onload</em> de la balise <em>body</em> ne pointe pas vers cette dernière, mais vers l'objet <em>Window</em>. Il s'agit d'une exception un peu déroutante.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/QcL5e/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

En réalité, ce code est l'équivalent HTML d'un appel à la méthode <em>onload</em> de l'objet <em>Window</em>.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/yucp5/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Il ne faut par ailleurs pas confondre le contexte de l'attribut avec le contexte d'une fonction que celui-ci peut appeler. En effet, toute fonction conserve son comportement habituel en associant l'Objet Global à <em>this</em> (ou <em>undefined</em> selon le mode).

<iframe style="width: 100%; height: 200px;" src="http://jsfiddle.net/rlefebvre/evWNB/8/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Si l'évènement est déclaré dans une méthode associée à l'objet HTML, <em>this</em> référence normalement son objet. Le contexte change, car l'écriture de la fonction change.

<iframe style="width: 100%; height: 100px;" src="http://jsfiddle.net/rlefebvre/MyFps/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<iframe style="width: 100%; height: 100px;" src="http://jsfiddle.net/rlefebvre/yfnYu/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Enfin, en jQuery, n'oublions pas que <em>this</em> ne référence pas un objet jQuery, mais bien un objet HTML.

<iframe style="width: 100%; height: 100px;" src="http://jsfiddle.net/rlefebvre/n5SxP/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Conclusion</h2>
En définitive, le contexte semble plus simple qu'imaginé de prime abord, et peut se borner à quelques grandes règles:
<ul>
	<li>Au niveau de l'espace global, <em>this</em> référence l'Objet Global.</li>
	<li>A l'intérieur de l'attribut d'une balise HTML, <em>this</em> référence l'objet HTML de cette balise (à l'exception de l'attribut <em>onload</em> de la balise <em>body</em> qui référence <em>Window</em>).</li>
	<li>Dans une fonction, qu'il s'agisse d'une déclaration ou d'une expression, qu'elle soit imbriquée ou non, qu'elle ait été appelée depuis l'espace global ou un attribut HTML, <em>this</em> vaut l'Objet Global, ou <em>undefined</em> si le mode strict est activé.</li>
	<li>Dans une méthode, <em>this</em> vaut l'objet qui contient la méthode.</li>
	<li><em>Call</em>, <em>apply</em> et <em>bind</em> sont des méthodes de la fonction qui permettent de redéfinir <em>this</em> en une valeur arbitraire.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2013-03-04 20:45:18</wp:post_date>
		<wp:post_date_gmt>2013-03-04 19:45:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>this-is-it-le-contexte-en-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binding"><![CDATA[binding]]></category>
		<category domain="category" nicename="la-poo-en-js"><![CDATA[La POO en JS]]></category>
		<category domain="post_tag" nicename="strict-mode"><![CDATA[strict mode]]></category>
		<category domain="post_tag" nicename="this"><![CDATA[this]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[this, contexte, objet, bind, call, apply, strict mode]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment comprendre this? Il est souvent difficile d'utiliser this car ce mot-clé possède une valeur changeante. Pire, son comportement est méconnu alors que l'on croit l'avoir totalement appréhendé. C'est pourquoi cet article examine les différents contextes où l'on retrouve this et en résume les principaux principes.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_zerterone@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-05-19 20:31:12|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[Javascript | Pearltrees]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.pearltrees.com/windu02/javascript/id6394099#pearl73103764&amp;show=reveal,6</wp:comment_author_url>
			<wp:comment_date>2013-03-09 14:36:13</wp:comment_date>
			<wp:comment_date_gmt>2013-03-09 13:36:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This is it! Le contexte en Javascript | The Dark Side Of The Web [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[This is it! Le contexte en Javascript | The Dark Side Of The Web | Bonnes Pratiques Web | Scoop.it]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/bonnespratiquesweb/p/3998086655/this-is-it-le-contexte-en-javascript-the-dark-side-of-the-web</wp:comment_author_url>
			<wp:comment_date>2013-03-09 17:15:02</wp:comment_date>
			<wp:comment_date_gmt>2013-03-09 16:15:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &nbsp; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-03-22 13:57:07</wp:comment_date>
			<wp:comment_date_gmt>2013-03-22 12:57:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Une <a href="http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/" rel="nofollow">référence intéressante</a> pour comprendre <em>this</em>.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2013-04-21 19:10:38</wp:comment_date>
			<wp:comment_date_gmt>2013-04-21 18:10:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A noter également que <em>this</em> est accessible depuis une méthode de classe, mais ne permet pas pour autant d'avoir accès aux attributs d'instance.

<iframe width="100%" height="250" src="http://jsfiddle.net/rlefebvre/vVLNm/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366567838.984489;s:7:"message";s:119:"Akismet n&rsquo;a pas pu revérifier ce commentaire (réponse&nbsp;: )&nbsp;; il fera une nouvelle tentative plus tard.";s:5:"event";s:11:"check-error";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366569087.804584;s:7:"message";s:74:"Akismet a validé ce commentaire suite à une revérification automatique.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[Déclaration et définition de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-05-10 14:52:11</wp:comment_date>
			<wp:comment_date_gmt>2013-05-10 13:52:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Une méthode n&rsquo;est rien d&rsquo;autre qu&rsquo;une fonction rattachée à un objet, qui, dans ce cadre, bénéficie d&rsquo;un accès à ce dernier via le mot-clé this, comme je l&rsquo;ai expliqué dans mon article sur le contexte. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368193931.9012289;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368200771.0424199;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[Appel et retour de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/appel-et-retour-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-07-04 12:10:31</wp:comment_date>
			<wp:comment_date_gmt>2013-07-04 11:10:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Mais cette technique ne fonctionne plus en mode strict, ce qui démontre qu&rsquo;elle n&rsquo;est pas optimale du tout. Sur ce sujet, je vous recommande mon article sur le contexte. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372936231.440809;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372936268.957238;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>156</wp:comment_id>
			<wp:comment_author><![CDATA[Les closure en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-closure-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-11-12 22:53:35</wp:comment_date>
			<wp:comment_date_gmt>2013-11-12 21:53:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 5.4, la classe Closure bénéficie de méthodes natives permettant le binding, à l&rsquo;instar de Javascript. Le binding est une technique qui vise à redéfinir le contexte d&rsquo;une fonction, en lui [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1384293215.0725591;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385381408.6478219;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>565</wp:comment_id>
			<wp:comment_author><![CDATA[Stéphane]]></wp:comment_author>
			<wp:comment_author_email>zerterone@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://none</wp:comment_author_url>
			<wp:comment_date>2014-05-19 20:31:12</wp:comment_date>
			<wp:comment_date_gmt>2014-05-19 19:31:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Tu n'as pas d'instance : tu n'as pas initialisé ton objet ie. lancé son constructeur.
La fonction "foo" n'es pas une méthode d'instance mais juste une propriété de l'objet unique que tu as créé plutôt.

var b = new Bar();// ton objet est initialisé
console.log('b', b.arg);//arg existe , est une propriété
b.foo();// foo n'existe pas]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>49</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400527872.3241911;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400571697.7203009;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>573</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-05-20 08:50:14</wp:comment_date>
			<wp:comment_date_gmt>2014-05-20 07:50:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Tout à fait, mais c'était justement le propos de mon commentaire: je parle d'une fonction de classe et pas d'une fonction d'instance. Le this n'est pas le même. Et dans une fonction de classe, le this n'est pas l'instance. Il n'est donc pas possible d'accéder aux propriétés de l'instance, comme depuis l'instance il n'est pas possible d'accéder directement à la fonction de classe (ou alors il faut faire bar.constructor.foo();).

merci pour ta remarque!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>565</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400572214.342591;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Hello world!</title>
		<link>http://www.thedarksideofthewebblog.com/hello-world/</link>
		<pubDate>Mon, 28 Jan 2013 18:44:45 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=194</guid>
		<description></description>
		<content:encoded><![CDATA[Seule une poignée d'initiés, l’œil rougi, la peau blafarde, et que les quidam appellent les développeurs du web,  savent combien, derrière la myriade de pages que constitue la toile, règne un monde de chaos: le code. C'est la face cachée du web, doux euphémisme pour ne pas évoquer son côté obscur.

Une vie de sacrifices attend ces justiciers de l'ombre, héros des temps modernes sans qui il serait impossible de télécharger des images de "petits chatons trop kawaï". Leur quête sera de combattre le bug sans relâche. Ils parlent des langues inconnues pour dompter les machines, et possèdent l'art des raccourcis-clavier qu'ils manient comme des armes tranchantes.

Puis vient le jour béni où un premier "Hello world" s'affiche. Et ce jour est arrivé pour mon blog. :-D

Bref, tout ça pour vous souhaiter la bienvenue. Ce blog est l'occasion de remettre un peu d'ordre dans mon cerveau. J'espère qu'il m'aidera à améliorer mes connaissances et me permettra de garder une trace de ce que j'apprends. C'est donc, avant tout, un blog didactique et perfectible, un carnet de bord de mon apprentissage. Et puis le lieu de quelques élucubrations aussi...

Je vous souhaite une bonne lecture!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date>2013-01-28 19:44:45</wp:post_date>
		<wp:post_date_gmt>2013-01-28 18:44:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="non-classe"><![CDATA[Divers]]></category>
		<category domain="post_tag" nicename="petits-chatons-trop-kawai"><![CDATA[petits chatons trop kawaï]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[petits chatons trop kawaï]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Bienvenue sur mon blog]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Nico]]></wp:comment_author>
			<wp:comment_author_email>nikoms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-01-29 13:47:08</wp:comment_date>
			<wp:comment_date_gmt>2013-01-29 12:47:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonne chance Raph :) Longue vie au coté obscur!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2013-01-29 20:03:20</wp:comment_date>
			<wp:comment_date_gmt>2013-01-29 19:03:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonne chance à toi aussi pour ton blog! Soyons méchants! ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Tony]]></wp:comment_author>
			<wp:comment_author_email>tonydiniro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-01-31 08:47:56</wp:comment_date>
			<wp:comment_date_gmt>2013-01-31 07:47:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, bravo pour le blog!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Nath]]></wp:comment_author>
			<wp:comment_author_email>nathaliedecasteau@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-02-05 17:40:20</wp:comment_date>
			<wp:comment_date_gmt>2013-02-05 16:40:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Whaouuu !!!!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Mika]]></wp:comment_author>
			<wp:comment_author_email>willtard@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-02-06 13:38:08</wp:comment_date>
			<wp:comment_date_gmt>2013-02-06 12:38:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Youpiii, ca commence!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Vince]]></wp:comment_author>
			<wp:comment_author_email>Vincentmisonne@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-02-08 00:42:33</wp:comment_date>
			<wp:comment_date_gmt>2013-02-07 23:42:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Félicitation pour cet accouchement sans douleur!
Je ferai comme si j'y comprenais quelque chose au truc là, le développement.
C'est toujours l'occasion d'apprendre 2 ou 3 phrases par coeur pour briller en société]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Les fonctions en Javascript</title>
		<link>http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/</link>
		<pubDate>Wed, 01 May 2013 20:36:08 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=471</guid>
		<description></description>
		<content:encoded><![CDATA[Les fonctions sont essentielles en Javascript, même pour programmer en orienté objet. 

On pourrait croire que, s'agissant d'un élément de base en programmation, l'utilisation d'une fonction s'avère simpliste. Pourtant, mieux vaut ne pas s'y méprendre. Javascript comprend des nuances qu'il faut discerner pour réellement apprécier ce que l'on fait. 

Pour faire le point, je vous propose une suite de cinq articles autour de l'utilisation des fonctions, qui visent à les appréhender dans leur globalité sans toutefois entrer dans trop de détails:
<ol>
	<li><a href="http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript/" title="Déclaration et définition de fonctions en Javascript">Déclaration et définition de fonctions en Javascript</a>
<ul>
	<li>Fonction déclarative</li>
	<li>Expression de fonction anonyme</li>
	<li>Expression de fonction nominative</li>
	<li>Méthode</li>
	<li>Expression de fonction directe</li>
	<li>Instanciation de fonction</li>
	<li>Conclusion</li>
</ul>
</li>
	<li><a href="http://www.thedarksideofthewebblog.com/hoisting-de-fonctions-en-javascript/" title="Hoisting de fonctions en Javascript">Hoisting de fonctions en Javascript</a>
<ul>
	<li>Fonction déclarative</li>
	<li>Expression de fonction</li>
	<li>Instanciation de fonction</li>
	<li>Conclusion</li>
</ul>
</li>
	<li><a href="http://www.thedarksideofthewebblog.com/appel-et-retour-de-fonctions-en-javascript/" title="Appel et retour de fonctions en Javascript">Appel et retour de fonctions en Javascript</a>
<ul>
	<li>Appel et retour de base</li>
	<li>Appel dynamique</li>
	<li>Call, apply et bind</li>
	<li>Getter et setter</li>
	<li>Constructeur</li>
	<li>Conclusion</li>
</ul>
</li>
	<li><a href="http://www.thedarksideofthewebblog.com/arguments-et-parametres-de-fonctions-en-javascript/" title="Arguments et paramètres de fonctions en Javascript">Arguments et paramètres de fonctions en Javascript</a>
<ul>
	<li>Arguments optionnels</li>
	<li>Paramètres dynamiques</li>
	<li>callee et caller</li>
	<li>Function.length</li>
	<li>Conclusion</li>
</ul>
</li>
	<li><a href="http://www.thedarksideofthewebblog.com/patterns-de-fonctions-en-javascript/" title="Patterns de fonctions en Javascript">Patterns de fonctions en Javascript</a>
<ul>
	<li>Fonction de rappel</li>
	<li>Fonction d'ordre supérieur</li>
	<li>Fermeture</li>
	<li>Conclusion</li>
</ul>
</li>
</ol>
A suivre...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>471</wp:post_id>
		<wp:post_date>2013-05-01 21:36:08</wp:post_date>
		<wp:post_date_gmt>2013-05-01 20:36:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-fonctions-en-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="arguments"><![CDATA[arguments]]></category>
		<category domain="post_tag" nicename="fonction"><![CDATA[fonction]]></category>
		<category domain="post_tag" nicename="hoisting"><![CDATA[hoisting]]></category>
		<category domain="category" nicename="les-fonctions-en-js"><![CDATA[Les fonctions en JS]]></category>
		<category domain="post_tag" nicename="parametres"><![CDATA[paramètres]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[fonction, déclaration, définition, hoisting, appel, arguments, paramètres, closure, callback]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Introduction d'une série de cinq articles décortiquant les fonctions en Javascript.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[Déclaration et définition de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-05-20 14:50:05</wp:comment_date>
			<wp:comment_date_gmt>2013-05-20 13:50:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369057805.8909111;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369066990.2677741;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[Hoisting de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/hoisting-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-07-04 12:12:09</wp:comment_date>
			<wp:comment_date_gmt>2013-07-04 11:12:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] notre article précédent, qui entrait dans le cadre de notre série consacrée aux fonctions en Javascript, nous avions abordé les diverses façons de déclarer une fonction. Envisageons à présent les [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372936329.2262831;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372936332.963413;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[Arguments et paramètres de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/arguments-et-parametres-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-07-04 12:20:39</wp:comment_date>
			<wp:comment_date_gmt>2013-07-04 11:20:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] poursuivons notre série consacrée aux fonctions en Javascript par l&rsquo;utilisation des paramètres de [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372936839.4087479;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374079520.0137861;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>94</wp:comment_id>
			<wp:comment_author><![CDATA[Patterns de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/patterns-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-08-01 21:43:04</wp:comment_date>
			<wp:comment_date_gmt>2013-08-01 20:43:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] ce dernier article de notre série consacrée aux fonctions en Javascript, examinons quelques patterns indispensables à une utilisation de base des [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375389784.4358921;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375902071.846379;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[Appel et retour de fonctions en Javascript]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/appel-et-retour-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2014-02-27 22:07:48</wp:comment_date>
			<wp:comment_date_gmt>2014-02-27 21:07:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] avons vu, dans le premier article de notre série consacrée aux fonctions en Javascript, que l&rsquo;appel d&rsquo;une fonction se fait par son identifiant suivi impérativement de [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393790183.16834;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Closure, callback et fonctions dynamiques en PHP</title>
		<link>http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php/</link>
		<pubDate>Wed, 18 Sep 2013 18:08:18 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=633</guid>
		<description></description>
		<content:encoded><![CDATA[Bien coder nécessite, pour moi, de dépasser la contrainte du langage. A l'image d'une langue qui ne devient fluide que lorsque la grammaire se fait oublier, exploiter pleinement la puissance et le dynamisme offerts par un langage de programmation ne peut passer que par la seule maîtrise de celui-ci.

Dans ce cadre, nous recherchons souvent des architectures modulaires nécessitant un haut degré de découplage et requérant une programmation générique. C'est pour cette raison que l'exploitation, entre autres, des fonctions et méthodes dynamiques se révèle indispensable. 

Et c'est l'occasion d'une série d'articles récapitulant les outils que nous offre PHP:

<ol>
	<li><a title="Appel dynamique de fonctions en PHP" href="http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php/">Appel dynamique de fonctions en PHP</a>
<ul>
	<li>Invocation dynamique</li>
	<li>Surcharge magique de méthodes</li>
	<li>Paramètres dynamiques</li>
	<li>Conclusion</li>
</ul></li>

	<li><a title="Les closure en PHP" href="http://www.thedarksideofthewebblog.com/les-closure-en-php/">Les <em>closure</em> en PHP</a>
<ul>
	<li>Définition</li>
	<li>Typage</li>
	<li>Invocation</li>
	<li>Binding</li>
	<li>Reflection</li>
	<li>Méthode à la volée</li>
	<li>Conclusion</li>
</ul></li>

	<li><a title="Les callback en PHP" href="http://www.thedarksideofthewebblog.com/les-callback-en-php/">Les <em>callback</em> en PHP</a>
<ul>
	<li>Définition</li>
	<li>Typage</li>
	<li>Invocation</li>
	<li>Reflection</li>
	<li>Conclusion</li>
</ul></li>

	<li><a title="Mocker une méthode avec une closure en PHP" href="http://www.thedarksideofthewebblog.com/mocker-une-methode-avec-une-closure-en-php/">Mocker une méthode avec une <em>closure</em> en PHP</a></li>
	<li><a href="http://www.thedarksideofthewebblog.com/appel-dynamique-de-constructeur-en-php/" title="Appel dynamique de constructeur en PHP">Appel dynamique de constructeur en PHP</a>
<ul>
	<li>Instanciation dynamique</li>
	<li>Gestion des arguments</li>
	<li>Constructeur comme callback</li>
	<li>Conclusion</li>
</ul></li>

	<li>
	Utiliser un tableau associatif avec une <em>callback</em>
	</li>
</ol>

A suivre...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>633</wp:post_id>
		<wp:post_date>2013-09-18 19:08:18</wp:post_date>
		<wp:post_date_gmt>2013-09-18 18:08:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>closure-callback-et-fonctions-dynamiques-en-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="callback"><![CDATA[callback]]></category>
		<category domain="post_tag" nicename="closure"><![CDATA[closure]]></category>
		<category domain="post_tag" nicename="fonction-variable"><![CDATA[fonction variable]]></category>
		<category domain="category" nicename="les-callback-en-php"><![CDATA[Les callback en PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[closure, callback, fonction variable]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Introduction à une série d'articles dédiés à l'utilisation en PHP de fonctions et méthodes de manière dynamique, qu'il s'agisse de fonctions variables, de closure ou encore de callback.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>132</wp:comment_id>
			<wp:comment_author><![CDATA[Appel dynamique de fonctions en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-09-27 19:13:33</wp:comment_date>
			<wp:comment_date_gmt>2013-09-27 18:13:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380305613.409313;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380356930.53022;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>137</wp:comment_id>
			<wp:comment_author><![CDATA[Les closure en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-closure-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-10-07 20:05:42</wp:comment_date>
			<wp:comment_date_gmt>2013-10-07 19:05:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] poursuivons notre série consacrée à la gestion dynamique de fonctions avec l&rsquo;utilisation des [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381172742.865284;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381230071.8664019;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[Les callback en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-callback-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-12-02 13:57:44</wp:comment_date>
			<wp:comment_date_gmt>2013-12-02 12:57:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] troisième article de notre série consacrée à la gestion dynamique de fonctions aborde les [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385989064.2118139;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385999187.0930359;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>223</wp:comment_id>
			<wp:comment_author><![CDATA[Appel dynamique de constructeur en PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/appel-dynamique-de-constructeur-en-php/</wp:comment_author_url>
			<wp:comment_date>2014-03-03 17:48:45</wp:comment_date>
			<wp:comment_date_gmt>2014-03-03 16:48:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] nos précédents articles sur les fonctions dynamiques, nous avons vu qu&rsquo;il était très facile d&rsquo;appeler une méthode de manière dynamique [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394541513.890671;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Le pattern Memoization en Javascript</title>
		<link>http://www.thedarksideofthewebblog.com/le-pattern-memoization-en-javascript/</link>
		<pubDate>Thu, 04 Apr 2013 19:22:34 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=727</guid>
		<description></description>
		<content:encoded><![CDATA[Pour faire simple, la <a title="Wikipédia: Mémoization" href="http://fr.wikipedia.org/wiki/M%C3%A9moization" target="_blank">Mémoization</a> consiste à mettre en cache la valeur retournée par une fonction qui demande des ressources importantes ou un long temps de traitement.

En Javascript, le pattern de base consiste à doubler une fonction avec un cache et demande donc de déclarer deux fois chaque fonction.
<pre>var foo = function(arg){ return arg; }
var cachedFoo = cache(foo);
cachedFoo(arg);</pre>
Examinons le code:

<iframe src="http://jsfiddle.net/rlefebvre/w8AWE/1/embedded/" height="600" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

De nombreuses bibliothèques proposent une implémentation de ce pattern. <a title="Underscore: memoize" href="http://documentcloud.github.com/underscore/#memoize" target="_blank">Underscore</a> met, par exemple, à notre disposition la méthode <em>_.memoize(function, [hashFunction])</em>.

Pour comprendre plus en profondeur ce pattern, je vous recommande les deux articles suivants qui sont fort complets.
<ul>
	<li><a title="S4tori: La mémoization en Javascript" href="http://s4tori.info/blog/la-memoization-en-javascript-95" target="_blank">S4tori: La mémoization en Javascript</a></li>
	<li><a title="Addy Osmani: Faster JavaScript Memoization For Improved Application Performance" href="http://addyosmani.com/blog/faster-javascript-memoization/" target="_blank">Addy Osmani: Faster JavaScript Memoization For Improved Application Performance</a></li>
</ul>
Quant à cet article, il est une bonne excuse pour quelques essais d'écriture revisitée ne nécessitant pas de doubler la fonction.
<h2>Sous forme de méthode de cache</h2>
La première implémentation utilise le <em>prototype</em> de <em>Function</em>, à l'instar du pattern de Thomas Fuch, mais, à l'inverse de ce dernier, s'utilise directement, comme une sorte de spécialisation de la fonction.
<pre>var foo = function(arg){ return arg; }
foo.cache(arg);</pre>
Examinons le code:

<iframe src="http://jsfiddle.net/rlefebvre/p2KyB/2/embedded/" height="500" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Ce code utilise les notions de <em>prototype</em>, <em>closure</em> et IIFE, et fait appel aux méthodes <em>call</em> et <em>apply</em>.

Le comportement de base du code peut être expliqué de la sorte:
<ol>
	<li>Une méthode <em>cache</em> est définie de manière commune à toutes les fonctions, par l'intermédiaire de l'attribut <em>prototype</em> du constructeur <em>Function</em>.</li>
	<li>La <em>closure</em> permet de conserver le cache dans sa seule portée, tout en garantissant le partage de cette variable entre tous les appels de la méthode.</li>
	<li>Une clé unique pour chaque appel est obtenue par la concaténation du nom de la fonction avec la liste des arguments passés. Une fonction appelée plusieurs fois avec les mêmes arguments possède donc une clé identique. A noter que <em>arguments</em> n'étant pas un <em>Array</em>, il n'est pas possible d'utiliser directement <em>join</em>.</li>
	<li>Lors du premier appel de la fonction <em>cache</em>, celle-ci évalue la fonction dont elle est l'attribut en lui passant les mêmes arguments qu'elle a reçus, et met en cache le résultat retourné.</li>
</ol>
<h2>Sous forme de fonction de cache</h2>
On peut également imaginer une variante où <em>cache</em> n'est plus une méthode de <em>Function</em>, ce qui permet de ne pas toucher au <em>prototype</em> d'une classe native.
<pre>var foo = function(arg){ return arg; }
cache(foo)(arg);</pre>
Examinons le code:

<iframe src="http://jsfiddle.net/rlefebvre/aKsU4/1/embedded/" height="500" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Consolidation</h2>
Attention toutefois, dans les deux cas:
<ol>
	<li>Deux noms de méthode identiques mais d'objets différents se confondront dans le cache qui ne référence pas le nom des classes auxquelles chaque méthode appartient.</li>
	<li>L'attribut <em>name</em> de la fonction n'étant pas standard pour tous les navigateurs, ce script peut échouer, notamment sous IE.</li>
	<li>Les paramètres de type <em>Object</em> ne sont pas gérés, car il ne supporte pas la sérialisation.</li>
</ol>
Pour répondre aux deux premiers problèmes, on peut passer <em>this</em>, plutôt que <em>this.name</em> comme clé, ce qui rendra le cache plus lourd mais plus sûr.

Quant au troisième problème, il est plus délicat. Il s'agit de convertir un objet en <em>String</em>, tout en lui conférant une empreinte individuelle en fonction de ses attributs. L'idéal serait sans doute de bénéficier d'un identifiant d'objet, tel qu'une référence mémoire, mais je ne pense pas qu'il soit possible de déduire cela en Javascript.

A la place, <a title="MDN: stringify" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank"><em>JSON.stringify()</em></a> peut nous servir dans ce cadre, mais n'est disponible que depuis ECMAScript5. Si cette méthode n'est pas présente, il est nécessaire de boucler récursivement sur les propriétés de l'objet qui ne soient pas des méthodes.

Dans tous les cas, nous alourdissons davantage le code pour permettre la compatibilité entre navigateurs. C'est d'ailleurs pour cette raison que certaines bibliothèques tel <em>Underscore</em> acceptent de manière optionnelle une fonction de hashage personnelle comme deuxième argument.

Le code consolidé et redondant ressemble donc à ceci:

<iframe src="http://jsfiddle.net/rlefebvre/sxqw3/6/embedded/" height="1050" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>727</wp:post_id>
		<wp:post_date>2013-04-04 20:22:34</wp:post_date>
		<wp:post_date_gmt>2013-04-04 19:22:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>le-pattern-memoization-en-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binding"><![CDATA[binding]]></category>
		<category domain="post_tag" nicename="closure"><![CDATA[closure]]></category>
		<category domain="post_tag" nicename="iife"><![CDATA[IIFE]]></category>
		<category domain="category" nicename="les-patterns-de-js"><![CDATA[Les patterns de JS]]></category>
		<category domain="post_tag" nicename="memoization"><![CDATA[Memoization]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[memoization, IIFE, closure, apply, call]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Explication et implémentation du pattern Mémoization qui permet de gérer les caches en Javascript.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[Nicolas Froidure]]></wp:comment_author>
			<wp:comment_author_email>froidure_nicolas@yahoo.fr</wp:comment_author_email>
			<wp:comment_author_url>http://www.insertafter.com</wp:comment_author_url>
			<wp:comment_date>2013-04-05 09:05:38</wp:comment_date>
			<wp:comment_date_gmt>2013-04-05 08:05:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour cet article.

Néanmoins, je suis en désaccord avec la notion de fonction générique de cache. Le pattern cache est simple et connu, je suis plutôt d'avis de l'utiliser quand on en a besoin sur les fonctions pour lesquelles cela a du sens plutôt que de rendre le pattern générique avec tous les inconvénients que cela apporte (inopérant pour les fonctions anonymes, incompatibilité avec ie).

Le dernier script proposé prend plus de ressources CPU pour sérialiser/hasher la fonction que pour la plupart des cas d'usages où le pattern cache peut être utilisé (cache d'expressions régulières par ex.).

Pour le caching de ressources plus importantes (requêtes HTTP par exemple), une table de hachage clairement identifiée comme telle me semble plus maintenable sur le long terme.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2013-04-05 11:13:29</wp:comment_date>
			<wp:comment_date_gmt>2013-04-05 10:13:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour ton commentaire. Cela paraît évident qu'il faut utiliser des algorithmes connus et optimisés, comme, par exemple, la fonction d'Underscore que je cite. Et j'indique moi-même le problème d'incompatibilité et de lourdeur de ce script... Non, le but ici, c'est juste le plaisir d'essayer des nouvelles façons d'appeler une fonction de mémoization et de soulever quelques problèmes, tout ça afin d'élargir notre façon d'appréhender un pattern connu, sans prétention aucune. ^_^ merci en tout cas!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2013-04-23 13:02:22</wp:comment_date>
			<wp:comment_date_gmt>2013-04-23 12:02:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Une autre référence:
http://www.sitepoint.com/implementing-memoization-in-javascript/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366718542.2664959;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Déclaration et définition de fonctions en Javascript</title>
		<link>http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript/</link>
		<pubDate>Sun, 05 May 2013 18:16:30 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=812</guid>
		<description></description>
		<content:encoded><![CDATA[Dans ce premier article de notre série consacrée aux <a title="Les fonctions en Javascript" href="http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript" target="_blank">fonctions en Javascript</a>, nous allons lister les différentes façons de déclarer et de définir une fonction, pour mieux comprendre l'éventail de possibilités qui s'offrent à nous.

Avant toute chose, il faut distinguer la déclaration d'une fonction de sa simple définition.

La définition touche au corps de la fonction, c'est-à-dire à l'écriture du code qui sera exécuté lors de son appel, et n'implique pas forcément l'initialisation d'une variable accueillant cette définition.

La déclaration, de son côté, comprend également son initialisation. Attention que la déclaration pure, telle la déclaration d'une variable non initialisée, n'induit pas de valeur obligatoire, ce qui n'est pas possible avec une fonction.
<h2>Fonction déclarative</h2>
Une fonction déclarative (<em>function declaration statement</em>) est un <em>"statement"</em>, c'est-à-dire une commande en devenir qui pourra être appelée grâce à un identifiant. En réalité, Javascript déclare une variable au nom de la fonction et lui assigne cette dernière.

<iframe style="width: 100%; height: 130px;" src="http://jsfiddle.net/rlefebvre/yk8Hv/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Expression de fonction anonyme</h2>
Une expression de fonction (<em>function definition expression</em>) est une valeur à évaluer. Il ne s'agit donc pas d'une déclaration, mais d'une simple définition, laquelle peut être stockée dans une variable, comme toute autre valeur. Pour l'évaluer, il suffit d'utiliser la variable tel un appel de fonction déclarative. La variable contient la fonction en elle-même et non son évaluation.

<iframe style="width: 100%; height: 130px;" src="http://jsfiddle.net/rlefebvre/e5Hhp/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Expression de fonction nominative</h2>
Une expression de fonction peut également posséder un nom (<em>named function definition expression</em>), qui représentera une variable connue uniquement au sein de cette fonction.

<iframe style="width: 100%; height: 250px;" src="http://jsfiddle.net/rlefebvre/NhMdR/4/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Attention toutefois que MSIE ne réagit pas toujours correctement. Premièrement, ce navigateur ne reconnaît pas l'attribut <em>name</em>, et il n'est donc pas possible de s'en servir de manière standard.

Ensuite, certaines versions déclareraient deux fonctions à la fois, l'une au-travers de la variable qui accueille la fonction, l'autre au-travers de l'identifiant de la fonction. Aussi, dans l'exemple précédent, <em>foo</em> et <em>bar</em> seraient deux fonctions différentes mais contenant le même code. A ce sujet, je vous recommande l'<a title="Juriy " href="http://kangax.github.com/nfe/#jscript-bugs" target="_blank">article de Juriy "kangax" Zaytsev</a> sur les expressions de fonction. Pour ma part, j'ai testé ces bugs sous IE9 et ils semblent avoir été corrigés.

<h2>Méthode</h2>
Une méthode n'est rien d'autre qu'une fonction rattachée à un objet, qui, dans ce cadre, bénéficie d'un accès à ce dernier via le mot-clé <em>this</em>, comme je l'ai expliqué dans mon <a title="This is it! Le contexte en Javascript" href="http://www.thedarksideofthewebblog.com/this-is-it-le-contexte-en-javascript/" target="_blank">article sur le contexte</a>.

Une méthode se déclare comme une expression de fonction, anonyme ou non, passée à un attribut de l'objet.

Par ailleurs, les fonctions étant elles-mêmes des objets, il est possible de leur assigner des méthodes.

<iframe src="http://jsfiddle.net/rlefebvre/L3tmj/embedded/" height="250" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2>Expression de fonction directe</h2>
Une <a title="Ben Alman: Immediately-Invoked Function Expression (IIFE)" href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank">IIFE</a> (<em>Immediately-Invoked Function Expression</em>), que j'ai traduite, de manière quelque peu abrupte, par fonction directe, est une expression de fonction appelée directement après sa définition. Cette expression peut être anonyme ou nominative.

Attention toutefois que si la fonction est rattachée à une variable, celle-ci, contrairement à un usage classique d'expression de fonction, ne contient pas la fonction en elle-même, mais bien le résultat de son évaluation. Par défaut, si la fonction ne retourne rien, la variable vaudra donc <em>undefined</em>.

<iframe style="width: 100%; height: 130px;" src="http://jsfiddle.net/rlefebvre/tdDw2/2/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Si la fonction n'est pas rattachée à une variable, elle doit être contenue à l'intérieur de parenthèses pour pouvoir être évaluée au préalable.

<iframe style="width: 100%; height: 130px;" src="http://jsfiddle.net/rlefebvre/Ud2gX/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cette notation n'empêche néanmoins pas d'assigner le résultat de la fonction à une variable.

<iframe src="http://jsfiddle.net/rlefebvre/zTVCx/embedded/" height="120" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

EDIT: Il existe une notation alternative bien que celle-ci ne puisse par contre pas retourner de valeur utilisable: !function () {}();

Enfin, cette dernière forme d'écriture fonctionne mais entraîne une certaine confusion quant à sa lecture.

<iframe src="http://jsfiddle.net/rlefebvre/9V9kv/embedded/" height="130" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Attention toutefois qu'une IIFE rattachée à un attribut d'objet ne constitue pas une méthode qui s'exécute automatiquement. En effet, comme nous l'avons vu pour une simple variable, l'IIFE s'exécute indépendamment de l'attribut pour finalement ne lui assigner que sa valeur en retour. 

Cela a deux conséquences. Premièrement, l'attribut contient donc le retour de l'IIFE et non l'IIFE en tant que telle. En cela, il s'agit d'un comportement tel que nous l'avons décrit précédemment.

<iframe width="100%" height="180" src="http://jsfiddle.net/rlefebvre/BSj7Q/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Mais ce qu'il ne faut pas perdre de vue c'est que l'IIFE s'exécute comme une fonction et non comme une méthode, avec un contexte indépendant de l'objet courant.

<iframe width="100%" height="200" src="http://jsfiddle.net/rlefebvre/NLrRK/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

  
<h2>Instanciation de fonction</h2>
Enfin, il est possible d'utiliser le constructeur <em>Function</em> pour instancier une fonction, bien que cette méthode ne soit sans doute pas la plus lisible, alors qu'elle correspond en tout point à une définition de fonction anonyme.

Le constructeur reçoit une série d'arguments qui déterminent autant de noms de paramètres de la fonction, ainsi qu'un ultime argument qui contient, quant à lui, le corps même de la fonction. Tous ces arguments étant passés sous la forme de chaînes de caractères, il s'agit en quelque sorte d'une évaluation de fonction.

<iframe src="http://jsfiddle.net/rlefebvre/SuVSY/1/embedded/" height="180" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Conclusion</h2>
Au final, une fonction se caractérise toujours par au moins une définition de son corps, qu'il s'agisse de déclaration, d'expression de fonction ou que l'on passe par le constructeur.

Ce corps peut être évalué ensuite soit par l'intermédiaire d'une variable qui stocke la définition de la fonction, soit de manière directe si des parenthèses suivent la définition, comme dans une IIFE.

Une fonction peut posséder un identifiant interne, et n'est alors plus anonyme, quoique que cette méthode ne soit pas standard.

Enfin, une méthode n'est jamais qu'un attribut d'objet contenant une fonction.

Dans notre <a href="http://www.thedarksideofthewebblog.com/hoisting-de-fonctions-en-javascript/" title="Hoisting de fonctions en Javascript">prochain article</a>, consacré au <em>hoisting</em>, nous analyserons ce qu'impliquent les différentes façons de déclarer une fonction que nous venons de voir, car leur comportement peut différer quelque peu.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>812</wp:post_id>
		<wp:post_date>2013-05-05 19:16:30</wp:post_date>
		<wp:post_date_gmt>2013-05-05 18:16:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>declaration-et-definition-de-fonctions-en-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="expression-de-fonction"><![CDATA[expression de fonction]]></category>
		<category domain="post_tag" nicename="fonction"><![CDATA[fonction]]></category>
		<category domain="post_tag" nicename="fonction-anonyme"><![CDATA[fonction anonyme]]></category>
		<category domain="post_tag" nicename="iife"><![CDATA[IIFE]]></category>
		<category domain="category" nicename="les-fonctions-en-js"><![CDATA[Les fonctions en JS]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[fonction, déclaration, définition, expression de fonction, fonction anonyme, IIFE, méthode]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment déclarer une fonction en Javascript? Quels sont les différences entre expression de fonction, fonction anonyme, closure, etc... Pas si facile!]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[Hoisting de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/hoisting-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-05-20 16:10:00</wp:comment_date>
			<wp:comment_date_gmt>2013-05-20 15:10:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369062600.898279;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369066981.1435089;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>60</wp:comment_id>
			<wp:comment_author><![CDATA[Appel et retour de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/appel-et-retour-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-06-11 12:51:02</wp:comment_date>
			<wp:comment_date_gmt>2013-06-11 11:51:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] avons vu, dans le premier article de notre série consacrée aux fonctions en Javascript, que l&rsquo;appel d&rsquo;une fonction se [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370951462.1230519;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370951584.028188;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[Arguments et paramètres de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/arguments-et-parametres-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-07-04 12:08:31</wp:comment_date>
			<wp:comment_date_gmt>2013-07-04 11:08:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] même une fonction nominative qui néanmoins, comme nous l&rsquo;avons vu précédemment dans notre article sur les déclarations, n&rsquo;est malheureusement pas référencée sous certains navigateurs comme Internet [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372936111.5956299;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372936223.1026549;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[Les fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-07-04 12:14:47</wp:comment_date>
			<wp:comment_date_gmt>2013-07-04 11:14:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent Suivant &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372936487.952121;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374079521.361604;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>138</wp:comment_id>
			<wp:comment_author><![CDATA[Les closure en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-closure-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-10-07 22:09:25</wp:comment_date>
			<wp:comment_date_gmt>2013-10-07 21:09:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] traditionnelle, mais bien d&rsquo;une valeur contenant une fonction en devenir. On retrouve cette distinction en Javascript entre les fonctions déclaratives et les expressions de [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381180165.689389;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381230013.509536;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Hoisting de fonctions en Javascript</title>
		<link>http://www.thedarksideofthewebblog.com/hoisting-de-fonctions-en-javascript/</link>
		<pubDate>Mon, 20 May 2013 14:15:50 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=814</guid>
		<description></description>
		<content:encoded><![CDATA[Dans notre <a title="Déclaration et définition de fonctions en Javascript" href="http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript" target="_blank">article précédent</a>, qui entrait dans le cadre de notre série consacrée aux <a title="Les fonctions en Javascript" href="http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/" target="_blank">fonctions en Javascript</a>, nous avions abordé les diverses façons de déclarer une fonction. Envisageons à présent les différences de comportement qu'implique chaque écriture.
<h2>Fonction déclarative</h2>
Le hoisting consiste en l'interprétation des déclarations. En Javascript, lorsque le script se lance, le code est restructuré par l'interpréteur qui remonte l'ensemble des déclarations de fonction pour les placer devant les déclarations de variables.

Ceci permet de ne déclarer qu'une seule fois les fonctions pour l'ensemble du programme. Deux fonctions différentes avec un même identifiant s'écrasent donc, et seule la dernière fonction reste accessible.

<iframe src="http://jsfiddle.net/rlefebvre/KAzX7/embedded/" height="180" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

C'est aussi pour cette raison qu'il est possible d'appeler une fonction avant sa déclaration.

<iframe style="width: 100%; height: 130px;" src="http://jsfiddle.net/rlefebvre/f8PTh/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Javascript remonte les déclarations de fonction, car ce langage considère ces fonctions à un niveau global: elles doivent servir l'ensemble du code, à l'inverse des variables qui procèdent davantage d'un contexte local.

C'est pourquoi il n'est normalement pas permis de déclarer une fonction à l'intérieur d'un bloc de code, bien qu'il existe à ce sujet une certaine tolérance de la part des interpréteurs en mode non-strict.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/euKpY/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/SAKMG/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Ce type d'écriture est déconseillée à tout prix, car elle peut entraîner des comportements différents en fonction des navigateurs.

<iframe src="http://jsfiddle.net/rlefebvre/u33Nw/embedded/" height="250" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Bien heureusement, en tout cas dans les navigateurs récents que j'ai pu tester, si une fonction est déclarée à l'intérieur d'une autre fonction, elle n'est pas déclarée de manière globale et connaît une portée équivalente aux variables.

<iframe src="http://jsfiddle.net/rlefebvre/Ya5JH/embedded/" height="250" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2>Expression de fonction</h2>
A l'inverse des déclarations, les expressions de fonction doivent être déclarées avant d'être utilisées, ce qui entraîne de fait une redéfinition complète de la fonction lors de chaque initialisation.

<iframe style="width: 100%; height: 200px;" src="http://jsfiddle.net/rlefebvre/FbZVw/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Les expressions de fonction sont également écrasées, mais peuvent être définies autant de fois que souhaité.

<iframe width="100%" height="260" src="http://jsfiddle.net/rlefebvre/5NrTd/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

La réinitialisation constante d'une fonction lors de chaque définition nécessite de minimiser le code appelé, notamment lors de la déclaration d'une classe où l'on passera plus volontiers par l'attribut <em>prototype</em> pour sortir la définition des méthodes.

<iframe width="100%" height="350" src="http://jsfiddle.net/rlefebvre/H4x5x/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Une autre technique consiste notamment à utiliser des fonctions qui retournent elles-mêmes des fonctions.

<iframe width="100%" height="300" src="http://jsfiddle.net/rlefebvre/mFxXC/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2>Instanciation de fonction</h2>
Attention, enfin, au comportement particulier du constructeur <em>Function</em>, qui, contrairement à une expression de fonction, ne connaît pas la portée courante si elle ne lui est pas explicitement passée en paramètre.

<iframe src="http://jsfiddle.net/rlefebvre/2ZCnB/embedded/" height="120" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Conclusion</h2>
Deux grands principes à retenir concernant le hoisting:
<ul>
	<li>Si une fonction est déclarative, il est important de la placer au niveau global du code pour éviter tout effet inattendu. L'utilisation du mode strict permet de prévenir toute mauvaise utilisation de ce type.</li>
	<li>S'il s'agit d'une expression de fonction, il est important d'éviter la multiplication des initialisations d'une même définition, car cela peut entraîner une lourdeur superflue du code.</li>
</ul>
Dans notre <a href="http://www.thedarksideofthewebblog.com/appel-et-retour-de-fonctions-en-javascript/" title="Appel et retour de fonctions en Javascript">prochain article</a>, nous envisagerons les différentes façons d'appeler une fonction.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>814</wp:post_id>
		<wp:post_date>2013-05-20 15:15:50</wp:post_date>
		<wp:post_date_gmt>2013-05-20 14:15:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hoisting-de-fonctions-en-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fonction"><![CDATA[fonction]]></category>
		<category domain="post_tag" nicename="hoisting"><![CDATA[hoisting]]></category>
		<category domain="category" nicename="les-fonctions-en-js"><![CDATA[Les fonctions en JS]]></category>
		<category domain="post_tag" nicename="portee"><![CDATA[portée]]></category>
		<category domain="post_tag" nicename="strict-mode"><![CDATA[strict mode]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[fonction,  hoisting, portée, strict mode]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Le hoisting consiste en l'interprétation des déclarations et des portées par le moteur du code.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>63</wp:comment_id>
			<wp:comment_author><![CDATA[Déclaration et définition de fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-06-26 12:55:50</wp:comment_date>
			<wp:comment_date_gmt>2013-06-26 11:55:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent Suivant &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372247750.7004249;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372263672.175436;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>95</wp:comment_id>
			<wp:comment_author><![CDATA[Les fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-08-01 21:45:41</wp:comment_date>
			<wp:comment_date_gmt>2013-08-01 20:45:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Hoisting de fonctions en Javascript [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375389941.1267681;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375902069.2984891;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com</wp:comment_author_url>
			<wp:comment_date>2013-10-24 16:13:01</wp:comment_date>
			<wp:comment_date_gmt>2013-10-24 15:13:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Autres articles sur le sujet:
http://net.tutsplus.com/tutorials/javascript-ajax/quick-tip-javascript-hoisting-explained/
http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1382627581.8389349;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1382640547.839551;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Appel et retour de fonctions en Javascript</title>
		<link>http://www.thedarksideofthewebblog.com/appel-et-retour-de-fonctions-en-javascript/</link>
		<pubDate>Tue, 11 Jun 2013 11:49:42 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=816</guid>
		<description></description>
		<content:encoded><![CDATA[Nous avons vu, dans le <a title="Déclaration et définition de fonctions en Javascript" href="http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript" target="_blank">premier article</a> de notre série consacrée aux <a title="Les fonctions en Javascript" href="http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/" target="_blank">fonctions en Javascript</a>, que l'appel d'une fonction se fait par son identifiant suivi impérativement de parenthèses, lesquelles peuvent contenir les arguments à faire passer. Sans ces parenthèses, la fonction, qui est contenue dans une variable, n'est pas évaluée.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/GL3TH/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Par défaut, une fonction retourne <em>undefined</em>, sauf si, bien sûr, une valeur est retournée de manière explicite grâce à l'opérateur <em>return</em>.

<iframe style="width: 100%; height: 100px;" src="http://jsfiddle.net/rlefebvre/ry4Vc/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

L'utilisation de l'opérateur <em>typeof</em> confirme cela.

<iframe width="100%" height="100" src="http://jsfiddle.net/rlefebvre/dmqu9/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2>Appel dynamique</h2>
Il est très facile d'appeler dynamiquement une méthode, puisqu'un attribut d'objet est accessible par la notation entre crochets. La valeur que l'on passe entre les crochets est évaluée et associée au nom d'un attribut.

<iframe width="100%" height="150" src="http://jsfiddle.net/rlefebvre/jZud7/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

En mode non strict, il est possible d'appeler de la même manière une fonction depuis l'Object Global, ce qui nécessite toutefois de connaître ce dernier en fonction du contexte d'exécution.

<iframe width="100%" height="120" src="http://jsfiddle.net/rlefebvre/twua4/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Mais mieux vaut éviter l'objet global. De plus, cette technique ne fonctionne plus en mode strict, ce qui démontre qu'elle n'est pas optimale du tout. Sur ce sujet, je vous recommande mon<a title="This is it! Le contexte en Javascript" href="http://www.thedarksideofthewebblog.com/this-is-it-le-contexte-en-javascript/" target="_blank"> article sur le contexte</a>. 

Il existe une autre possibilité qui consiste à utiliser <em>eval</em> avec le nom de la fonction comme paramètre, suivi par les parenthèses et les éventuels arguments.

<iframe width="100%" height="140" src="http://jsfiddle.net/rlefebvre/3BkDF/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Quoique les <em>eval</em> n'ont pas non plus très bonne réputation...

<h2>Call, apply et bind</h2>
Une fonction peut également être appelée de manière indirecte, via les méthodes natives de <em>Function</em>, telles que <em>call</em>, <em>apply</em> ou <em>bind</em>, dont j'explique le fonctionnement à nouveau dans mon <a title="This is it! Le contexte en Javascript" href="http://www.thedarksideofthewebblog.com/this-is-it-le-contexte-en-javascript/" target="_blank">article sur le contexte</a>. 

<em>Apply</em> est une méthode particulièrement intéressante car elle permet d'appeler une fonction en lui passant des arguments sous forme d'un tableau, à l'instar de <a title="PHP: call_user_func_array" href="http://php.net/manual/en/function.call-user-func-array.phphttp://" target="_blank">call_user_func_array</a> en PHP.

<iframe src="http://jsfiddle.net/rlefebvre/6YaAR/embedded/" height="300" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

L'exemple précédent met également en avant la possibilité d'associer des méthodes (<em>abs</em>) à des fonctions (<em>sum</em>).
<h2>Getter et setter</h2>
Nous savons qu'une méthode n'est rien d'autre qu'une fonction associée à un objet. Toutefois, certaines méthodes bénéficient d'un appel particulier, grâce aux mots-clés <em>get</em> et <em>set</em>, disponibles uniquement en ECMAScript 5. Ces deux mots-clés permettent d'appeler des getter et setter comme s'il s'agissait d'un simple attribut.

<iframe src="http://jsfiddle.net/rlefebvre/FS2Ep/embedded/" height="260" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Constructeur</h2>
Le mot-clé <em>new</em> peut être passé soit devant la définition de la fonction, soit devant son appel, ce qui, dans tous les cas, a pour effet d'instancier un nouvel objet.

<iframe style="width: 100%; height: 200px;" src="http://jsfiddle.net/rlefebvre/CgECs/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

L'objet ainsi créé ne peut plus être utilisé comme fonction mais possède toujours un accès à la fonction initiale via sa propriété <em>constructor</em>.

<iframe style="width: 100%; height: 180px;" src="http://jsfiddle.net/rlefebvre/PnGfX/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/rlefebvre/4amfV/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Une même fonction peut donc être appelée sous deux formes, l'une comme simple fonction, l'autre comme constructeur, offrant alors un comportement distinct en deux points.

Premièrement, l'instanciation de la fonction a pour effet d'attacher l'objet au mot-clé <em>this</em> accessible à l'intérieur de la fonction, comme expliqué dans mon <a title="This is it! Le contexte en Javascript" href="http://www.thedarksideofthewebblog.com/this-is-it-le-contexte-en-javascript/" target="_blank">article sur le contexte</a>.

<iframe style="width: 100%; height: 130px;" src="http://jsfiddle.net/rlefebvre/9fpmy/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Par ailleurs, une fonction utilisée comme constructeur retourne <em>this</em> de manière implicite.

<iframe style="width: 100%; height: 130px;" src="http://jsfiddle.net/rlefebvre/Ln9nbL5q/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Retourner explicitement <em>this</em> est possible, mais ne change rien si on instancie la fonction. La différence est au niveau de l'appel de fonction qui retournera l'objet global plutôt que <em>undefined</em>. Du coup, je pense qu'il ne s'agit pas d'une bonne pratique.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/e7g7edLv/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

On peut également retourner explicitement un objet. Cette technique est parfois utilisée pour garantir le retour d'un objet également dans le cas de l'appel de fonction. L'instanciation n'est plus obligatoire. Toutefois, le problème est qu'on ne travaille plus avec une instance de la fonction, et l'accès à son prototype n'est plus possible.

<iframe style="width: 100%; height: 190px;" src="http://jsfiddle.net/rlefebvre/LLpLybvs/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Enfin, dans certains cas, si la valeur n'est pas un objet, <em>this</em> est retourné malgré tout...

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/AuK9U/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2>Conclusion</h2>

Javascript offre l'ensemble des outils nécessaires à l'appel de fonctions: appel dynamique, appel via tableau d'arguments, appel avec redéfinition du contexte, getter et setter,...

Mais là où il faut faire attention, c'est que la déclaration d'une classe passe aussi par la déclaration d'une fonction, si bien qu'une même fonction peut être utilisée dans deux contextes totalement différents, l'un objet et l'autre non, avec un comportement a priori non compatible.

Dans notre <a href="http://www.thedarksideofthewebblog.com/arguments-et-parametres-de-fonctions-en-javascript/" title="Appel et retour de fonctions en Javascript">prochain article</a> nous verrons comment les arguments peuvent être utilisés de manière tout aussi dynamique.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>816</wp:post_id>
		<wp:post_date>2013-06-11 12:49:42</wp:post_date>
		<wp:post_date_gmt>2013-06-11 11:49:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>appel-et-retour-de-fonctions-en-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binding"><![CDATA[binding]]></category>
		<category domain="post_tag" nicename="callback"><![CDATA[callback]]></category>
		<category domain="post_tag" nicename="constructor"><![CDATA[constructor]]></category>
		<category domain="category" nicename="les-fonctions-en-js"><![CDATA[Les fonctions en JS]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[return, callback, get, set, call, apply et bind, constructor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Aperçu des différentes façon d'appeler une fonction, et des valeurs retournées pour chacune d'entre elles.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[Les fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-07-17 17:45:05</wp:comment_date>
			<wp:comment_date_gmt>2013-07-17 16:45:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Appel et retour de fonctions en Javascript [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374079505.2588949;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374079519.0312719;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>567</wp:comment_id>
			<wp:comment_author><![CDATA[Stéphane]]></wp:comment_author>
			<wp:comment_author_email>zerterone@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://none</wp:comment_author_url>
			<wp:comment_date>2014-05-19 21:05:34</wp:comment_date>
			<wp:comment_date_gmt>2014-05-19 20:05:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Il est donc inutile, voire même déconseillé, de déclarer un retour explicite dans une telle fonction, qui, par défaut, retourne de toute façon toujours this."

Il peut être utile de retourner autre chose (que this) : un objet en l'occurence dont certaines propriétés sont "privatisées".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400529934.2764621;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400572261.373755;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>574</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-05-20 08:58:15</wp:comment_date>
			<wp:comment_date_gmt>2014-05-20 07:58:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[comme ceci?

function foo(){
    return {bar: 'bar'};
}
console.debug(foo()); //Object { bar="bar"}
console.debug(new foo()); //Object { bar="bar"}

Quel est alors l'intérêt du new?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>567</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400572695.8450561;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Arguments et paramètres de fonctions en Javascript</title>
		<link>http://www.thedarksideofthewebblog.com/arguments-et-parametres-de-fonctions-en-javascript/</link>
		<pubDate>Thu, 04 Jul 2013 11:08:12 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=818</guid>
		<description></description>
		<content:encoded><![CDATA[Nous poursuivons notre série consacrée aux <a title="Les fonctions en Javascript" href="http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/" target="_blank">fonctions en Javascript</a> par l'utilisation des paramètres de fonctions.

Les <a title="Wikipédia: Parameter (computer programming)" href="http://en.wikipedia.org/wiki/Parameter_%28computer_science%29#Parameters_and_arguments" target="_blank">paramètres</a> sont donc les variables définies dans la signature de la fonction, tandis que les arguments constituent les valeurs effectivement passées lors de l'appel de celle-ci pour en initialiser les paramètres.

En Javascript, il n'est pas obligatoire de passer tous les arguments à la fonction qui compte alors des paramètres optionnels, de même qu'il n'est pas nécessaire de déclarer tous ces paramètres. C'est ce qu'on appelle des <em>varargs</em>.
<h2>Arguments optionnels</h2>
Le paramètre qui n'est pas initialisé par un argument procède du même principe qu'une simple variable et sa valeur vaut <em>undefined</em>. On peut lui affecter une valeur par défaut grâce à l'opérateur <em>||</em> qui, en Javascript, retourne la valeur acceptée et non le résultat booléen.

On remarque dans l'exemple suivant que le paramètre <em>arg</em> n'est pas défini par un argument, et vaut <em>undefined</em> jusqu'à son initialisation avec une valeur par défaut.

<iframe style="width: 100%; height: 250px;" src="http://jsfiddle.net/rlefebvre/abbgF/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Paramètres dynamiques</h2>
Inversement, il est possible de passer des arguments lors de l'appel de fonction qui ne soient pas repris comme paramètres et qui sont alors connus de la seule variable <em>arguments</em>. Il s'agit d'une variable réservée qui contient, sous forme de tableau, l'ensemble des arguments passés lors de chaque appel de fonction.

<iframe style="width: 100%; height: 180px;" src="http://jsfiddle.net/rlefebvre/YbEHX/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

La variable <em>arguments</em> est quelque peu particulière. Premièrement, les paramètres de la fonction lui sont toujours passés par référence, même s'il s'agit de primitives (<em>string, number, boolean</em>).

<iframe src="http://jsfiddle.net/rlefebvre/wzc3V/1/embedded/" height="150" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

D'autre part, cette variable est déclarée au début de chaque définition de fonction, et ne possède donc pas, de fait, une portée accessible depuis des fonctions imbriquées.

<iframe src="http://jsfiddle.net/rlefebvre/Jjeve/1/embedded/" height="230" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Il existe également des différences de comportement selon le mode que l'on a déclaré. En mode strict, le mot-clé <em>arguments</em> est un mot réservé qu'il n'est pas possible de redéfinir.

<iframe src="http://jsfiddle.net/rlefebvre/8rHBF/embedded/" height="100" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Alors qu'en mode non-strict, une certaine liberté ne doit pas nous inciter pour autant à utiliser cette variable n'importe comment.

<iframe src="http://jsfiddle.net/rlefebvre/3h8Zk/embedded/" height="120" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Enfin, attention que l'utilisation d'<em>arguments</em> en tant que propriété de la fonction est obsolète en mode strict.

<iframe src="http://jsfiddle.net/rlefebvre/tY54r/embedded/" height="200" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2><em>callee</em> et <em>caller</em></h2>
Vous aurez remarqué dans l'exemple précédent qu'<em>arguments</em> est un objet ayant son propre type (<em>[object Arguments]</em>), bien qu'on l'utilise tel un <em>Array</em>. Ceci permet de bénéficier d'attributs supplémentaires, <em>arguments.callee</em> et <em>arguments.caller</em>. Cette utilisation est toutefois dépréciée en ECMAScript5, sous le mode strict, la volonté étant de passer un jour <em>arguments</em> en tant que simple tableau.

<iframe src="http://jsfiddle.net/rlefebvre/5WtJF/embedded/" height="150" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<em>arguments.callee</em> contient la référence de la fonction courante. Il s'agit, en quelque sorte, d'un <em>this</em> de la fonction lorsqu'elle n'est pas utilisée comme objet. Aussi, cet attribut permet de référencer une fonction anonyme, ou même une fonction nominative qui néanmoins, comme nous l'avons vu précédemment dans notre <a title="Déclaration et définition de fonctions en Javascript" href="http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript" target="_blank">article sur les déclarations</a>, n'est malheureusement pas référencée sous certains navigateurs comme <em>Internet Explorer</em>.

<iframe src="http://jsfiddle.net/rlefebvre/gTZ9P/embedded/" height="150" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<em>arguments.caller</em> contient la référence de la fonction qui appelle la fonction courante, mais ne semble plus implémenté du tout par les navigateurs. Il faut, de toute façon, lui préférer la méthode <em>Function.caller</em>.

<iframe src="http://jsfiddle.net/rlefebvre/QM4ma/embedded/" height="180" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cet attribut permet notamment de retrouver les attributs de classe, mais malheureusement pas d'instance, depuis une fonction imbriquée.

<iframe src="http://jsfiddle.net/rlefebvre/6efLU/embedded/" height="200" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2><em>Function.length</em></h2>
A noter que les fonctions possèdent également un attribut <em>length</em> qui nous informe du nombre de paramètres définis par leur signature. Cet attribut remplace <em>Function.arity</em>, obsolète depuis JavaScript 1.8.6.

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/rlefebvre/2UtEu/4/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Cette propriété permet, par exemple, de contrôler le nombre d'arguments passés à la fonction.

<iframe src="http://jsfiddle.net/rlefebvre/H5XGP/1/embedded/" height="250" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Conclusion</h2>
Les fonctions sont de type <em>varags</em> car elles peuvent être appelées avec des arguments tout autre que les paramètres déclarés dans leurs signatures.

La variable <em>arguments</em> permet de récupérer facilement la liste des arguments passés à une fonction, et peut tout aussi facilement être couplée avec la méthode <em>apply</em> pour passer ces mêmes arguments à une autre fonction. Il ne faut toutefois pas perdre de vue qu'il ne s'agit pas tout à fait d'un <em>Array</em> et que certaines méthodes de cette dernière classe ne sont donc pas disponibles.

Dans notre prochain et dernier article sur les fonctions, nous examinerons quelques patterns indispensables à une utilisation quotidienne des fonctions.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>818</wp:post_id>
		<wp:post_date>2013-07-04 12:08:12</wp:post_date>
		<wp:post_date_gmt>2013-07-04 11:08:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arguments-et-parametres-de-fonctions-en-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="arguments"><![CDATA[arguments]]></category>
		<category domain="post_tag" nicename="callee"><![CDATA[callee]]></category>
		<category domain="post_tag" nicename="caller"><![CDATA[caller]]></category>
		<category domain="category" nicename="les-fonctions-en-js"><![CDATA[Les fonctions en JS]]></category>
		<category domain="post_tag" nicename="parametres-dynamiques"><![CDATA[paramètres dynamiques]]></category>
		<category domain="post_tag" nicename="varargs"><![CDATA[varargs]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[varargs, callee, caller, arguments, arguments optionnels, paramètres dynamiques]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Utilisation des arguments d'une fonction de manière dynamique.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>98</wp:comment_id>
			<wp:comment_author><![CDATA[Les fonctions en Javascript | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2013-08-07 20:03:57</wp:comment_date>
			<wp:comment_date_gmt>2013-08-07 19:03:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Arguments et paramètres de fonctions en Javascript [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375902237.2405779;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409754293.6091061;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>193</wp:comment_id>
			<wp:comment_author><![CDATA[Appel et retour de fonctions en Javascript]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/appel-et-retour-de-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2014-01-28 22:54:59</wp:comment_date>
			<wp:comment_date_gmt>2014-01-28 21:54:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent Suivant &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392726536.5268919;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Patterns de fonctions en Javascript</title>
		<link>http://www.thedarksideofthewebblog.com/patterns-de-fonctions-en-javascript/</link>
		<pubDate>Thu, 01 Aug 2013 20:18:41 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=826</guid>
		<description></description>
		<content:encoded><![CDATA[Dans ce dernier article de notre série consacrée aux <a title="Les fonctions en Javascript" href="http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/" target="_blank">fonctions en Javascript</a>, examinons quelques patterns indispensables à une utilisation de base des fonctions.
<h2>Fonction de rappel</h2>
Une <a href="http://fr.wikipedia.org/wiki/Fonction_de_rappel" title="Wikipédia: Fonction de rappel" target="_blank">fonction de rappel</a> (<em>callback</em>) consiste simplement en une évaluation en puissance d'une fonction. Généralement, il s'agit du passage d'une fonction à une autre pour une évaluation future de celle-ci. Nous utilisons par exemple une <em>callback</em> de manière systématique lorsque nous associons une fonction à un évènement.

<iframe src="http://jsfiddle.net/rlefebvre/5AyA6/1/embedded/" height="350" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Pour le fun, voyons comment ce code aurait pu être écrit en PHP 5.4, où l'absence d'IIFE nous oblige à recourir à une variable statique. La syntaxe de PHP nous permet toutefois de typer la fonction de rappel, et garantit ainsi une plus grande sûreté de programmation.

[cc lang='php']
function click(callable $callback=null){
    static $callbacks = array();
    if($callback){
        $callbacks[] = $callback;
    }else{
        foreach($callbacks as $callback){
            $callback();
        }
    }
}

//définition d'une fonction de callback
function foo(){ echo 2; }

//passage de callback
click(function(){ echo 1; }); //mise en file d'une première fonction
click('foo'); //mise en file d'une seconde fonction
click(); //affiche 1 puis 2
[/cc]

<h2>Fonction d'ordre supérieur</h2>
Les <a href="http://fr.wikipedia.org/wiki/Fonction_d%27ordre_sup%C3%A9rieur" title="Wikipédia: Fonction d'ordre supérieur" target="_blank">fonctions d'ordre supérieur</a> (<em>High-order function</em>) permettent de recevoir une fonction en argument et de retourner une fonction comme résultat. Elles permettent notamment de générer de manière dynamique une fonction avec un comportement et un contexte qui lui sont propres: on parle aussi de <a href="http://fr.wikipedia.org/wiki/Curryfication" title="Wikipédia: Curryfication" target="_blank">curryfication (<em>currying</em>)</a>.

<iframe src="http://jsfiddle.net/rlefebvre/TQFUH/embedded/" height="220" width="100%" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Toujours pour le fun, nous voyons qu'en PHP, la syntaxe nécessite d'utiliser <em>use()</em> pour passer les arguments à la fonction retournée qui n'est normalement pas perméable aux variables externes. La syntaxe de PHP nécessite donc d'être plus explicite. On peut regretter toutefois qu'il faille passer par une fonction variable <em>$odd</em>, et perdre ainsi en concision.

[cc lang='php']
function not(callable $callback){
    return function() use($callback){
        return !call_user_func_array($callback, func_get_args());
    };
}

function even($value){
    return $value%2===0;
}

$odd = not('even');
var_dump($odd(1)); //affiche boolean true
[/cc]

<h2>Fermeture</h2>
Une <a title="Wikipédia: Fermeture (informatique)" href="http://fr.wikipedia.org/wiki/Fermeture_%28informatique%29" target="_blank">fermeture</a>, plus connue sous le nom originel et moins artificiel de <em>closure</em>, est une fonction qui conserve une référence de variables statiques propres. La valeur des variables contenues dans la fonction est déterminée indépendamment lors de chaque invocation.

Pour se faire, il est nécessaire de passer par une fonction contenante qui encapsule la portée des variables utilisées par la <em>closure</em>. La valeur de ces variables n'est connue que par la <em>closure</em> retournée, chacune d'entre elles ayant des références de variables indépendantes. Ces variables sont statiques dans la mesure où elles conservent leurs valeurs entre chaque appel de la <em>closure</em>.

<iframe style="width: 100%; height: 300px;" src="http://jsfiddle.net/rlefebvre/266Q9/1/embedded/" height="240" width="320" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Et juste pour le fun, voici l'équivalent en PHP, où la <em>closure</em> est obligatoirement anonyme et le passage de la variable d'incrémentation se fait obligatoirement par référence, puisque, contrairement à Javascript, il ne s'agit pas de la même variable. A nouveau, la syntaxe de PHP nécessite donc d'être plus rigoureux.

[cc lang='php']
function getClosure(){
    $i = 0;
    return function() use(&$i){
        return ++$i;
    };
}

$incrementA = getClosure();
$incrementB = getClosure();

var_dump($incrementA()); //affiche int 1
var_dump($incrementA()); //affiche int 2
var_dump($incrementB()); //affiche int 1
[/cc]

<h2>Conclusion</h2>

Bien qu'assez simple à première vue, ce petit tour des fonctions en Javascript nous a néanmoins permis de bien cerner leur utilisation et leurs subtilités.

On comprend ainsi facilement des patterns de base comme les <em>closure</em>, les <em>callback</em>, ou les <em>high-level function</em>.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>826</wp:post_id>
		<wp:post_date>2013-08-01 21:18:41</wp:post_date>
		<wp:post_date_gmt>2013-08-01 20:18:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>patterns-de-fonctions-en-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="callback"><![CDATA[callback]]></category>
		<category domain="post_tag" nicename="closure"><![CDATA[closure]]></category>
		<category domain="category" nicename="les-fonctions-en-js"><![CDATA[Les fonctions en JS]]></category>
		<category domain="category" nicename="les-patterns-de-js"><![CDATA[Les patterns de JS]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[closure, callback, high-level function]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Callback, closure, high-level function: quelques patterns de fonctions que l'on utilise tous les jours.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[Les closure en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-closure-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-11-12 22:50:11</wp:comment_date>
			<wp:comment_date_gmt>2013-11-12 21:50:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] contexte externe, grâce au mot-clé use. Le comportement des closure de PHP rejoint alors celui de Javascript, au niveau de la notion d&rsquo;espace de variables propre (bound variable). On parle alors de [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1384293011.2318289;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385381413.053838;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>218</wp:comment_id>
			<wp:comment_author><![CDATA[Les fonctions en Javascript]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-fonctions-en-javascript/</wp:comment_author_url>
			<wp:comment_date>2014-02-27 22:17:10</wp:comment_date>
			<wp:comment_date_gmt>2014-02-27 21:17:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Patterns de fonctions en Javascript [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393790183.170166;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Les petites choses marrantes en PHP: json_decode</title>
		<link>http://www.thedarksideofthewebblog.com/les-petits-choses-marrantes-en-php-json_decode/</link>
		<pubDate>Mon, 06 Jan 2014 11:30:14 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1028</guid>
		<description></description>
		<content:encoded><![CDATA[Aujourd'hui est venu le temps d'initier notre série <a href="http://www.thedarksideofthewebblog.com/menu/php/les-petites-choses-marrantes-en-php/" title="Les petites choses marrantes en PHP">Les petites choses marrantes en PHP</a>, consacrées aux petites choses marrantes en PHP, avec quelques exemples de petites choses marrantes en matière d'accès impossibles aux attributs d'objets et clés de tableaux lorsqu'on utilise la fonction <em><a href="http://www.php.net/manual/fr/function.json-decode.php" title="PHP: json_encode" target="_blank">json_decode</a></em>.

Mais attention, que les choses soient bien claires: il ne s'agit pas de troll! Juste de faire gaffe...

<h2>Accès aux attributs impossibles</h2>

Nous savons tous qu'en PHP, tout logiquement, le nom des attributs d'une classe doit correspondre à une <a href="http://www.php.net/manual/fr/language.variables.basics.php" title="PHP: Les variables" target="_blank">liste de caractères permis</a>, excluant notamment tout attribut constitué d'une chaîne de caractère vide, ou même d'un nombre.

<h3>Valeurs numériques</h3>
Il n'empêche qu'il est possible de définir dynamiquement des attributs numériques et d'y avoir accès, via la notation entre accolades.
[cc lang='php' ]
$stdObject->{185} = 'lol'; //on note au passage que PHP n'exige pas d'initialiser d'objet de type StdClass, mais que cela n'est pas très propre.
var_dump($stdObject); //object(stdClass)#1 (1) { ["185"] => string(3) "lol" }
var_dump($stdObject->{185}); //string(3) "lol"
[/cc]

De même, la conversion d'un Json peut entraîner des résultats similaires.
[cc lang='php' ]
$json = json_decode('{"185":"lol"}'); 
var_dump($json); //object(stdClass)#1 (1) { ["185"] => string(3) "lol" }
var_dump($json->{185}); //string(3) "lol"
[/cc]

Jusque là, tout semble logique, si on accepte qu'on puisse créer et accéder à des attributs dont le nom n'est pas qualifié de manière standard et que seul l'accès entre accolades est utilisable.

<h3>Valeurs vides</h3>
Par contre, la gestion des attributs vides est plus capricieuse: impossible de déclarer ou de lire un attribut vide via la notation entre accolades.
[cc lang='php' ]
$stdObject->{''} = 'lol'; //Fatal error: Cannot access empty property
[/cc]

Pourtant, via un Json, il est possible de créer un attribut vide, et d'y avoir accès via l'attribut <em>_empty_</em> qui apparaît un peu par enchantement.

[cc lang='php' ]
$json = json_decode('{"":"lol"}');
var_dump($json); //object(stdClass)#1 (1) { ["_empty_"] => string(3) "lol" }
var_dump($json->_empty_); //string(3) "lol"
[/cc]
Mais bien sûr, si <em>_empty_</em> permet de lire un attribut vide, il ne permet pas pour autant de le définir.
[cc lang='php' ]
$stdObject->{'_empty_'} = 'lol';
var_dump($stdObject);  //object(stdClass)#1 (1) { ["_empty_"] => string(3) "lol" }
[/cc]

Donc, ces deux attributs, <em>"_empty_"</em> et <em>""</em>, s'écrasent lors de la conversion d'un Json.

[cc lang='php' ]
var_dump(json_decode('{"":"lol", "_empty_":"kikou"}')); //object(stdClass)#1 (1) { ["_empty_"] => string(5) "kikou" }
[/cc]

Mais, si on avait choisi le mode de conversion vers un tableau, rien de tout cela ne serait arrivé.
[cc lang='php' ]
var_dump(json_decode('{"":"lol", "_empty_":"kikou"}', true)); //array(2) { [""] => string(3) "lol", ["_empty_"] => string(5) "kikou" }
[/cc]

Marrant, non?

<h2>Accès aux clés impossibles</h2>

<h3>Valeurs numériques</h3>
Nous savons tous que PHP convertit une clé numérique d'un tableau en un entier.
[cc lang='php' ]
$array = array("185" => "lol");
var_dump($array); //array(1) { [185] => string(3) "lol" } // => la clé est de type int
[/cc]

Ainsi, on peut accéder à cette valeur via une clé de type <em>int</em> ou <em>string</em>, indifféremment.
[cc lang='php' ]
var_dump($array[185]); //string(3) "lol"
var_dump($array['185']); //string(3) "lol"
[/cc]

Pourtant, si on convertit un objet disposant d'un attribut numérique, celui-ci n'est pas casté en entier comme clé de tableau.
[cc lang='php' ]
$array = (array) json_decode('{"185":"lol"}');
var_dump($array); //array(1) { ["185"] => string(3) "lol" } // => la clé est de type string
[/cc]
Dès lors, on ne peut accéder à cette valeur via une clé de type <em>int</em> ou <em>string</em>. En effet, de ce côté, PHP continue à convertir la clé numérique, recherchant ainsi une clé qui n'existe pas.
[cc lang='php' ]
var_dump($array[185]); //NULL
var_dump($array['185']); //NULL
[/cc]

Pourtant, si on boucle sur le tableau, nous constatons que la clé est bien présente dans le tableau.
[cc lang='php' ]
foreach($array as $key=>$value){
	var_dump($key); //string(3) "185"
}
[/cc]
La boucle est le seul moyen d'accéder à cette valeur cachée.

Mais, si on avait choisi le mode de conversion vers un tableau, rien de tout cela ne serait arrivé.
[cc lang='php' ]
var_dump(json_decode('{"185":"lol"}', true)); //array(1) { [185] => string(3) "lol" } // => la clé est de type int
[/cc]

Marrant, non?

<h2>Conclusion</h2>

Mieux vaut utiliser <em>json_decode</em> en mode de conversion vers un tableau, en passant <em>true</em> comme deuxième argument.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1028</wp:post_id>
		<wp:post_date>2014-01-06 12:30:14</wp:post_date>
		<wp:post_date_gmt>2014-01-06 11:30:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-petits-choses-marrantes-en-php-json_decode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="json_decode"><![CDATA[json_decode]]></category>
		<category domain="category" nicename="les-petites-choses-marrantes-en-php"><![CDATA[Les petites choses marrantes en PHP]]></category>
		<category domain="post_tag" nicename="stdclass"><![CDATA[stdClass]]></category>
		<category domain="post_tag" nicename="_empty_"><![CDATA[_empty_]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[json_decode, stdClass, _empty_]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Pourquoi un simple json_decode peut être dangereux...]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_stephclay@free.fr</wp:meta_key>
			<wp:meta_value><![CDATA[2018-02-20 10:59:18|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>179</wp:comment_id>
			<wp:comment_author><![CDATA[SamRay1024]]></wp:comment_author>
			<wp:comment_author_email>samray1024@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jebulle.net</wp:comment_author_url>
			<wp:comment_date>2014-01-07 09:16:38</wp:comment_date>
			<wp:comment_date_gmt>2014-01-07 08:16:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Très instructif ! Merci !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389082598.1544149;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389082627.5398891;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23472</wp:comment_id>
			<wp:comment_author><![CDATA[Steph]]></wp:comment_author>
			<wp:comment_author_email>stephclay@free.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2018-02-20 10:59:18</wp:comment_date>
			<wp:comment_date_gmt>2018-02-20 09:59:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Remarque très intéressante. Cependant le problème ne vient pas de json_decode() mais du cast $array = (array) $obj; 
En effet, point de vue objet, pas de réel souci :

<pre>
$obj =  json_decode('{"185":"lol"}');
echo $obj-&gt;{"185"}; // "lol" : pas de souci
echo $obj-&gt;{185}; // "lol" : OK aussi
</pre>
Mais le vrai pb est bien-sûr d'utiliser des entiers comme noms d'attribut d'un objet.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1519120758.779773;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1519244215.4414079;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23497</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2018-02-21 21:20:40</wp:comment_date>
			<wp:comment_date_gmt>2018-02-21 20:20:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[merci pour cette correction. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>23472</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1519244440.5561409;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Appel dynamique de fonctions en PHP</title>
		<link>http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php/</link>
		<pubDate>Fri, 27 Sep 2013 18:06:24 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1133</guid>
		<description></description>
		<content:encoded><![CDATA[Dans ce premier article de notre série consacrée à <a title="Closure, callback et fonctions dynamiques en PHP" href="http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php" target="_blank">la gestion dynamique de fonctions</a>, abordons les bases de l'appel dynamique.

<h2>Invocation dynamique</h2>
Un appel dynamique consiste en une évaluation d'une fonction ou d'une méthode depuis une expression retournant son identifiant. Il s'agit, en quelque sorte, de syntaxe alternative et bien plus propre d'<em>eval</em>.
<h3>Appel variable</h3>
Une fonction ou une méthode peut être simplement appelée depuis une variable contenant le nom de son identifiant. C'est ce qu'on appelle en PHP une fonction ou une méthode <a title="Fonctions variables" href="http://php.net/manual/fr/functions.variable-functions.php" target="_blank">variable</a>.
<h4>Fonction</h4>
[cc lang='php' ]
function foo(){
	echo __FUNCTION__;
}

$foo = 'foo';
$foo(); //affiche foo
[/cc]
<h4>Méthode d'instance</h4>
[cc lang='php' ]
class Bar {
	function foo(){
		echo __METHOD__;
	}
}

$bar = new Bar();
$foo = 'foo';
$bar->$foo(); //affiche Bar::foo
[/cc]
<h4>Méthode de classe</h4>
[cc lang='php' ]
class Bar {
	static function foo(){
		echo __METHOD__;
	}
}

$foo = 'foo';
Bar::$foo(); //affiche Bar::foo
[/cc]
<h3>Accolades</h3>
Il est possible de se passer de variable temporaire pour appeler une méthode, en utilisant des accolades contenant directement l'expression à évaluer pour retrouver cet identifiant. Malheureusement, cette syntaxe n'est toutefois pas autorisée pour les fonctions.
<h4>Fonction</h4>
[cc lang='php' ]
function foo(){
	echo __FUNCTION__;
}

${'foo'}();
//Notice: Undefined variable: foo
//Fatal error: Function name must be a string
[/cc]
<h4>Méthode d'instance</h4>
[cc lang='php' ]
class Bar {
	function foo(){
		echo __METHOD__;
	}
}

$bar = new Bar();
$bar->{'foo'}(); //affiche Bar::foo
[/cc]
<h4>Méthode de classe</h4>
[cc lang='php' ]
class Bar {
	static function foo(){
		echo __METHOD__;
	}
}

//Depuis PHP 5.4
Bar::{'foo'}(); //affiche Bar::foo
[/cc]
<h3><em>Callback</em></h3>

Les fonctions <em>call_user_func</em> et <em>call_user_func_array</em> permettent également d'évaluer des fonctions et des méthodes qui prennent la forme d'une <em>callback</em>.

Le grand avantage de <em>call_user_func_array</em> réside dans sa capacité à appeler une <em>callback</em> en lui passant des arguments reçus sous forme de tableau, ce qui permet de ne pas connaître la liste d'arguments au préalable et de rendre l'appel bien plus dynamique.

Nous ne verrons pas pour l'instant le traitement des <em>callback</em> plus en profondeur, car elles font l'objet d'un prochain <a href="http://www.thedarksideofthewebblog.com/les-callback-en-php/" title="Les callback en PHP" target="_blank">article spécifique</a>.

<h3>Reflection</h3>
La dernière possibilité d'invocation dynamique nécessite de faire appel à la bibliothèque de <a href="http://www.php.net/manual/en/book.reflection.php" title="PHP: Reflection" target="_blank"><em>Reflection</em></a> de PHP, qui présente les méthodes <em>invoke</em> et <em>invokeArgs</em>, tant pour les <a href="http://www.php.net/manual/en/class.reflectionfunction.php" title="PHP: The ReflectionFunction class" target="_blank">fonctions</a> que pour les <a href="http://www.php.net/manual/en/class.reflectionmethod.php" title="PHP: The ReflectionMethod class" target="_blank">méthodes</a>.

<em>invoke</em>, à l'instar de <em>call_user_func</em>, permet d'appeler la fonction avec des arguments passés les uns à la suite des autres, reprenant ainsi la signature de la fonction. A l'inverse, <em>invokeArgs</em>, à l'instar de <em>call_user_func_array</em>, reçoit les arguments à faire passer sous forme de tableau.

<h4>Fonction</h4>
[cc lang='php' ]
function foo($arg1, $arg2){
	echo __FUNCTION__;
}

$reflect = new ReflectionFunction('foo');
//comportement d'invoke
$reflect->invoke('arg1', 'arg2'); //affiche Bar::foo
//comportement d'invokeArgs
$reflect->invokeArgs(array('arg1', 'arg2'));//affiche Bar::foo
[/cc]
<h4>Méthode d'instance</h4>
[cc lang='php' ]
class Bar {
	function foo(){
		echo __METHOD__;
	}
}

$reflect = new ReflectionMethod('Bar', 'foo');
$reflect->invoke(new Bar()); //affiche Bar::foo
[/cc]
<h4>Méthode de classe</h4>
[cc lang='php' ]
class Bar {
    static function foo(){
        echo __METHOD__;
    }
}

$reflect = new ReflectionMethod('Bar', 'foo');
$reflect->invoke(null); //affiche Bar::foo
[/cc]

<h2>Surcharge magique de méthodes</h2>

<a href="http://php.net/manual/fr/language.oop5.overloading.php" title="Surcharge magique" target="_blank"><em>__call()</em></a> et son équivalent statique <em>__call_static()</em> permettent d'appeler des méthodes non-définies. Autrement dit, ces méthodes magiques peuvent dynamiser la gestion de certains appels. Pour ce faire, <em><em>__call()</em></em> reçoit le nom de la méthode appelée, ainsi que la liste des arguments passés lors de l'appel.

PHP parle de "surcharge", mais, vous l'aurez compris, il ne s'agit en rien d'une <a href="http://fr.wikipedia.org/wiki/Surcharge_(programmation_informatique)" title="Wikipédia: Surcharge (programmation informatique)" target="_blank">surdéfinition</a> au sens classique du terme.

[cc lang='php' ]
class Bar{

	function __call($name, array $arguments){
		echo __METHOD__; //Bar::__call
		var_dump($name); //string 'lol' (length=3)
		var_dump($arguments); //array (size=1){  0 => string 'kikou' (length=5) }
	}

}

$bar = new Bar();
$bar->lol('kikou'); 
[/cc]

A noter que ces méthodes magiques l'emportent logiquement sur la visibilité des méthodes appelées dans le contexte courant. Ainsi, on passe par <em>__call()</em> lors de l'appel d'une méthode privée ou protégée depuis l'extérieur de la classe.
[cc lang='php' ]
class Bar{

	function __call($name, array $arguments){
		echo __METHOD__;	
	}
	
	private function foo(){
		echo __METHOD__;
	}

}

$bar = new Bar();
$bar->foo(); //Bar::__call => Bar::foo n'est pas appelé
[/cc]

La faiblesse de cette pratique demeurent toutefois sa performance, puisqu'un simple petit test nous montre qu'elle nécessite environ deux fois plus de temps.

<h4>Classe de test</h4>
[cc lang='php' ]
class Test{

	function __call($name, array $arguments){}

	function call(){}

}
[/cc]

<h4>Appel normal</h4>
[cc lang='php' ]
$test = new Test();

$startTime = microtime(true);
for($i=0; $i<1000000; ++$i){
	$test->call();
}
echo microtime(true) - $startTime; //9.1762118339539
[/cc]

<h4>Appel via __call</h4>
[cc lang='php' ]
$test = new Test();

$startTime = microtime(true);
for($i=0; $i<1000000; ++$i){
	$test->none();
}
echo microtime(true) - $startTime; //19.140054941177
[/cc]

<h2>Paramètres dynamiques (Variadic functions)</h2>
PHP permet trois types de paramètres:
<ol>
	<li>Les paramètres obligatoires.</li>
	<li>Les paramètres optionnels avec une valeur par défaut.</li>
	<li>Les paramètres optionnels sans valeur par défaut. Ces arguments sont passés lors de l'appel sans qu'ils ne soient définis par des paramètres associés.</li>
</ol>

[cc lang='php' ]
function foo($arg1, $arg2=''){}

foo('a'); //'a' est obligatoire. Ne pas le passer engendrerait une erreur.
foo('a', 'b'); //'b' est optionnel. S'il n'est pas passé, $arg2 vaut ''.
foo('a', 'b', 'c'); //'c' est optionnel, mais n'est associé à aucun paramètre.
[/cc]

Il existe trois méthodes pour récupérer dynamiquement ces arguments. Et il s'agit d'ailleurs des seules façons pour parvenir à connaître la valeur des paramètres non-déclarés.

<h4>func_get_args</h4>

La première méthode utilise <a href="http://docs.php.net/manual/fr/function.func-get-args.php" title="PHP: func_get_args" target="_blank"><em>func_get_args()</em></a> pour récupérer un tableau des arguments passés à la fonction lors de son appel.

[cc lang='php' ]
function foo($arg1, $arg2=''){
	foreach(func_get_args() as $arg){
		echo $arg; //affiche abc
	}
}

foo('a', 'b', 'c');
[/cc]

Attention toutefois au piège: <em>func_get_args()</em> récupère les arguments passés, pas les paramètres déclarés. Cela fait une différence si vous ne passez pas de valeur à un paramètre optionnel. Celui-ci ne sera pas repris par la fonction.

[cc lang='php' ]
function foo($a, $b=2){
    var_dump(func_get_args()); //array( 1 ) => ne récupère pas la valeur de $b
}

foo(1);
[/cc]

<h4>func_get_arg</h4>

La seconde méthode utilise <a href="http://docs.php.net/manual/fr/function.func-num-args.php" title="PHP: func_num_args" target="_blank"><em>func_num_args()</em></a> pour compter le nombre d'arguments passés à la fonction, et <a href="http://docs.php.net/manual/fr/function.func-get-arg.php" title="PHP: func_get_arg" target="_blank"><em>func_get_arg()</em></a> pour récupérer la valeur de chaque argument selon son indice.

[cc lang='php' ]
function foo($arg1, $arg2=''){
	for($i=0; $i<func_num_args(); ++$i){
		echo func_get_arg($i); //affiche abc
	}
}

foo('a', 'b', 'c');
[/cc]

Même piège: <em>func_num_args()</em> ne compte que les arguments effectivement passés.

[cc lang='php' ]
function foo($a, $b=2){
    var_dump(func_num_args()); //int 1 => ne compte pas $b
}

foo(1);
[/cc]

<em>func_get_arg()</em> ira même jusqu'à lancer un <em>warning</em> si vous essayez de récupérer un argument qui n'est pas passé à la fonction.
[cc lang='php' ]
function foo($a, $b=2){
    var_dump(func_get_arg(2)); //Warning: func_get_arg(): Argument 2 not passed to function
}

foo(1);
[/cc]

<h4>Opérateur ...</h4>

[EDIT] Depuis PHP 5.6, une nouvelle syntaxe est permise, utilisant l'opérateur ... <a href="http://www.php.net/manual/fr/migration56.new-features.php#migration56.new-features.variadics" title="PHP: Nouveautés 5.6." target="_blank">Voir la doc officielle</a>.

<h2>Conclusion</h2>
Rien de bien compliqué jusqu'à présent: une simple chaîne de caractères peut servir d'identifiant de fonction ou de méthode.

Dans notre <a href="http://www.thedarksideofthewebblog.com/les-closure-en-php/" title="Les closure en PHP">prochain article</a>, nous verrons plus en profondeur les <em>closure</em>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1133</wp:post_id>
		<wp:post_date>2013-09-27 19:06:24</wp:post_date>
		<wp:post_date_gmt>2013-09-27 18:06:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>appel-dynamique-de-fonctions-en-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="callback"><![CDATA[callback]]></category>
		<category domain="post_tag" nicename="call_user_func"><![CDATA[call_user_func]]></category>
		<category domain="post_tag" nicename="fonction-variable"><![CDATA[fonction variable]]></category>
		<category domain="post_tag" nicename="func_get_arg"><![CDATA[func_get_arg]]></category>
		<category domain="post_tag" nicename="func_get_args"><![CDATA[func_get_args]]></category>
		<category domain="post_tag" nicename="func_num_args"><![CDATA[func_num_args]]></category>
		<category domain="post_tag" nicename="invocation-dynamique"><![CDATA[invocation dynamique]]></category>
		<category domain="category" nicename="les-callback-en-php"><![CDATA[Les callback en PHP]]></category>
		<category domain="post_tag" nicename="methode-variable"><![CDATA[méthode variable]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[Reflection]]></category>
		<category domain="post_tag" nicename="__call"><![CDATA[__call]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[__call, Reflection, call_user_func, fonction variable, méthode variable, invocation dynamique, func_num_args, func_get_arg, func_get_args]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment appeler une fonction dynamiquement depuis son identifiant, gérer les arguments sans connaître la signature de la fonction, ou surcharger des méthodes.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[Les closure en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-closure-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-12-02 13:59:14</wp:comment_date>
			<wp:comment_date_gmt>2013-12-02 12:59:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent Suivant &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385989154.6166101;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385999252.8406229;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>164</wp:comment_id>
			<wp:comment_author><![CDATA[Les callback en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-callback-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-12-02 14:05:51</wp:comment_date>
			<wp:comment_date_gmt>2013-12-02 13:05:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Identifiant de fonction sous forme de chaîne de caractères (voir fonction dynamique) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385989551.754148;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385999250.8418479;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>198</wp:comment_id>
			<wp:comment_author><![CDATA[Closure, callback et fonctions dynamiques en PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php/</wp:comment_author_url>
			<wp:comment_date>2014-02-02 22:34:24</wp:comment_date>
			<wp:comment_date_gmt>2014-02-02 21:34:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent Suivant &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391453575.7364581;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Les closure en PHP</title>
		<link>http://www.thedarksideofthewebblog.com/les-closure-en-php/</link>
		<pubDate>Mon, 07 Oct 2013 18:46:09 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1137</guid>
		<description></description>
		<content:encoded><![CDATA[Nous poursuivons notre série consacrée à <a title="Closure, callback et fonctions dynamiques en PHP" href="http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php" target="_blank">la gestion dynamique de fonctions</a> avec l'utilisation des <a href="http://www.php.net/manual/fr/functions.anonymous.php" title="PHP: Fonctions anonymes" target="_blank"><em>closure</em></a>.

Sans doute sous l'influence de Javascript, <a href="http://net.tutsplus.com/tutorials/php/functional-programming-in-php/" title="Functional Programming in PHP" target="_blank">on parle de plus en plus</a> de <a href="http://fr.wikipedia.org/wiki/Programmation_fonctionnelle" title="Wikipédia: Programmation fonctionnelle" target="_blank">programmation fonctionnelle</a>, ou en tout cas d'une réappropriation en PHP des fonctions high-order, des closure et du binding. Un module comme <a href="http://pimple.sensiolabs.org/" title="Pimple" target="_blank">Pimple</a> en exploite par exemple toute la puissance et la simplicité. 

PHP 5.3 a introduit la classe <a href="http://be2.php.net/manual/fr/class.closure.php" title="PHP: Closure" target="_blank">Closure</a> permettant fonctions high-order, closure ou encore currying. PHP 5.4 l'a complétée avec du binding. On peut désormais faire des choses intéressantes et ajouter une touche de fonctionnel à l'orienté objet. :-)

<h2>Définition</h2>
<h3>Définition de base</h3>
Une <em>closure</em> ressemble à une fonction, mais est bien plus puissante. Elle peut être assignée à une variable, passée comme argument ou encore retournée par une autre fonction. On parle alors de <a href="http://fr.wikipedia.org/wiki/Fonction_d%27ordre_sup%C3%A9rieur" title="Wikipédia: Fonction d'ordre supérieur" target="_blank"><em>high-order function</em></a>. 

On comprend qu'il ne s'agit pas d'un <em>statement</em> comme une fonction traditionnelle, mais bien d'une valeur contenant une fonction en devenir. On retrouve <a href="http://www.thedarksideofthewebblog.com/declaration-et-definition-de-fonctions-en-javascript/" title="Déclaration et définition de fonctions en Javascript" target="_blank">cette distinction en Javascript</a> entre les fonctions déclaratives et les expressions de fonction.

Aucun identifiant ne doit être défini. Une fois passée à une variable, la <em>closure</em> est appelée telle une <a href="http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php" title="Appel dynamique de fonctions en PHP" target="_blank">fonction variable</a>.
[cc lang='php' ]
$foo = function(){
	echo __FUNCTION__; //affiche {closure}
};
$foo();
[/cc]
<h3>Assignation de variables contextuelles (<em>use</em>)</h3>
Il est possible de passer des variables à une <em>closure</em> qui proviennent d'un contexte externe, grâce au mot-clé <em>use</em>. Le comportement des <em>closure</em> de PHP rejoint alors celui de <a href="http://www.thedarksideofthewebblog.com/patterns-de-fonctions-en-javascript/" title="Patterns de fonctions en Javascript" target="_blank">Javascript</a>, au niveau de la notion d'espace de variables propre (<a href="http://en.wikipedia.org/wiki/Bound_variable" title="Wikipédia: Free variables and bound variables" target="_blank"><em>bound variable</em></a>). On parle alors de <a href="http://fr.wikipedia.org/wiki/Fermeture_(informatique)" title="Wikipédia: Fermeture (informatique)" target="_blank">closure</a> au sens premier du terme.

[cc lang='php' ]
function foo($bar){
	return function($arg) use($bar){
		return $bar . $arg;
	};
}

$test = foo('test'); //foo retourne la closure avec la valeur 'test' encapsulée de manière statique.

//la closure garde ainsi en mémoire la valeur:
var_dump($test(1)); //string(5) "test1"
var_dump($test(2)); //string(5) "test2"

$bar = foo('bar'); //foo retourne une nouvelle closure avec la valeur 'bar' encapsulée de manière statique.
var_dump($bar(1)); //string(5) "bar1"

//mais $test conserve toujours la référence à 'test'
var_dump($test(3)); //string(5) "test3"

[/cc]

Il est important de bien comprendre que <em>use</em> fige la variable dans le contexte d'exécution de la fonction, et que sa valeur n'évolue plus en dehors de celle-ci, à l'inverse d'une variable globale qui reste libre de toute modification.

Cela permet notamment de faire du <a href="http://fr.wikipedia.org/wiki/Curryfication" title="Wikipédia: curification" target="_blank">currying</a>.

<h3>Assignation comme attribut d'objet</h3>

L'utilisation d'une <em>closure</em> comme valeur d'un attribut d'objet est, par contre, un peu délicate. En effet, il n'est pas permis de déclarer un attribut avec une <em>closure</em> comme valeur.
[cc lang='php' ]
class Foo{
	public $bar = function(){}; //Parse error: syntax error, unexpected 'function' (T_FUNCTION)
}
[/cc]

On peut seulement lui passer après avoir instancié l'objet.
[cc lang='php' ]
class Foo{
	public $bar;
}

$foo = new Foo();
$foo->bar = function(){};
[/cc]

Dommage... 

<h3><em>create_function</em></h3>
La documentation de PHP nous indique que <a title="PHP: create_function" href="http://be2.php.net/manual/fr/function.create-function.php" target="_blank"><em>create_function</em></a> permet de créer une "fonction anonyme" à la volée depuis une chaîne de caractère. Il s'agit d'une sorte d'<em>eval()</em> d'une fonction. 

Toutefois, il ne s'agit pas d'une <em>closure</em> mais d'une fonction normale dont le nom est généré de manière dynamique. En effet, le résultat retourné est un identifiant unique qui peut être appelé telle une fonction variable.
[cc lang='php' ]
$foo = create_function('$x, $y', 'return $x*$y;');
var_dump($foo); //string(9) "lambda_1"
var_dump($foo(2, 3)); //int(6)
[/cc]

<h2>Typage</h2>
En réalité, une <em>closure</em> n'est pas totalement une fonction.
[cc lang='php' ]
$foo = function(){};
var_dump(gettype($foo)); //string(6) "object"
[/cc]

Elle n'est pas repris comme telle.

[cc lang='php' ]
$definedFunctionNames = get_defined_functions();
var_dump($definedFunctionNames['user']); //array(0) {}
[/cc]

Et n'existe même pas...

[cc lang='php' ]
var_dump(function_exists('foo')); //bool(false)
[/cc]

En fait, une <em>closure</em> est une instance de la classe <a title="PHP: Closure" href="http://www.php.net/manual/fr/class.closure.php" target="_blank"><em>Closure</em></a> qui implémente la méthode magique <em>__invoke</em>. 

[cc lang='php' ]
get_class($foo); //Closure
[/cc]

C'est pourquoi d'ailleurs, dès lors qu'il s'agit d'un objet, une <em>closure</em> peut être typée lorsqu'elle est définie comme paramètre d'une fonction.

[cc lang='php' ]
function bar(Closure $closure){
	echo $closure(); //affiche {closure}
}
bar($foo);
[/cc]

Toutefois, la classe <em>Closure</em> possède un comportement un peu particulier. Elle ne peut être instanciée (constructeur privé) ni même étendue (classe finale). De même, une <em>closure</em> est un objet qui, contrairement à un objet traditionnel, ne peut recevoir aucun attribut à la volée.

[cc lang='php' ]
$foo->bar = 'bar'; //Catchable fatal error: Closure object cannot have properties
[/cc]

Enfin, <em>Closure</em> ne peut pas être sérialisé.
[cc lang='php' ]
serialize($foo); //Exception: Serialization of 'Closure' is not allowed
[/cc]
<h2>Invocation</h2>

<h3>Fonction variable ou <em>callback</em></h3>
Une <em>closure</em> peut indifféremment être appelée comme une <a href="http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php/#fonction" title="Appel dynamique de fonctions en PHP" target="_blank">fonction variable</a>, ou comme une <a href="http://www.thedarksideofthewebblog.com/les-callback-en-php/" title="Les callback en PHP" target="_blank"><em>callback</em></a>.

[cc lang='php' ]
function bar(Closure $closure){
	$closure(); //appel de type fonction variable
	call_user_func($closure); //appel de type callback
}
bar($foo);
[/cc]

D'ailleurs, une <em>closure</em> peut également être associée à une <em>callback</em> au niveau du typage. En somme, une <em>closure</em> est une forme particulière de de <em>callback</em>.

[cc lang='php' ]
function bar(callable $closure){ //on type la closure comme une callable
	call_user_func($closure); //affiche {closure}
}
bar($foo);
[/cc]

<h3>Variable temporaire</h3>
On peut juste regretter que PHP ne permette pas encore ce genre de syntaxe à la Javascript:
[cc lang='php' ]
function bar(){
	return function(){}
}

bar()(); //Parse error: syntax error, unexpected '('
[/cc]

Il faut impérativement passer par une variable temporaire (et donc inutile). Dommage quand on veut faire du <em>currying</em>, car cela engendre du bruit supplémentaire...

<h3>Attribut d'objet</h3>
Dommage aussi qu'on ne puisse pas appeler directement une <em>closure</em> affectée à un attribut d'objet sans, à nouveau, passer par une variable temporaire (et donc inutile).

[cc lang='php' ]
//définition de la classe
class Foo{
    public $bar;
}

//affectation de la closure
$foo = new Foo();
$foo->bar = function(){};

//appel direct de la closure
$foo->bar(); //Fatal error:  Call to undefined method Foo::bar()
[/cc]

On comprend que PHP veut ainsi garder une distinction forte entre les propriétés (qui ne peuvent jamais être invoquées) et les méthodes, à la différence de Javascript où les méthodes ne sont rien d'autre que des propriétés contenant des fonctions.

<h2><em>Binding</em></h2>
Depuis PHP 5.4, la classe <em>Closure</em> bénéficie de méthodes natives permettant le <em>binding</em>, à l'instar de <a href="http://www.thedarksideofthewebblog.com/this-is-it-le-contexte-en-javascript/#call-apply-et-bind" title="This is it! Le contexte en Javascript" target="_blank">Javascript</a>. Le <em>binding</em> est une technique qui vise à redéfinir le contexte d'une fonction, en lui passant explicitement un objet ou une classe. Concrètement, PHP duplique une <em>closure</em>, tout en lui affectant un contexte d'objet ou de classe.
<h3>Binding d'objet</h3>
Si j'exécute une fonction avec un contexte d'objet, PHP retourne bien sûr une erreur.

[cc lang='php' ]
$getProp = function(){
	return $this->prop;
};

$getProp(); //Fatal error: Using $this when not in object context
[/cc]

Il n'est pas non plus possible de passer le <em>$this</em> dans le <em>use()</em>.
[cc lang='php' ]
class Bar{

	private $a = 'a';

	function foo(){
		return function() use($this){ //Fatal error: Cannot use $this as lexical variable
			return $this->a;
		};
	}
}
[/cc]

Par contre, la méthode <a title="PHP: Closure::bind" href="http://be2.php.net/manual/fr/closure.bind.php" target="_blank">Closure::bind</a> permet d'associer la fonction à ce contexte manquant.

[cc lang='php' ]
class Bar{

	private $a = 'a';

	function foo($str){
		return Closure::bind(
			function($add) use($str){
				return $this->a.$str.$add;
			},
			$this
		);
	}
}

$bar = new Bar();
$foo = $bar->foo('b'); //foo retourne la closure le contexte de la fonction.
echo $foo('c'); //Affiche abc => l'appel à $this fonctionne
[/cc]

Attention au dernier argument qui permet d'accéder aux propriétés privées depuis l'extérieur.

[cc lang='php' ]
class A{
	private $prop = 'a';
}

$getProp = function(){
    return $this->prop;
};

//Comportement correct
$getProp = Closure::bind($getProp, new A(), 'A');
var_dump($getProp()); //string 'a' (length=1)

//Erreur
$getProp = Closure::bind($getProp, new A()); //on ne précise pas la classe
var_dump($getProp()); //Fatal error: Cannot access private property A::$prop
[/cc]


<h3>Binding de classe</h3>
Le principe est identique pour les méthodes de classe, si ce n'est que la <em>closure</em> se définit à l'aide su mot-clé <em>static</em>, et qu'aucun objet n'est passé à <em>bind</em>.

[cc lang='php' ]
class A{
	static private $prop = 'a';
}
[/cc]
[cc lang='php' ]
$getProp = static function(){
	return self::$prop;
};

$getProp = Closure::bind($getProp, null, 'A');
var_dump($getProp()); //string 'a' (length=1)
[/cc]
<h2>Reflection</h2>

Les <em>closure</em> étant des objets, c'est <a href="http://php.net/manual/fr/class.reflectionclass.php" title="La classe ReflectionClass" target="_blank"><em>ReflectionClass</em></a> qui doit être utilisée plutôt que <a href="http://www.php.net/manual/fr/class.reflectionfunction.php" title="La classe ReflectionFunction" target="_blank"><em>ReflectionFunction</em></a>. Toutefois, <em>ReflectionClass</em> ne fait que refléter la classe <em>Closure</em>, même si la <em>closure</em> est bindée à un autre objet. Les informations retournées sont donc assez pauvres.

[cc lang='php' ]
$closure = Closure::bind(function(){}, new Bar(), 'Bar');
$reflectedClosure = new \ReflectionClass($closure);
var_dump($reflectedClosure->getName()); //string(7) "Closure"
[/cc]

Par contre, chose plus intéressante, il est possible de sortir une méthode d'un objet pour la récupérer en tant que <em>closure</em>. On peut ainsi appliquer du <em>binding</em> sur une méthode d'objet plutôt que sur une fonction: Une méthode de la classe A peut être invoquée avec le contexte de la classe B.

[cc lang='php' ]
//définition des classes
class A{

	private $prop = 'a';

	function getProp(){
		return $this->prop;
	}
}

class B{

	private $prop = 'b';

}
[/cc]
[cc lang='php' ]
//récupération de la méthode de la classe A
$a = new A();
$reflectA = new ReflectionClass($a);
$closureA = $reflectA->getMethod('getProp')->getClosure($a);

//la méthode peut être appelée comme une fonction, avec le contexte de la classe A.
var_dump($closureA()); //string 'a' (length=1)

//binding vers la classe B
$closureB = Closure::bind($closureA, new B(), 'B');

//le contexte de la méthode est désormais B
var_dump($closureB()); //string 'b' (length=1)
[/cc]
<h2>Méthode à la volée</h2>
Si je trouve PHP extrêmement puissant, j'étais, jusqu'à présent, quelque peu étonné de ne pas avoir trouvé de fonction native permettant d'ajouter à la volée une méthode à un objet ou une classe. (On parle aussi de <a href="https://en.wikipedia.org/wiki/Monkey_patch" title="Wikipédia: Monkey patch" target="_blank">Monkey patch</a>.) 

En réalité, il existe une <a href="http://www.php.net/manual/en/book.runkit.php" title="PHP: runkit" target="_blank">extension</a> (donc à installer) expérimentale (donc pas exploitable en production) qui peut affecter le comportement des classes. Cela dépasse quelque peu le cadre des <em>Closure</em>, alors examinons plutôt ce que nous pouvons déjà faire avec ces dernières.

J'ai essayé de contourner ce problème en m'inspirant de Javascript, pour passer une <em>closure</em> à un attribut d'objet.
[cc lang='php' ]
class Bar{
	public $foo;
}

$bar = new Bar();
$bar->foo = Closure::bind(function(){ return get_class($this); }, $bar);
var_dump($bar); //object(Bar)[1] { public 'foo' => object(Closure)[2] }
[/cc]

On constate que l'attribut <em>foo</em> est bien une <em>closure</em>. Mais, malheureusement, comme dit plus haut, il n'est pas possible d'appeler cette fonction directement, tel qu'on l'aurait fait avec une variable normale. PHP imagine avoir affaire à une méthode...

[cc lang='php' ]
$bar->foo(); //Fatal error: Call to undefined method Bar::foo()
[/cc]

Il est nécessaire de passer par une variable intermédiaire. Autrement dit, l'attribut ne sert que de lieu de stockage à la <em>closure</em> et n'émule aucunement une méthode...
[cc lang='php' ]
$foo = $bar->foo;
var_dump($foo()); //string 'Bar' (length=3)
[/cc]
Quant aux classes <a title="PHP: Reflection" href="http://www.php.net/manual/fr/book.reflection.php" target="_blank">Reflection</a>, aucune ne propose d'ajouter ou même de modifier une méthode.

On peut néanmoins construire un objet qui gère les <em>closure</em> de manière dynamique, lesquelles sont appelées via la méthode <em>__call()</em> que nous avions vue dans notre précédent article.
[cc lang='php' ]
class ClosureAdder
{

    /**
     * liste de méthodes
     * nom de méthode => closure
     * 
     * @var array
     */
    private $closures = array();

    /**
     * implémentation de __call
     * permet d'appeler dynamiquement les méthodes de $this->closures
     * 
     * @param string $methodName
     * @param array $args
     * @return mixed
     */
    public function __call($methodName, array $args)
    {
        return call_user_func_array($this->closures[$methodName], $args);
    }

    /**
     * ajoute une méthode à l'objet.
     * les méthodes ajoutées sont appelables dynamiquement via __call
     * 
     * @param string $name
     * @param callable $closure
     */
    public function addClosure($name, Closure $closure)
    {
        $this->closures[$name] = Closure::bind($closure, $this, get_class($this));
    }

}
[/cc]

[cc lang='php' ]
$closureAdder = new ClosureAdder();
$closureAdder->addClosure('foo', function(){
    return __METHOD__;
});
var_dump($closureAdder->foo()); //ClosureAdder::foo
[/cc]

<h2>Conclusion</h2>

Les <em>closure</em> sont surtout utilisées en tant que <em>callback</em>, comme nous le verrons dans notre <a href="http://www.thedarksideofthewebblog.com/les-callback-en-php/" title="Les callback en PHP">prochain article</a>. Mais PHP a mis en place un système intéressant de <em>binding</em> qui peut se révéler très puissant et qui est certainement encore trop méconnu.

On peut juste regretter que la syntaxe d'appel ne soit pas encore assez souple pour être utilisée de manière aussi légère qu'en Javascript.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1137</wp:post_id>
		<wp:post_date>2013-10-07 19:46:09</wp:post_date>
		<wp:post_date_gmt>2013-10-07 18:46:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-closure-en-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binding"><![CDATA[binding]]></category>
		<category domain="post_tag" nicename="bound-variable"><![CDATA[bound variable]]></category>
		<category domain="post_tag" nicename="closure"><![CDATA[closure]]></category>
		<category domain="post_tag" nicename="create_function"><![CDATA[create_function]]></category>
		<category domain="post_tag" nicename="currying"><![CDATA[currying]]></category>
		<category domain="post_tag" nicename="fonction-anonyme"><![CDATA[fonction anonyme]]></category>
		<category domain="post_tag" nicename="high-order-function"><![CDATA[high-order function]]></category>
		<category domain="category" nicename="les-callback-en-php"><![CDATA[Les callback en PHP]]></category>
		<category domain="post_tag" nicename="monkey-patching"><![CDATA[monkey patching]]></category>
		<category domain="post_tag" nicename="programmation-fonctionnelle"><![CDATA[programmation fonctionnelle]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[Reflection]]></category>
		<category domain="post_tag" nicename="use"><![CDATA[use]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[use, closure, fonction anonyme, create_function, currying, binding, monkey patching, reflection, programmation fonctionnelle, high-order function, bound variable]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Explication détaillée des Closure (fonction anonyme) et du binding en PHP.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_julien.breux@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2013-10-08 18:15:05|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>139</wp:comment_id>
			<wp:comment_author><![CDATA[Nico]]></wp:comment_author>
			<wp:comment_author_email>nikoms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.mechantblog.com</wp:comment_author_url>
			<wp:comment_date>2013-10-07 23:05:26</wp:comment_date>
			<wp:comment_date_gmt>2013-10-07 22:05:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Très intéressant tout ça Raph! Y'a des bouts de code qui m'ont un peu fait penser aux traits...

Merci pour l'article!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381183526.7459669;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>140</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2013-10-08 12:01:32</wp:comment_date>
			<wp:comment_date_gmt>2013-10-08 11:01:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[merci ^^]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>139</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381230092.4811859;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>141</wp:comment_id>
			<wp:comment_author><![CDATA[Appel dynamique de fonctions en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-10-08 12:03:36</wp:comment_date>
			<wp:comment_date_gmt>2013-10-08 11:03:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent Suivant &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381230216.2793181;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381262918.465539;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>142</wp:comment_id>
			<wp:comment_author><![CDATA[Julien Breux]]></wp:comment_author>
			<wp:comment_author_email>julien.breux@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-10-08 18:15:05</wp:comment_date>
			<wp:comment_date_gmt>2013-10-08 17:15:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sympa l'article, j'avais fait un petit travail sur les fake-prototype :
https://github.com/JulienBreux/php5.4-prototype

Si ça peut t'intéresser :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381252505.5888269;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381262904.8735549;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>143</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2013-10-08 21:12:51</wp:comment_date>
			<wp:comment_date_gmt>2013-10-08 20:12:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[J'y avais pas songé mais c'est vrai que c'est pas très éloigné.. Ta classe répond pas mal à la problématique de la méthode à la volée! merci en tout cas :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>142</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381263171.9494369;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[Mika]]></wp:comment_author>
			<wp:comment_author_email>willtard@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-10-09 15:39:45</wp:comment_date>
			<wp:comment_date_gmt>2013-10-09 14:39:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Très intéressant, dommage effectivement que l'utilisation ne soit pas plus souple.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381329585.580754;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381334649.081166;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[Mika]]></wp:comment_author>
			<wp:comment_author_email>willtard@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2013-10-09 15:42:39</wp:comment_date>
			<wp:comment_date_gmt>2013-10-09 14:42:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Intéressant les fake-prototype, ça pourrait m'aider dans mes développements...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>142</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381329759.516005;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381334650.5007229;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>165</wp:comment_id>
			<wp:comment_author><![CDATA[Les callback en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-callback-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-12-06 13:16:48</wp:comment_date>
			<wp:comment_date_gmt>2013-12-06 12:16:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] anonyme (voir closure) (PHP [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386332208.540307;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386592297.1339829;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2013-12-17 22:51:10</wp:comment_date>
			<wp:comment_date_gmt>2013-12-17 21:51:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sur les closure, quelques articles sympas:
http://fabien.potencier.org/article/17/on-php-5-3-lambda-functions-and-closures
http://blog.pascal-martin.fr/post/php-5.3-2-closures-et-lambdas]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387317070.5816579;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>197</wp:comment_id>
			<wp:comment_author><![CDATA[Mocker une méthode avec une closure en PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/mocker-une-methode-avec-une-closure-en-php/</wp:comment_author_url>
			<wp:comment_date>2014-02-01 20:56:13</wp:comment_date>
			<wp:comment_date_gmt>2014-02-01 19:56:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] de notre article sur les closures, nous avions mis en avant le problème suivant: PHP ne permet pas de rajouter ou remplacer une [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391376657.7079079;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>209</wp:comment_id>
			<wp:comment_author><![CDATA[Closure, callback et fonctions dynamiques en PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php/</wp:comment_author_url>
			<wp:comment_date>2014-02-19 23:02:07</wp:comment_date>
			<wp:comment_date_gmt>2014-02-19 22:02:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Les closure en PHP [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393426273.643585;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6438</wp:comment_id>
			<wp:comment_author><![CDATA[moise]]></wp:comment_author>
			<wp:comment_author_email>moiseabisma@yahoo.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-12-31 11:53:24</wp:comment_date>
			<wp:comment_date_gmt>2014-12-31 10:53:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[IMO : ici
<code>
function foo($bar){
    return function($arg) use($bar){
        return $bar+$arg;
    };
}
</code>
ça devrait être : 
<code>
function foo($bar){
    return function($arg) use($bar){
        return $bar . $arg;
    };
}
</code>
Merci]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420023204.4468811;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420029810.460773;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6439</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-12-31 13:44:26</wp:comment_date>
			<wp:comment_date_gmt>2014-12-31 12:44:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[très juste! corrigé. merci bcp! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>6438</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420029866.5540171;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Les callback en PHP</title>
		<link>http://www.thedarksideofthewebblog.com/les-callback-en-php/</link>
		<pubDate>Mon, 02 Dec 2013 11:07:11 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1139</guid>
		<description></description>
		<content:encoded><![CDATA[Ce troisième article de notre série consacrée à <a href="http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php" title="Closure, callback et fonctions dynamiques en PHP" target="_blank">la gestion dynamique de fonctions</a> aborde les <a href="http://php.net/manual/fr/language.types.callable.php" title="PHP: Fonctions de rappel" target="_blank"><em>callback</em></a>.

Une <a href="http://fr.wikipedia.org/wiki/Fonction_de_rappel" title="Wikipédia: Fonction de rappel" target="_blank">fonction de rappel</a> (<em>callback</em>) est une fonction ou une méthode en puissance. Il s'agit d'une valeur contenant l'identifiant d'une fonction existante, laquelle peut ainsi être exécutée dans un second temps. 


<h2>Définition</h2>

Une <em>callback</em> peut prendre différentes formes, selon qu'il s'agisse d'une fonction, d'une méthode d'instance ou d'une méthode de classe:

<ol>
	<li>Identifiant de fonction sous forme de chaîne de caractères (voir <a href="http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php" title="Appel dynamique de fonctions en PHP" target="_blank">fonction dynamique</a>) [cc lang='php' ]is_callable('in_array'); //true[/cc]</li>
	<li>Fonction anonyme (voir <a href="http://www.thedarksideofthewebblog.com/les-closure-en-php" title="Les closure en PHP" target="_blank"><em>closure</em></a>) (PHP 5.3.0)[cc lang='php' ]is_callable(function(){}); //true[/cc]</li>
	<li>Chaîne de caractères contenant le nom d'une classe et le nom d'une méthode statique (PHP 5.2.3)[cc lang='php' ]is_callable('DateTime::createFromFormat'); //true[/cc]</li>
	<li>Tableau contenant: 
		<ul>
			<li>index 0: le nom d'une classe sous forme de chaîne de caractères</li>
			<li>index 1: le nom d'une méthode statique sous forme de chaîne de caractères</li>
		</ul>
[cc lang='php' ]is_callable(array('DateTime', 'createFromFormat')); //true[/cc]
	</li>
	<li>Tableau contenant: 
		<ul>
			<li>index 0: une instance de classe</li>
			<li>index 1: le nom d'une méthode d'instance sous forme de chaîne de caractères</li>
		</ul>
[cc lang='php' ]is_callable(array(new \DateTime(),'add')); //true[/cc]
	</li>
	<li>Objet implémentant la méthode magique <em>__invoke()</em>
		[cc lang='php' ]
class Bar {

	function __invoke(){
		echo __METHOD__;
	}

}

is_callable(new Bar()); //true
[/cc]
	</li>	
</ol>

A noter qu'il est possible de préciser qu'il s'agit d'une méthode ou classe parente (voir plus bas, la section liage statique) (PHP 5.3.0).

<h2>Typage</h2>

Depuis PHP 5.4, il est possible de typer ces fonctions comme étant <em>callable</em>. 

[cc lang='php' ]
function foo(callable $callback){
	//code
}
[/cc]

Avec ce typage, PHP agit comme pour la fonction <a href="http://php.net/manual/fr/function.is-callable.php" title="is_callable" target="_blank"><em>is_callable</em></a> (du moins, lorsque le deuxième argument de cette fonction est à <em>false</em>, comme par défaut) et s'assure que la valeur passée corresponde effectivement à une fonction ou une méthode appelable.
[cc lang='php' ]
is_callable('none'); //false
foo('none'); //Catchable fatal error: Argument 1 passed to foo() must be callable, string given,
[/cc]

De même, les fonctions d'appel que nous allons étudier dans la prochaine section nécessitent de recevoir des <em>callback</em> valides.
[cc lang='php' ]
call_user_func('none'); //Warning: call_user_func() expects parameter 1 to be a valid callback, function 'none' not found or invalid function name
[/cc]

<h2>Invocation</h2>

<h3>Appel de base</h3>

Il est très important de bien comprendre qu'une <em>callback</em> est, en PHP, à la fois une fonction et une méthode. Or, si une fonction aurait pu être appelée avec des parenthèses comme une <a href="http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php" title="Appel dynamique de fonctions en PHP" target="_blank">fonction variable</a>, une méthode, de son côté, implique un objet ou une classe. 

[cc lang='php' ]
function foo(callable $callback){
	return $callback();  
}

var_dump(foo('time')); //int 1370789465

var_dump(foo('DateTime::getLastErrors')); //Fatal error: Call to undefined function DateTime::getLastErrors()
[/cc]

C'est pour cette raison qu'il est recommandé de systématiser les appels de <em>callbacks</em> avec les fonctions <a href="http://php.net/manual/fr/function.call-user-func.php" title="PHP: call_user_func" target="_blank"><em>call_user_func</em></a> et <a href="http://www.php.net/manual/fr/function.call-user-func-array.php" title="PHP: call_user_func_array" target="_blank"><em>call_user_func_array</em></a>.

<em>call_user_func</em> permet d'appeler la fonction avec des arguments passés les uns à la suite des autres.

[cc lang='php' ]
call_user_func('in_array', 'bar', array('bar'), true);
[/cc]

Tandis que <em>call_user_func_array</em> reçoit les arguments à faire passer sous forme de tableau.

[cc lang='php' ]
$args = array(
			'bar', 
			array('bar'), 
			true
		);
call_user_func_array('in_array', $args);
[/cc]

<h3>Méthodes privées</h3>

A noter que PHP permet d'appeler une méthode privée d'un objet si l'on se trouve dans la classe de celui-ci, et même s'il ne s'agit pas de la même instance. En effet, l'encapsulation privée, plutôt que d'empêcher l'accessibilité depuis l'extérieur de l'instance comme on pourrait le penser, n'implique qu'une restriction depuis l'extérieur de la classe. Un objet peut ainsi accéder à une méthode privée d'une autre instance de la même classe. Et cela est très utile si l'on désire appeler une <em>callback</em> privée depuis une classe.

[cc lang='php' ]
class Bar{

	function run(){
		call_user_func(array($this, 'foo'));
	}

	private function foo(){
		echo __METHOD__;
	}
}

$bar = new Bar();
$bar->run(); //affiche Bar::foo => run connaît bien foo.
[/cc]

<h3>Passage par référence</h3>

Attention que <em>call_user_func</em> ne supporte pas le passage d'arguments par référence.

[cc lang='php' ]
$array = array(1, 2, 3);
call_user_func('array_shift', $array); //Warning:  Parameter 1 to array_shift() expected to be a reference, value given
print_r($array); //Array(1, 2, 3)
[/cc]

Mais, nous savons tous qu'utiliser des références démontre avant tout un problème conceptuel qui peut entraîner de <a href="http://www.mechantblog.com/2013/04/php5-les-objets-ne-sont-pas-des-detestables-references/" title="PHP5 : Les objets ne sont pas des (détestables) références" target="_blank">graves désagréments</a>. 

Sinon, <a href="http://blog.lepine.pro/php/tour-dhorizon-des-callbacks-en-php" title="Tour d’horizon des Callbacks en PHP" target="_blank">Jean-françois Lépine</a> propose une solution pour contourner ce problème en utilisant <em>call_user_func_array</em> tout en forçant la référence.

[cc lang='php' ]
$array = array(1, 2, 3);
call_user_func_array('array_shift', array(&$array));
print_r($array); //Array(2, 3)
[/cc]

<h3>Résolution d'espace de nom</h3>

L'appel des <em>callback</em> via les méthodes spécifiques ne tient pas compte de l'espace de nom courant. Il est donc nécessaire de préciser le chemin absolu.
[cc lang='php' ]
namespace Bar1{

	function foo(){
		echo __FUNCTION__;
	}
	
}

namespace Bar2{

	use Bar1;
	
	call_user_func('Bar1\foo'); //affiche Bar1\foo
	call_user_func('foo'); //Warning: call_user_func() expects parameter 1 to be a valid callback, function 'foo' not found or invalid function name

}
[/cc]
<h3>Liage statique</h3>
<em>call_user_func</em> et <em>call_user_func_array</em> ne conservent le <a href="http://www.php.net/manual/fr/language.oop5.late-static-bindings.php" title="Late Static Bindings (Résolution statique à la volée)" target="_blank">liage statique</a> que lorsque le parent est précisé de manière explicite. <a href="http://php.net/manual/fr/function.forward-static-call.php" title="PHP: forward_static_call" target="_blank"><em>forward_static_call</em></a> et <a href="http://www.php.net/manual/fr/function.forward-static-call-array.php" title="PHP: forward_static_call_array" target="_blank"><em>forward_static_call_array</em></a> conservent quant à elles toujours ce liage (PHP 5.3). 

[cc lang='php' ]
class A	{

	const NAME = 'A';

	public static function getName() {	
		echo __METHOD__ .' => '.self::NAME.' - '.static::NAME."\n";
	}
}

class B extends A {

	const NAME = 'B';
	
	public static function getName() {
		echo __METHOD__ .' => '.self::NAME.' - '.static::NAME."\n";
	}

	public static function test() {

		//call_user_func sans préciser le parent		
		call_user_func(array('A', 'getName')); //A::getName => A - A
		echo '<hr />';

		//trois façons d'utiliser parent/static/self avec call_user_func
		
		//1
		call_user_func(array('parent', 'getName')); //A::getName => A - B
		call_user_func(array('self', 'getName')); //B::getName => B - B
		call_user_func(array('static', 'getName')); //B::getName => B - B
		echo '<hr />';
		
		//2.A
		//call_user_func(array('A', 'parent::getName')); Warning:  call_user_func() expects parameter 1 to be a valid callback, cannot access parent:: when current class scope has no parent
		call_user_func(array('A', 'self::getName')); //A::getName => A - B
		//call_user_func(array('A', 'static::getName')); Warning:  call_user_func() expects parameter 1 to be a valid callback, class 'A' is not a subclass of 'B'
		echo '<hr />';

		//2.B
		call_user_func(array('B', 'parent::getName')); //A::getName => A - B
		call_user_func(array('B', 'self::getName')); //B::getName => B - B
		call_user_func(array('B', 'static::getName')); //B::getName => B - B
		echo '<hr />';
		
		//3
		call_user_func('parent::getName'); //A::getName => A - B
		call_user_func('self::getName'); //B::getName => B - B
		call_user_func('static::getName'); //B::getName => B - B
		echo '<hr />';

		//forward_static_call
		forward_static_call(array('A', 'getName')); //A::getName => A - B	
		
	}
}

B::test();
[/cc]

<h3>Appel dynamique d'une chaîne de méthodes</h3>

Avec un peu d'imagination, on peut facilement chaîner les méthodes les unes aux autres de manière dynamique.

<pre>methodA.methodB.methodC...</pre>

[cc lang='php' ]
function call(array $callback, $delimiter='.'){ //note: callable ne fonctionne pas!
    foreach(explode($delimiter, $callback[1]) as $method){
        $callback[0] = $callback[0]->$method();
    }
    return $callback[0];
}

$dateTime = new DateTime('now', new DateTimeZone('Antarctica/South_Pole'));
$callback = array($dateTime , 'getTimezone.getName'); //notation en chaîne de méthode

var_dump(call($callback)); //affiche string 'Antarctica/South_Pole' (length=21)
[/cc]

<h2>Reflection</h2>
Il n'existe pas de classe de <em>reflection</em> d'une <em>callback</em> qui soit implémentée de manière native par PHP. Bien sûr, le troisième argument de <em>is_callable</em> permet de retrouver une chaîne de caractère contenant le nom de la <em>callback</em>, mais c'est à peu près tout...
[cc lang='php' ]
$name = '';
is_callable(array(new \DateTime(),'add'), false, $name);
var_dump($name); //string(13) "DateTime::add"
[/cc]

Sinon, voici <a href="https://gist.github.com/Raphhh/6203942" title="CallableReflection.php" target="_blank">une classe de Reflection maison</a> qui permet d'identifier chaque type possible tels que nous les avons vus.

[cc lang='php' ]
$closure = function(){};
$reflect = new CallableReflection($closure);
var_dump($reflect->isClosure()); //true
[/cc]

[cc lang='php' ]
$object = new \DateTime();
$reflect = new CallableReflection(array($object, 'add'));
var_dump($reflect->isInstanceMethod()); //true
var_dump($reflect->getClassName()); //'DateTime'
var_dump($reflect->getObject()===$object); //true
var_dump($reflect->getMethodName()); //'add'
[/cc]


<h2>Conclusion</h2>

Les <em>callback</em> sont extrêmement puissantes en programmation, et PHP nous propose d'exploiter tant les fonctions que les méthodes.

La seule difficulté réside dans les différentes formes de syntaxe qu'une <em>callback</em> peut prendre, ainsi que dans la nécessité de passer par des fonctions d'appel spécifiques.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1139</wp:post_id>
		<wp:post_date>2013-12-02 12:07:11</wp:post_date>
		<wp:post_date_gmt>2013-12-02 11:07:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-callback-en-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="callable"><![CDATA[callable]]></category>
		<category domain="post_tag" nicename="callback"><![CDATA[callback]]></category>
		<category domain="post_tag" nicename="call_user_func"><![CDATA[call_user_func]]></category>
		<category domain="post_tag" nicename="call_user_func_array"><![CDATA[call_user_func_array]]></category>
		<category domain="post_tag" nicename="forward_static_call"><![CDATA[forward_static_call]]></category>
		<category domain="post_tag" nicename="forward_static_call_array"><![CDATA[forward_static_call_array]]></category>
		<category domain="post_tag" nicename="is_callable"><![CDATA[is_callable]]></category>
		<category domain="category" nicename="les-callback-en-php"><![CDATA[Les callback en PHP]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[Reflection]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[callback, callable, is_callable, call_user_func_array, call_user_func, forward_static_call_array, forward_static_call, Reflection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Explication détaillée des fonctions de rappel en PHP]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>166</wp:comment_id>
			<wp:comment_author><![CDATA[Les closure en PHP | The Dark Side Of The Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/les-closure-en-php/</wp:comment_author_url>
			<wp:comment_date>2013-12-06 13:19:00</wp:comment_date>
			<wp:comment_date_gmt>2013-12-06 12:19:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Une closure peut indifféremment être appelée comme une fonction variable, ou comme une callback. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386332340.236218;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386592295.8982661;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>194</wp:comment_id>
			<wp:comment_author><![CDATA[Appel dynamique de fonctions en PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/appel-dynamique-de-fonctions-en-php/</wp:comment_author_url>
			<wp:comment_date>2014-01-28 23:09:04</wp:comment_date>
			<wp:comment_date_gmt>2014-01-28 22:09:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Nous ne verrons pas pour l&rsquo;instant le traitement des callback plus en profondeur, car elles font l&rsquo;objet d&rsquo;un prochain article spécifique. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392726536.5599921;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>217</wp:comment_id>
			<wp:comment_author><![CDATA[Closure, callback et fonctions dynamiques en PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php/</wp:comment_author_url>
			<wp:comment_date>2014-02-27 22:15:22</wp:comment_date>
			<wp:comment_date_gmt>2014-02-27 21:15:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Les callback en PHP [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393790183.1661301;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mocker une méthode avec une closure en PHP</title>
		<link>http://www.thedarksideofthewebblog.com/mocker-une-methode-avec-une-closure-en-php/</link>
		<pubDate>Sat, 01 Feb 2014 18:52:02 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1164</guid>
		<description></description>
		<content:encoded><![CDATA[Lors de notre article sur les <a href="http://www.thedarksideofthewebblog.com/les-closure-en-php/#mthode-la-vole" title="Les closure en PHP" target="_blank"><em>closures</em></a>, nous avions mis en avant le problème suivant: PHP ne permet pas de rajouter ou remplacer une méthode à la volée de manière native. 

Nous avions parlé d'une <a href="http://www.php.net/manual/en/book.runkit.php" title="PHP: runkit" target="_blank">extension</a> (donc à installer) expérimentale (donc pas exploitable en production) qui peut affecter le comportement des classes. Mais essayons de nous en passer pour l'instant.

D'autre part, il est assez difficile de récupérer le code de base d'une classe sous forme de chaîne de caractères, pour retravailler ensuite sa déclaration et instancier un objet trafiqué. Il faut aller rechercher le fichier associé à la classe et <a href="https://php.net/manual/fr/book.tokenizer.php" title="PHP: Tokenizer" target="_blank">tokenizer</a> son contenu. Encore faut-il ensuite pouvoir exploiter ces données...

Bref, aucune possibilité d'altérer le comportement d'un objet (On parle aussi de <a href="https://en.wikipedia.org/wiki/Monkey_patch" title="Wikipédia: Monkey patch" target="_blank">Monkey patch</a>) ne semble s'offrir à nous de façon simple.

Dès lors, comment mocker une méthode? Comment faire en sorte qu'un objet retourne une valeur arbitraire, sans que le code de sa classe ne prévoie, à la base, cette possibilité?

Comment faire pour implémenter ce genre de fonctionnalité proposée par <a href="http://phpunit.de/manual/3.8/fr/test-doubles.html#test-doubles.stubs.examples.StubTest6.php" title="Exemple 10.7. Bouchonner un appel de méthode pour retourner une valeur à partir d'un rappel" target="_blank">PHPUnit</a>:

[cc lang='php' ]
$bouchon->expects($this->any())
        ->method('faireQuelquechose')
        ->will($this->returnCallback('str_rot13'));
[/cc]

Voici l'occasion de mettre en pratique ce que nous avons vu dans nos articles précédents, avec un exemple simple de <em>binding</em> en PHP... :-D


<h4>MockBuilder</h4>
[cc lang='php' ]
class MockBuilder
{

    /**
     * template de création de classe
     * 
     * @var string
     */
    private static $classTemplate = <<<'EOD'
class {{ className}} extends {{ parentClassName }}{

    private $closures = array();

{{ methods }}

}
EOD;

    /**
     * template de création de méthode
     * 
     * @var string
     */
    private static $methodTemplate = <<<'EOD'
    function {{ methodName }}(){
        return call_user_func_array(
			$this->closures['{{ methodName }}'], 
			func_get_args()
		);
    }
EOD;

    /**
     * retourne un Mock depuis $object.
     * le Mock est une classe $mockName étendant $object.
     * le mock écrase les méthodes $methods sous forme de Closure
     * 
     * @param object $object
     * @param array $methods
     * @param string $mockName
     * @return string
     */
    public function getMock($object, array $methods, $mockName = '')
    {
        if (empty($mockName)) {
            $mockName = 'Mock_'.get_class($object).'_'.uniqid();
        }
        eval($this->getMockCode($mockName, get_class($object), $methods));
        return $this->addMethods(new $mockName(), $methods);
    }

    /**
     * retourne une string contenant la déclaration d'une classe Mock
     * 
     * @param string $className
     * @param string $parentClassName
     * @param array $methods
     * @return string
     */
    private function getMockCode($className, $parentClassName, array $methods)
    {
        return Template::render(
            self::$classTemplate,
            array(
				'className' => $className, 
				'parentClassName' => $parentClassName, 
				'methods' => $this->getMethodsCode($methods),
			)
        );
    }
	
	/**
     * retourne le code des méthodes de la classe de mock.
     * 
     * @param array $methods
     * @return string
     */
	private function getMethodsCode(array $methods)
	{
		$methodCode = '';
        foreach ($methods as $methodName => $closure) {
            $methodCode .= Template::render(
				self::$methodTemplate, 
				array(
					'methodName' => $methodName
				)
			);
        }
		return $methodCode;
	}

    /**
     * ajoute des méthodes à $mock sous forme de Closure
     * 
     * @param $mock
     * @param array $methods
     * @return string
     */
    private function addMethods($mock, array $methods)
    {
        $reflectObject = new ReflectionClass($mock);
        $closures = $reflectObject->getProperty('closures');
        $closures->setAccessible(true);
        $closures->setValue($mock, $this->bindMethods($mock, $methods));
        return $mock;
    }

    /**
     * bind les méthodes $methods en leur passant le contexte de $mock
     * 
     * @param $mock
     * @param array $methods
     * @return array
     */
    private function bindMethods($mock, array $methods)
    {
        $result = array();
        foreach ($methods as $methodName => $method) {
            $result[$methodName] = Closure::bind(
				$method, 
				$mock, 
				get_parent_class($mock)
			);
        }
        return $result;
    }
}

[/cc]

La classe <em>MockBuilder</em> construit une classe de mock héritant de l'objet que l'on veut mocker (<em>MockBuilder::getMock()</em>). Ainsi, notre mock héritera du comportement par défaut de l'objet à mocker.

Pour ce faire, elle définit une chaîne de caractères contenant la déclaration d'une classe. Cette déclaration est obtenue depuis des templates que l'on vient compléter à l'aide de la classe <em>Template</em> (<em>MockBuilder::getMockTemplate()</em>).

La déclaration va toutefois réécrire les méthodes à mocker, pour écraser le comportement de l'objet à mocker. Le corps de chacune de ces méthodes est assez simple et renvoie vers une closure associée.

Une fois la déclaration terminée, elle est évaluée pour qu'il soit ensuite possible d'instancier un objet. 

Enfin, on passe à cet objet, via <em>Reflection</em>, la liste des méthodes à mocker (<em>MockBuilder::addMethods()</em>), en utilisant le <em>binding</em> proposé par <em>Closure</em> (<em>MockBuilder::bindMethods()</em>). Attention, la subtilité c'est de binder le contexte de l'objet à mocker, pour bénéficier de la visibilité privée de cet objet. 

Le mock contient donc des méthodes qui écrasent les méthodes parentes et qui appellent les closures bindées avec le contexte du parent également.

<h4>Template</h4>
[cc lang='php' ]
class Template
{

    const VARIABLE_START_TOKEN = '{{';
    const VARIABLE_END_TOKEN = '}}';

    /**
     * parse une string en remplaçant les valeurs de $vars dont les clés se trouvent entre self::VARIABLE_START_TOKEN et self::VARIABLE_END_TOKEN.
     * 
     * @param string $text
     * @param array $vars [variable => value]
     * @return mixed
     */
    public static function render($text, array $vars)
    {
        return preg_replace(
            array_map(
                function ($keyword) {
                    return '/'
                       .Template::VARIABLE_START_TOKEN
                       .'\s*'
                       .$keyword
                       .'\s*'
                       .Template::VARIABLE_END_TOKEN
                       .'/';
                },
                array_keys($vars)
            ),
            $vars,
            $text
        );
    }
}
[/cc]

La classe <em>Template</em> permet juste de parser un template en lui passant des variables, un peu à la manière de Twig, mais, évidemment, en infiniment moins puissant.

<h4>Instanciation du mock</h4>
[cc lang='php' ]
class Bar{

	public $a = 'a';
	private $b = 'b';
	
	function __construct(){
		$this->b = 'c';
	}

	function foo(){
		return $this->a;
	}
}

[/cc]

On instancie notre classe de test dont on constate le comportement normal.
[cc lang='php' ]
$bar = new Bar();
var_dump($bar->foo()); //a
[/cc]

On crée un mock depuis l'objet de notre classe de test, tout en lui demandant de mocker sa méthode <em>foo</em> à l'aide d'une <em>closure</em> spécifique utilisant le contexte de l'objet à mocker.

[cc lang='php' ]
$mockBuilder = new MockBuilder();
$mock = $mockBuilder->getMock(
	$bar, 
	array(
		'foo' => function(){ 
				return $this->b; 
			}
		)
	);
[/cc]

Notre mock altère bien le fonctionnement de notre objet de base.

[cc lang='php' ]
var_dump($mock->foo()); //c
[/cc]

Tadaaam! :-D

Seule restriction de cette solution: tout comme avec PHPUnit, il n'est pas possible de mocker une méthode privée...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1164</wp:post_id>
		<wp:post_date>2014-02-01 19:52:02</wp:post_date>
		<wp:post_date_gmt>2014-02-01 18:52:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mocker-une-methode-avec-une-closure-en-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binding"><![CDATA[binding]]></category>
		<category domain="post_tag" nicename="closure"><![CDATA[closure]]></category>
		<category domain="category" nicename="les-callback-en-php"><![CDATA[Les callback en PHP]]></category>
		<category domain="post_tag" nicename="mock"><![CDATA[mock]]></category>
		<category domain="post_tag" nicename="phpunit"><![CDATA[PHPUnit]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[Reflection]]></category>
		<category domain="post_tag" nicename="tokenizer"><![CDATA[tokenizer]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[mock, closure, binding, tokenizer, PHPUnit, monkey patch, Reflection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment mocker une méthode à l'aide d'une closure? Un exemple simple de binding en PHP.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[Closure, callback et fonctions dynamiques en PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php/</wp:comment_author_url>
			<wp:comment_date>2014-02-27 22:06:46</wp:comment_date>
			<wp:comment_date_gmt>2014-02-27 21:06:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Mocker une méthode avec une closure en PHP [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393790183.6668849;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Git commit cheat sheet</title>
		<link>http://www.thedarksideofthewebblog.com/git-commit-cheat-sheet/</link>
		<pubDate>Tue, 10 Sep 2013 16:10:36 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1403</guid>
		<description></description>
		<content:encoded><![CDATA[Voici un petit schéma maison reprenant les principales commandes git pour versionner ses fichiers. :-D

<a title="Git commit cheat sheet" href="http://www.thedarksideofthewebblog.com/wp-content/uploads/2013/09/git_basic_commands.pdf" target="_blank" onclick="_gaq.push(['_trackPageview', this.href]);" >
<img class="aligncenter" alt="Git commit cheat sheet" src="http://www.thedarksideofthewebblog.com/wp-content/uploads/2013/09/git_basic_commands_icon2.jpg" width="50%" height="50%" />
</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1403</wp:post_id>
		<wp:post_date>2013-09-10 17:10:36</wp:post_date>
		<wp:post_date_gmt>2013-09-10 16:10:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-commit-cheat-sheet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="git-2"><![CDATA[git]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Git Commit Basic Commands]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[git]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[git-commit-basic-commands]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4019</wp:comment_id>
			<wp:comment_author><![CDATA[Pomme]]></wp:comment_author>
			<wp:comment_author_email>pomme@antidot.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-10-18 12:15:15</wp:comment_date>
			<wp:comment_date_gmt>2014-10-18 11:15:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, yeah ! Ca, c'est du schema.
Je trouve dommage que certaines "flèches" soient dupliquées seulement pour différencier des options de commande ([git add -u / git add -f] ou [git push / git push -f]). Ca dégrade un chouia la visibilité du document.
Mais sinon, beau travail :) .]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413630915.2319019;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413631704.237406;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Retour d&#039;expérience agile: Mise en place de bonnes pratiques au sein de projets existants</title>
		<link>http://www.thedarksideofthewebblog.com/retour-dexperience-agile-mise-en-place-de-bonnes-pratiques-au-sein-de-projets-existants/</link>
		<pubDate>Sun, 03 Nov 2013 13:22:27 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1516</guid>
		<description></description>
		<content:encoded><![CDATA[Dans le cadre de <a href="http://www.journeeagile.be/" title="Journée agile" target="_blank">la Journée agile 2013</a> qui s'est tenue à l'EPHEC le jeudi 31 octobre dernier, <a href="http://www.mechantblog.com/" title="Le méchant blog" target="_blank">Nicolas De Boose</a> et moi avons présenté une conférence sur la mise en place de bonnes pratiques au sein de projets existants. 

Les Journées agiles se déroulent une fois par an et sont l'occasion de découvrir l'agilité tout en rencontrant d'autres professionnels IT qui prônent l'utilisation de telles méthodologies. La journée s'organise autour de multiple conférences et ateliers pratiques.

Notre présentation consistait en un retour d’expérience sur l'implémentation de Scrum et l'industrialisation du code dans le cadre d'un CRM développé par <a href="http://www.antidot.com/" title="Antidot" target="_blank">Antidot</a> et exploité par le deuxième opérateur télécom de Belgique. 

Au sein de notre équipe, nous avons utilisé Scrum comme impulsion pour amener une gestion responsable du code par l'équipe elle-même et redéfinir des pratiques modernes de développement (tests unitaires, intégration continue...). 

Nous avons voulu mettre en avant les points forts que nous a apportés l'agilité, mais aussi les principales difficultés que nous avons rencontrées dès le début de cette aventure. La deuxième partie de l'exposé était axée sur les principaux défis relevés au niveau technique pour élever la qualité de codage.

<iframe src="http://www.slideshare.net/slideshow/embed_code/27839398" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://fr.slideshare.net/NicolasDeBoose/mise-en-place-de-bonnes-pratiques" title="Mise en place de bonnes pratiques (Scrum et php) au sein de projets existants" target="_blank">Mise en place de bonnes pratiques (Scrum et php) au sein de projets existants</a> </strong> from <strong><a href="http://www.slideshare.net/NicolasDeBoose" target="_blank">Nicolas De Boose</a></strong> </div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1516</wp:post_id>
		<wp:post_date>2013-11-03 14:22:27</wp:post_date>
		<wp:post_date_gmt>2013-11-03 13:22:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>retour-dexperience-agile-mise-en-place-de-bonnes-pratiques-au-sein-de-projets-existants</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="post_tag" nicename="agile-2"><![CDATA[agile]]></category>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="post_tag" nicename="industrialisation"><![CDATA[industrialisation]]></category>
		<category domain="post_tag" nicename="integration-continue"><![CDATA[intégration continue]]></category>
		<category domain="post_tag" nicename="journee-agile"><![CDATA[Journée agile]]></category>
		<category domain="post_tag" nicename="scrum"><![CDATA[scrum]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[unit testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[scrum, industrialisation, agile, unit testing, intégration continue, Journée agile]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Présentation de la conférence donnée à la Journée agile 2013 sur la mise en place de bonnes pratiques au sein de projets existants]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Review de code: pros &amp; cons</title>
		<link>http://www.thedarksideofthewebblog.com/review-de-code-pros-cons/</link>
		<pubDate>Tue, 26 Nov 2013 11:43:24 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1540</guid>
		<description></description>
		<content:encoded><![CDATA[L'<a href="http://www.afup.org/" title="Afup" target="_blank">Afup</a> met a disposition une série de <a href="http://www.youtube.com/afupphp" title="Channel YouTube de l'afupPHP" target="_blank">vidéos de ses conférences</a>. Parmi celles-ci, une présentation intéressante de <a href="http://www.jmfontaine.net/" title="Jean-Marc Fontaine" target="_blank">Jean-Marc Fontaine</a> au <a href="http://www.jmfontaine.net/2012/10/29/je-serai-a-php-tour-nantes-2012/" title="PHP Tour Nantes 2012" target="_blank">PHP Tour Nantes 2012</a> sur la review de code.

http://www.youtube.com/watch?v=ZhHfGBR6h3A

J'en profite pour souligner les avantages des reviews de code tels que décrits durant cette conférence:

<h2>Proche de l'agilité</h2>
<ul>
	<li>pear-coding</li>
	<li>responsabilité collective du code</li>
	<li>valeur de courage</li>
</ul>

<h2>Pour quelle raison faire des review?</h2>
<ul>
	<li>Parce qu'au bout d'un certain temps, on ne voit plus son propre code.</li>
	<li>Complémentaire aux outils d'analyse qui ne sont pas adaptés aux problèmes fonctionnels et logiques.</li>
	<li>Complémentaire aux tests unitaires.</li>
</ul>

<h2>Pros</h2>
<ul>
	<li>Trouver des bugs.</li>
	<li>Relever des problèmes de conception.</li>
	<li>Contrôler le respect des bonnes pratiques, des conventions, des standards...</li>
	<li>Harmoniser le code.</li>
	<li>Vérifier la conformité à la demande et l'exhaustivité des fonctionnalités.</li>
	<li>Participer au partage de connaissance technique et business.</li>
	<li>Contribuer à maîtrise collective du code, à la responsabilité commune de l'ensemble du code.</li>
	<li>Former les nouvelles recrues.</li>
	<li>Apporter des idées neuves et hausser le niveau technique de l'équipe.</li>
</ul>

<h2>Cons</h2>
<ul>
	<li>Coût.</li>
	<li>Temps.</li>
	<li>Freins humains.</li>
	<li>Organisation.</li>
	<li>Méthode non exhaustive.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1540</wp:post_id>
		<wp:post_date>2013-11-26 12:43:24</wp:post_date>
		<wp:post_date_gmt>2013-11-26 11:43:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>review-de-code-pros-cons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="afup"><![CDATA[afup]]></category>
		<category domain="post_tag" nicename="agile-2"><![CDATA[agile]]></category>
		<category domain="post_tag" nicename="code-review"><![CDATA[code review]]></category>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="post_tag" nicename="pear-coding"><![CDATA[pear-coding]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[code review, afup, pear-coding, agile]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Conférence de Jean-Marc Fontaine sur la review de code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9c1311707332d642f145af415f5a879b</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="584" height="329" src="http://www.youtube.com/embed/ZhHfGBR6h3A?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_martin.vanaken@8thcolor.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-04-24 18:11:48|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9c1311707332d642f145af415f5a879b</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="584" height="329" src="http://www.youtube.com/embed/ZhHfGBR6h3A?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>332</wp:comment_id>
			<wp:comment_author><![CDATA[Martin]]></wp:comment_author>
			<wp:comment_author_email>martin.vanaken@8thcolor.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.8thcolor.com</wp:comment_author_url>
			<wp:comment_date>2014-04-24 18:11:47</wp:comment_date>
			<wp:comment_date_gmt>2014-04-24 17:11:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,
Je suis arrivé ici suite à ton tweet sur mon poste (http://blog.8thcolor.com/en/2014/04/5-reasons-you-are-not-doing-code-reviews).

Chouette liste de "pros" et surtout dans des directions différentes. J'aime beaucoup la dernière "apporter des idées (un regard) neuf".

Pour les "cons", je pense que le temps &amp; le coût sont une seule et même chose et souvent un argument fallacieux: j'aurais du mal à défendre de faire des review (ou toute autre "bonne pratique") si je ne pensais pas (progressivement expériences à l'appui) qu'elle permet au final de délivrer plus et mieux (en tant qu'équipe de développement, cela reste le sens de notre boulot).

Je serais intéressé par ton expérience sur comment faire face à ces freins justement ?

Martin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398359507.663398;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398366288.1259861;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>333</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-04-24 20:52:57</wp:comment_date>
			<wp:comment_date_gmt>2014-04-24 19:52:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonjour,

Merci pour ton commentaire, et surtout merci pour ton article intéressant ;-). Je ne savais pas que tu parlais français vu que l'article est en anglais, c'est une bonne surprise.

Pour éviter toute ambiguïté, l'article que j'ai publié reprend essentiellement les thèmes évoqués dans une conférence de Jean-Marc Fontaine (donc pas de moi) qui est notamment un des auteurs du Livre blanc sur l'industrialisation de PHP. Par contre, je partage entièrement ces idées.

La review de code et la gestion de la qualité du code dans son ensemble sont des thématiques qui m'intéressent beaucoup. J'ai eu l'occasion de reviewer du code de développeurs, et c'est une expérience enrichissante, qu'on review ou qu'on soit reviewé. 

Clairement, j'ai assisté à un upgrade assez important du niveau de qualité du code, et des exigences minimum de qualité qu'on puisse demander à une équipe de dev. Cela contribue aussi au partage des connaissances techniques et des règles business d'une app. 

Mais, à l'inverse, ce n'est pas toujours bien vécu, tant de la part des développeurs que des managers. 

Les développeurs sont remis en question et doivent revenir dans un code qu'ils pensaient avoir terminé. Dans ce cadre, je pense que l'important, c'est d'expliquer pourquoi on désire amener ce changement. Se focaliser sur la raison (le pourquoi), plus que sur la modification dans le code (le comment). En quoi ce changement peut être intéressant à terme. S'il se révèle une contrainte dans un premier temps (changer ses habitudes est toujours difficile, c'est la force de l'inertie), il va vite se transformer en atout. La qualité de codage consiste à arriver à un code évident et, au final, à simplifier la vie du codeur. C'est donc payant pour les développeurs.

Quand aux managers, le temps c'est de l'argent... Le seul vrai argument en faveur de cette pratique, c'est donc que cela permet de réduire la dette technique de manière importante, et, en même temps, de réduire la dette de qualité. On peut voir ça à la fois comme une forme de refactoring tel que le prône XP, ainsi qu'une façon d'augmenter le savoir-faire des équipes tel que le prône aussi l'agilité. On a un code plus maintenable et des équipes plus compétentes, c'est ça la plus-value réelle pour l'entreprise.

Je crois beaucoup au "refactoring continu" comme meilleur moyen pour minimiser la dette technique. Encore faut-il que le management ait conscience qu'une dette technique, au-delà d'embêter les développeurs, consiste en une véritable dette financière, d'autant plus importante que l'application vivra longtemps et devra continuer à être maintenue sur la longueur. Une dette technique sur un code qu'on ne retouche plus n'est pas trop importante. Mais une dette technique sur le coeur d'une app dont le business évolue peut avoir de graves conséquences et figer complètement son évolution. A ce propos, cet article résume bien la situation: http://www.infoq.com/fr/news/2014/04/managing-software-debt

Par contre, même si j'en suis intimement persuadé, je pense qu'il est difficile de prouver de manière tangible qu'il s'agit d'une bonne chose pour l'entreprise. Le résultat est facilement visible dans le code, mais plus difficile au niveau de la gestion de projet. Il est difficile de sortir des chiffres objectivables. Et ça ne paie que sur le long terme. C'est un investissement qui demeure silencieux. Et un investissement c'est tojours une part de risque, mais c'est aussi vital si l'entreprise veut exister. On doit pouvoir bénéficier d'une confiance du management envers ses développeurs sans quoi cela risque de mal se passer.

Donc pour résumer, ce qui permet de convaincre les gens:

1/ réduction de la dette de qualité:
- augmentation des compétences des dev.
- parage du savoir entre dev.
- meilleure considération du code et implication des dev dans le produit de l'entreprise.

2/ réduction de la dette technique:
- meilleure maintenabilité des applications.
- un code plus agréable, plus lisible, plus gratifiant.

Difficultés:
- Il s'agit d'un investissement silencieux.
- Il faut bénéficier de la confiance de tous.

J'espère avoir répondu à ta question et t'avoir apporté quelques éléments pour nourrir ta réflexion. Je me rends compte que j'ai été un peu long, ça aurait presque mérité un nouvel article! ^^ N'hésite pas à me faire part de tes remarques.

Raphaël]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>332</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398369180.623817;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>336</wp:comment_id>
			<wp:comment_author><![CDATA[Martin]]></wp:comment_author>
			<wp:comment_author_email>martin.vanaken@8thcolor.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.8thcolor.com</wp:comment_author_url>
			<wp:comment_date>2014-04-25 09:01:32</wp:comment_date>
			<wp:comment_date_gmt>2014-04-25 08:01:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,
Merci beaucoup ! En te lisant je me disais: il devrait en faire un article à part entière, je vois qu'on se rejoint (honnêtement, fais le, je pense que c'est intéressant).

D'accord avec toi sur la difficulté d'objectiver, je parle plus souvent d'expérience que de rapports Gartner ou équivalent. 

Tu notes un bon point sur la difficulté pour un développeur de revenir sur du code "fini". C'est une des raisons pour lesquelles je trouve très important que la review vienne "vite". Dans une équipe que je coach, nous avons une règle: s'il y a une issue qui est prête à être revue, elle a priorité sur le fait de commencer toute nouvelle tâche. Cela assure que les revues sont faites rapidement, et par la première personne disponible (et pas uniquement par un "expert").

Dans les conséquences dans la gestion de projet, j'en ai vu une claire et assez rapide: la capacité de l'équipe de passer d'un projet à l'autre, ou simplement de remplacer un membre parti en vacance, ce qui donne beaucoup de flexibilité, y compris côté gestion de projet.

Merci encore pour l'échange (et vraiment, écris cet article).

Martin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>333</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398412892.9722061;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Pourquoi faire simple quand on peut faire compliqué?</title>
		<link>http://www.thedarksideofthewebblog.com/pourquoi-faire-simple-quand-on-peut-faire-complique/</link>
		<pubDate>Wed, 11 Dec 2013 20:13:08 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1596</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>La simplicité – c’est-à-dire l’art de minimiser la quantité de travail inutile – est essentielle. - Manifeste agile</blockquote>
<blockquote>La simplicité peut être plus difficile à atteindre que la complexité : il faut travailler dur pour bien penser et faire simple. - Steve Jobs</blockquote>
<blockquote>La complexité créée par un programmeur est inversement proportionnelle à sa capacité à la gérer. - Kent Beck</blockquote>

Parmi les <a title="Channel YouTube Afup" href="http://www.youtube.com/user/afupPHP?feature=watch" target="_blank">vidéos de conférences</a> proposées par l'<a href="http://www.afup.org/" title="Afup" target="_blank">Afup</a>, <a title="Mes pérégrinations en PHP" href="http://phpbutcher.blogspot.fr/" target="_blank">Frédéric Bouchery</a> nous offre une réflexion intéressante sur la complexité en matière de développement logiciel, lors d'une présentation au <a href="http://afup.org/pages/forumphp2013/" title="Forum PHP 2013" target="_blank">Forum PHP 2013</a>.

http://www.youtube.com/watch?v=oDahCf58HWM

Pour citer ses propos, la complexité d'un projet demeure une notion relative. Et ce qui s’avérera simple pour certains se révélera compliqué pour d'autres. Par ailleurs, on atteint souvent une simplification du code en tendant vers une complexification architecturale. Bref, c'est compliqué de faire simple. <a title="Wikipédia: Principe KISS" href="http://fr.wikipedia.org/wiki/Keep_it_Simple,_Stupid" target="_blank">KISS</a>!


Voici quelques points que j'ai retenus de cette conférence.
<h2>Facteurs de complexification d'un projet</h2>
<h3>Expression des besoins</h3>
<ul>
	<li>Nombre de fonctionnalités.</li>
	<li>Clarté de la demande / complexité business.</li>
	<li>Faisabilité de la demande.</li>
	<li>Changements d'avis.</li>
</ul>
<h3>Conception</h3>
<ul>
	<li>Expérience des architectes:
<ul>
	<li>Autant de visions que d'expériences.</li>
	<li>Syndrome de la mouche sur l'écran (insatisfaction chronique).</li>
	<li><a title="Wikipédia: Not Invented Here" href="http://fr.wikipedia.org/wiki/Not_Invented_Here" target="_blank">Syndrome NIH</a>.</li>
</ul>
</li>
	<li>Inexpérience des développeurs:
<ul>
	<li>Un junior coûte moins cher.</li>
	<li>Manque institutionnel de reconnaissance de l'expertise technique.</li>
	<li>Des développeurs instables induisent un turn-over préjudiciable pour le code (code zombie).</li>
</ul>
</li>
	<li>Pour ma part, je rajouterais la négligence du code:
<ul>
	<li>Négliger de soigner la lisibilité de son code lors du développement.</li>
	<li>Négliger de tester automatiquement son code.</li>
	<li>Négliger de refactorer son code, le plus tôt possible et de manière continue.</li>
	<li>Laisser s'accumuler la dette technique, le code mort, les "todo", etc.</li>
</ul>
</li>
</ul>
<h2>Inquiétante escalade de la complexité?</h2>
<ul>
	<li>Principe de vie normal d'un projet sur le long terme, orienté en trois phases:
<ul>
	<li>phase 1 : exploration (3 versions...)</li>
	<li>phase 2: maturation: on casse tout, on rationalise, on simplifie...</li>
	<li>phase 3: vieillissement, on enrichit, on grossit... ou on en fait des petits.</li>
</ul>
</li>
	<li>S'adapter aux compétences des développeurs:
<ul>
	<li>Si les développeurs ne maîtrisent pas l'objet, ne pas faire des architectures trop complexes...</li>
	<li>Importance de la maîtrise des outils par les développeurs =&gt; courbes d'apprentissage.</li>
	<li>Le meilleurs frameworks? Celui que les développeurs maîtrisent...</li>
</ul>
</li>
	<li>Faire des paris gagnants. Gagner du temps à ne pas faire si on n'en a pas besoin pour l'instant. <a title="Wikipédia: YAGNI" href="http://fr.wikipedia.org/wiki/YAGNI" target="_blank">YAGNI</a>.</li>
	<li>Adapter les outils en fonction des besoins.</li>
	<li>Surveiller le code, contrôler la qualité, communiquer sur les entorses.</li>
	<li>Concevoir en binôme.</li>
	<li>Former et entraîner les développeurs:
<ul>
	<li>faire du <a title="Wikipédia: Coding Dojo" href="http://fr.wikipedia.org/wiki/Coding_Dojo" target="_blank">coding dojo</a>.</li>
	<li>découvrir des nouvelles fonctions.</li>
	<li>allez voir d'autres produits, d'autres librairies.</li>
	<li>...</li>
</ul>
</li>
	<li>Revenir sur des choses qui ne marchaient pas car elles ont évolué.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1596</wp:post_id>
		<wp:post_date>2013-12-11 21:13:08</wp:post_date>
		<wp:post_date_gmt>2013-12-11 20:13:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pourquoi-faire-simple-quand-on-peut-faire-complique</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="afup"><![CDATA[afup]]></category>
		<category domain="post_tag" nicename="coding-dojo"><![CDATA[coding dojo]]></category>
		<category domain="post_tag" nicename="complexite"><![CDATA[complexité]]></category>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="post_tag" nicename="kiss"><![CDATA[kiss]]></category>
		<category domain="category" nicename="les-bonnes-pratiques-en-php"><![CDATA[Les bonnes pratiques en PHP]]></category>
		<category domain="post_tag" nicename="yagni"><![CDATA[yagni]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[afup, complexité, kiss, yagni, coding dojo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Petit résumé de la présentation de Frédéric Bouchery au forum PHP 2013]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_jvarennes@free.fr</wp:meta_key>
			<wp:meta_value><![CDATA[2014-06-12 15:51:02|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6c74c83e9f8fc0ada6996b9146e4f423</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="584" height="329" src="http://www.youtube.com/embed/oDahCf58HWM?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>962</wp:comment_id>
			<wp:comment_author><![CDATA[Manapany]]></wp:comment_author>
			<wp:comment_author_email>jvarennes@free.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-06-12 15:50:58</wp:comment_date>
			<wp:comment_date_gmt>2014-06-12 14:50:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Pas mal du tout, cette conférence...
Mais la seule méthode qui marche à tous les coups si vous ne la connaissez pas, c'est La-Rache :
http://byatoo.com/la-rache/
Enjoy ^^]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1402584660.244715;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1402585156.3253419;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Appel dynamique de constructeur en PHP</title>
		<link>http://www.thedarksideofthewebblog.com/appel-dynamique-de-constructeur-en-php/</link>
		<pubDate>Mon, 03 Mar 2014 16:30:49 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1166</guid>
		<description></description>
		<content:encoded><![CDATA[Dans nos précédents articles sur les <a href="http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php/" title="Closure, callback et fonctions dynamiques en PHP" target="_blank">fonctions dynamiques</a>, nous avons vu qu'il était très facile d'appeler une méthode de manière dynamique et de gérer les arguments tant lors de l'appel que dans la déclaration des méthodes.

Un type de méthode demeure toutefois particulier: le constructeur.


<h2>Instanciation dynamique</h2>

A l'instar de toute autre méthode, l'instanciation dynamique d'un objet peut passer par une variable temporaire contenant le nom de la classe à instancier.
[cc lang='php' ]
class Foo{
	function __construct($a, $b){
		var_dump($a, $b);
	}
}
[/cc]

[cc lang='php' ]
$className = 'Foo';
new $className('a', 'b'); //a b
[/cc]

Même si, à nouveau, on peut regretter la nécessité de passer par une variable temporaire...
[cc lang='php' ]
class Bar{
	public static function instantiate(){
		return new get_called_class()(); //Parse error: syntax error, unexpected '('
	}
}
[/cc]

<h2>Espace de nom</h2>

Attention que la résolution des espaces de nom ne se fait pas en se basant sur les simplifications de l'espace de nom courant. En d'autres termes, même si vous avez un "use" qui simplifie le namespace de votre classe, vous devez, malgré tout, spécifier l'entièreté de son namespace dans la string que vous voulez évaluer. Sans cela, PHP croit qu'il s'agit d'une classe du namespace global. Le "use" n'a donc aucun impact.

[cc lang='php' ]
namespace Bar; 

class Foo{
	function __construct($a, $b){
		var_dump($a, $b);
	}
}
[/cc]

[cc lang='php' ]
use Bar\Foo;

$className = 'Foo';
new $className('a', 'b'); //Fatal error: Class 'Foo' not found
[/cc]

[cc lang='php' ]
$className = 'Bar\Foo';
new $className('a', 'b'); //a b
[/cc]

A noter que PHP 5.5 propose le nom de la classe de manière statique grâce à la constante magique <a href="http://us3.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class.class" title="PHP ::class" target="_blank">::CLASS</a>, ce qui permet d'éviter de longues string...

<h2>Gestion des arguments</h2>

L'instanciation avec une liste d'arguments ne permet plus d'utiliser ce système. Malheureusement, des fonctions comme <a href="http://us3.php.net/manual/fr/function.call-user-func-array.php" title="PHP: call_user_func_array" target="_blank"><em>call_user_func_array()</em></a> ne sont pas utilisables pour les constructeurs. 

[cc lang='php' ]
call_user_func_array('Foo', array('a', 'b')); 
//Warning: call_user_func_array() expects parameter 1 to be a valid callback, 
//function 'foo' not found or invalid function name
[/cc]

Il est nécessaire de passer par <a href="http://us3.php.net/manual/fr/class.reflectionclass.php" title="PHP: La classe ReflectionClass ¶" target="_blank"><em>ReflectionClass</em></a>.

[cc lang='php' ]
$reflectedFoo = new ReflectionClass('Foo');
$reflectedFoo->newInstanceArgs(array('a', 'b')); //a b
[/cc]

<h2>Constructeur comme <em>callback</em></h2>

Nous venons de voir que le constructeur ne peut pas servir de <em>callback</em>. Toutefois, on peut éventuellement passer par une <em>closure</em> intermédiaire.
[cc lang='php' ]
$foo = function($a, $b){
	return new Foo($a, $b);
};
[/cc]
[cc lang='php' ]
call_user_func_array($foo, array('a', 'b')); //a b
[/cc]

<h2>Instanciation sans appeler le constructeur</h2>

Et enfin, bien sûr, il est possible d'instancier un objet sans appeler le constructeur et ses arguments. Dit comme ça, c'est assez bizarre... Mais ça peut être utile dans certains cas, comme la création de mock par exemple.

<h3>Reflection</h3>
Depuis 5.4, on peut utiliser simplement <a href="http://www.php.net/manual/en/reflectionclass.newinstancewithoutconstructor.php" title="ReflectionClass::newInstanceWithoutConstructor" target="_blank">ReflectionClass::newInstanceWithoutConstructor()</a>; 
[cc lang='php' ]
class Foo{

    public $bar;

    function __construct($bar){
        $this->bar = $bar;
    }
}
[/cc]
[cc lang='php' ]
$reflectedFoo = new ReflectionClass('Foo');
$foo = $reflectedFoo->newInstanceWithoutConstructor();
var_dump($foo->bar); //NULL
[/cc]

<h3>unserialize</h3>
Avant 5.4, il existe un hack qui utilise <a href="http://www.php.net/manual/en/function.unserialize.php" title="PHP: unserialize" target="_blank">unserialize</a>.

[cc lang='php' ]
$className = 'Foo';
$signature = 'O:' . strlen($className) . ':"' . $className . '":0:{}';

$foo = unserialize($signature);
var_dump($foo->bar); //NULL
[/cc]

<h2>Conlusion</h2>

Le constructeur se gère un peu différemment que les autres méthodes, mais, au final, peut être exploité avec tout autant de possibilité.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1166</wp:post_id>
		<wp:post_date>2014-03-03 17:30:49</wp:post_date>
		<wp:post_date_gmt>2014-03-03 16:30:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>appel-dynamique-de-constructeur-en-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="callback"><![CDATA[callback]]></category>
		<category domain="post_tag" nicename="call_user_func_array"><![CDATA[call_user_func_array]]></category>
		<category domain="post_tag" nicename="constructor"><![CDATA[constructor]]></category>
		<category domain="post_tag" nicename="get_called_class"><![CDATA[get_called_class]]></category>
		<category domain="category" nicename="les-callback-en-php"><![CDATA[Les callback en PHP]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[Reflection]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[call_user_func_args, get_called_class, reflection, constructor, callback]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Quelques astuces pour instancier dynamiquement un objet depuis son nom ou encore passer dynamiquement une liste d'arguments à un constructeur.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>224</wp:comment_id>
			<wp:comment_author><![CDATA[Closure, callback et fonctions dynamiques en PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/closure-callback-et-fonctions-dynamiques-en-php/</wp:comment_author_url>
			<wp:comment_date>2014-03-03 19:58:23</wp:comment_date>
			<wp:comment_date_gmt>2014-03-03 18:58:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Appel dynamique de constructeur en PHP [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394541513.96665;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>431</wp:comment_id>
			<wp:comment_author><![CDATA[Veille: Python, PHP, POO | Bux Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bux.fr/veille-python-php-poo/</wp:comment_author_url>
			<wp:comment_date>2014-05-09 15:18:03</wp:comment_date>
			<wp:comment_date_gmt>2014-05-09 14:18:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Appel dynamique de constructeur [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399645083.6265531;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399988616.540556;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Les petites choses marrantes en PHP: strtotime vs DateTime</title>
		<link>http://www.thedarksideofthewebblog.com/les-petites-choses-marrantes-en-php-strtotime-vs-datetime/</link>
		<pubDate>Wed, 19 Mar 2014 07:55:29 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1252</guid>
		<description></description>
		<content:encoded><![CDATA[Continuons notre série <a href="http://www.thedarksideofthewebblog.com/menu/php/les-petites-choses-marrantes-en-php/" title="Les petites choses marrantes en PHP">Les petites choses marrantes en PHP</a>, consacrées aux petites choses marrantes en PHP, avec quelques exemples de petites choses marrantes en matière de résolution de date par <a href="http://php.net/manual/fr/class.datetime.php" title="PHP: La classe DateTime" target="_blank">Datetime</a> et <a href="http://php.net/manual/fr/function.strtotime.php" title="PHP: strtotime" target="_blank">strtotime</a>.

Mais attention, que les choses soient bien claires: il ne s'agit pas de troll! Juste de faire gaffe…

<h2>Une date normale</h2>

Donc, la <a href="http://www.php.net/manual/fr/datetime.formats.php" title="PHP: Formats supportés de temps et de dates" target="_blank">documentation de PHP</a> nous indique que <em>Datetim</em>e et <em>strtotime</em> interprètent de la même façon les formats de date.

[cc lang='php' ]
echo date_default_timezone_get(); //UTC
[/cc]

[cc lang='php' ]
$date = strtotime('1970-01-01 00:00:00');
date('Y-m-d H:i:s', $date); //"1970-01-01 00:00:00"
[/cc]
[cc lang='php' ]
$date = new DateTime('1970-01-01 00:00:00');
$date->format('Y-m-d H:i:s'); //"1970-01-01 00:00:00"
[/cc]


<h2>Une date vide</h2>

Sauf que cela devient marrant si on passe une <em>string</em> vide: <em>DateTime</em> retourne la date et l'heure courante, tandis que <em>strtotime</em> retourne la date du <a href="http://fr.wikipedia.org/wiki/Horodatage" title="Horodatage" target="_blank">1er janvier 1970</a>, chère au système UNIX.

[cc lang='php' ]
$date = strtotime('');
date('Y-m-d H:i:s', $date); //"1970-01-01 00:00:00"
[/cc]
[cc lang='php' ]
$date = new DateTime('');
$date->format('Y-m-d H:i:s'); //"2014-03-10 12:29:58"
[/cc]

Marrant non?

<h2>L'an zéro</h2>

Sauf que cela devient marrant si on passe <a href="http://fr.wikipedia.org/wiki/Ann%C3%A9e_z%C3%A9ro" title="Année zéro" target="_blank">l'an zéro</a> comme on la trouve par défaut dans MySQL: <em>strtotime</em> retourne à nouveau la date du 1er janvier 1970, tandis que <em>DateTime</em> ne retrouve plus ses petits.

[cc lang='php' ]
$date = strtotime('0000-00-00 00:00:00');
date('Y-m-d H:i:s', $date); //"1970-01-01 00:00:00"
[/cc]
[cc lang='php' ]
$date = new DateTime('0000-00-00 00:00:00');
$date->format('Y-m-d H:i:s'); //"-0001-11-30 00:00:00"
[/cc]

Marrant non?

<h2>Le bug de 2038</h2>

Sauf que cela devient marrant si on passe une date qui dépasse 32 bits, soit <a href="http://fr.wikipedia.org/wiki/Bug_de_l%27an_2038" title="Bug de l'an 2038" target="_blank">le 19 janvier 1938 à 3h, 14 min et 7 sec</a>: si <em>DateTime</em> s'en sort sans problème, <em>strtotime</em> retourne encore et toujours la date du 1er janvier 1970.

[cc lang='php' ]
$date = strtotime('2039-01-01 00:00:00');
date('Y-m-d h:i:s', $date); //"1970-01-01 00:00:00"
[/cc]
[cc lang='php' ]
$date = new DateTime('2039-01-01 00:00:00');
$date->format('Y-m-d h:i:s'); //"2039-01-01 00:00:00"
[/cc]

Marrant, non?


<h2>Timezone</h2>

Dernière considération, tous ces tests ont été fait avec un <em>timezone</em> neutre, soit l'<a href="http://fr.wikipedia.org/wiki/Temps_universel_coordonn%C3%A9" title="Wikipédia: Temps universel coordonné" target="_blank">UTC</a>.
[cc lang='php' ]
echo date_default_timezone_get(); //UTC
[/cc]

Mais <a href="http://www.youtube.com/watch?v=FVG5CW594wM" title="Mais que se passe-t-il?" target="_blank">que se passe-t-il</a> si on modifie le <em>timezone</em>?

[cc lang='php' ]
date_default_timezone_set('Asia/Tokyo');
echo date_default_timezone_get(); //Asia/Tokyo (soit + 9 heures)
[/cc]

Normalement, le <em>timezone</em> n'a pas d'impact sur le formatage de la date depuis une <em>string</em>, dans la mesure où l'on ne travaille pas avec des <em>timestamp</em> qui, eux, sont absolus et indépendants du fuseau horaire.

[cc lang='php' ]
$date = strtotime('1970-01-01 00:00:00'); 
//sous le timezone 'Asia/Tokyo', $date vaut -32400 et pas 0
//mais c'est bien minuit qui est affiché
date('Y-m-d H:i:s', $date); //"1970-01-01 00:00:00"
[/cc]

Le 1er janvier 1970 informatique est basé sur l'UTC. Il était donc 9 heures du matin au Japon. Logique.

[cc lang='php' ]
$date = 0;
date('Y-m-d H:i:s', $date); //"1970-01-01 09:00:00"
[/cc]

Dès lors, lorsque que <em>strtotime()</em> retourne la date du 1er janvier 1970 par défaut, il faut bien sûr y voir la date UTC, soit le <em>timestamp</em> 0. Le <em>timestamp</em> est ensuite formaté par <em>date()</em> selon le <em>timezone</em> défini, soit avec un décalage de 9 heures pour Tokyo.

[cc lang='php' ]
$date = strtotime('');
date('Y-m-d H:i:s', $date); //"1970-01-01 09:00:00"
[/cc]

[cc lang='php' ]
$date = strtotime('0000-00-00 00:00:00');
date('Y-m-d H:i:s', $date); //"1970-01-01 09:00:00"
[/cc]

[cc lang='php' ]
$date = strtotime('2039-01-01 00:00:00');
date('Y-m-d H:i:s', $date); //"1970-01-01 09:00:00"
[/cc]

C'est donc le seul cas où nous avons un décalage dû au fuseau horaire, bien qu'on ait passé un format de date en <em>string</em>.

Marrant, non?

<h2>L'explication</h2>

En réalité, c'est <em>date</em> qui retourne la date du 1er janvier 1970. <em>strtotime</em> ne retourne pas 0 par défaut, mais bien <em>false</em>, lequel est casté en 0 par <em>date</em>.
[cc lang='php' ]
$date = strtotime('');
var_dump($date); //bool false
[/cc]
Autrement dit, il est facile de filtrer la réponse de <em>strtotime</em> grâce à une comparaison stricte.
[cc lang='php' ]
$date = strtotime('');
if($date===false){
	echo "la date n'a pas été correctement interprétée";
}
[/cc]

DateTime propose une méthode assez semblable qui retourne également <em>false</em> en cas de problème: <a href="http://php.net/manual/fr/datetime.createfromformat.php" title="PHP: DateTime::createFromFormat" target="_blank">DateTime::createFromFormat</a>.

<h2>Conclusion</h2>

En situation extrême, <em>strtotime</em> retourne <em>false</em>, qui peut être interprété comme la date du 1er janvier 1970 par <em>date</em>.

Pour <em>DateTime</em>, la réponse est plus plus variable: c'est souvent mieux, sauf pour l'an zéro, où c'est pire...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1252</wp:post_id>
		<wp:post_date>2014-03-19 08:55:29</wp:post_date>
		<wp:post_date_gmt>2014-03-19 07:55:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-petites-choses-marrantes-en-php-strtotime-vs-datetime</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bug-2038"><![CDATA[bug 2038]]></category>
		<category domain="post_tag" nicename="date"><![CDATA[date]]></category>
		<category domain="post_tag" nicename="datetime"><![CDATA[DateTime]]></category>
		<category domain="category" nicename="les-petites-choses-marrantes-en-php"><![CDATA[Les petites choses marrantes en PHP]]></category>
		<category domain="post_tag" nicename="strtotime"><![CDATA[strtotime]]></category>
		<category domain="post_tag" nicename="timestamp"><![CDATA[timestamp]]></category>
		<category domain="post_tag" nicename="timezone"><![CDATA[timezone]]></category>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[date, DateTime, strtotime, bug 2038, timezone, timestamp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Pourquoi DateTime et strtotime ne se ressemblent pas tout à fait...]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>246</wp:comment_id>
			<wp:comment_author><![CDATA[Nicolas De Boose]]></wp:comment_author>
			<wp:comment_author_email>nikoms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.mechantblog.com</wp:comment_author_url>
			<wp:comment_date>2014-03-19 14:28:11</wp:comment_date>
			<wp:comment_date_gmt>2014-03-19 13:28:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[C'est marrant ca, merci Raph. le 30/11/-1 j'aime assez bien :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395235691.4876521;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395239025.3735039;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Servez-vous du typage faible de PHP!</title>
		<link>http://www.thedarksideofthewebblog.com/servez-vous-du-typage-faible-de-php/</link>
		<pubDate>Thu, 17 Apr 2014 11:30:13 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1643</guid>
		<description></description>
		<content:encoded><![CDATA[Loué par les débutants, exécré par certains gourous, le typage faible est une spécificité importante de PHP. Il permet d'écrire vite fait un petit bout de code, et de ne plus jamais savoir relire un programme. Il fait rentrer n'importe quelle valeur dans n'importe quelle variable. Il autorise une fonction à retourner une donnée à laquelle on ne se serait pas attendu. 

<h2>Et si le typage faible était un atout?</h2>

Le typage faible est-il une des plus grosses failles de PHP? Pas du tout! Il s'agit sans doute d'une des particularités les plus avant-gardistes du langage. Encore faut-il l'utiliser à bon escient!


<h3>Les langages fortement typés, c'est pour les mauvais codeurs!</h3>
Oui, je sais, les vrais développeurs, les durs-à-cuire, les blousons-de-cuir qui ne tolèrent que la console de commande (avec une syntaxe colorée pour les plus débridés d'entre eux), ceux-là ne jureront que par un typage fort. Seuls les vrais langages sont fortement typés; seul le typage fort permet de ne pas avoir de bugs; etc.

Mais le fait est qu'avec du typage faible, <strong>on gagne en légèreté, en lisibilité</strong>. Si on écrit du beau code, le typage faible devient un atout. Et il est fort à parier que si vous avez besoin d'un typage fort, c'est que vous ne savez peut-être pas si bien coder que ça! ;-)

<h3>Un grand pouvoir implique de grandes responsabilités</h3>
Le typage faible, ce n'est pas mal coder. Au contraire, cela demande <strong>davantage de réflexion et de rigueur</strong>. Ce n'est pas parce que ma voiture a la capacité d'atteindre les 200 km/h qu'il m'est permis, pour autant, de dépasser les vitesses autorisées. Inversement, ce n'est pas parce que vous utiliserez un langage fortement typé que vous écrirez du beau code. Désolé!

Avec le typage faible, on gagne en souplesse, mais à la condition de bien coder.

<h2>Mais le typage, c'est quoi en fait?</h2>

Tous les langages, qu'ils soient faiblement ou fortement typés, travaillent avec des <a href="http://fr.wikipedia.org/wiki/Type_(informatique)" title="Wikipédia: Type (informatique)" target="_blank">types de donnée</a>. Un type n'est qu'<strong>une forme de représentation d'une donnée</strong> en mémoire. Le type permet de distinguer un &quot;1&quot; d'un &quot;<em>true</em>&quot;, qui ont pourtant la même emprunte binaire.

<h3>Principes de base</h3>
Le typage représente les règles de définition de cette représentation. Il se résume en quelques grands concepts que les langages suivent en tout ou en partie.
<ul>
	<li><strong>Déclarer le type de donnée</strong> (variable, fonction, paramètres...). Avant même l'assignation, le langage doit connaître le type d'emplacement mémoire à réserver à la donnée. On parle de typage explicite ou implicite selon le respect de cette règle.</li>
	<li><strong>Respecter le type de donnée</strong> lors de l'assignation. C'est ce que l'on appelle la <a href="http://fr.wikipedia.org/wiki/S%C3%BBret%C3%A9_du_typage" title="Wikipédia: Sûreté du typage" target="_blank">sûreté du typage</a>. Si le langage l’exige, il n'est pas possible d'affecter un type de donnée qui ne respecte pas le typage, sans souffrir d'une erreur de compilation/exécution.</li>
	<li><strong>Préserver le type de donnée</strong> lors des manipulations. Les conversions d'un type vers un autre sont explicites ou implicites selon la tolérance des langages. Les langages permettant la conversion implicite n'empêchent toutefois pas la conversion explicite.</li>
</ul>

Les langages forts implémentent généralement l'ensemble de ces règles, au contraire des langages permissifs. On le sait, PHP ne nécessite bien sûr pas de déclarer un type. On peut affecter n'importe quelle nouveau type de donnée à une variable contenant déjà une valeur, même typée au préalable. Et les conversions implicites sont nombreuses. Bref, PHP offre un typage faible.

<h3>Types de donnée</h3>

Je ne vous apprendrai rien non plus, PHP comporte les <a href="http://www.php.net/manual/fr/language.types.php" title="PHP: types" target="_blank">types de donnée</a> habituels. Les types simples (<em>boolean, string, int, float</em>) sont des valeurs dites <a href="http://be2.php.net/manual/fr/function.is-scalar.php" title="PHP: is_scalar()" target="_blank">scalaires</a>, à l'opposé des types complexes (<em>null, array, object, callable, trait, resource</em>). Les objets sont de type <em>object</em>, mais répondent à leur classe, à leurs classes parentes et aux interfaces qu'ils implémentent.

<h2>Type hinting</h2>
<h3>C'est quoi ce truc?</h3>
Le <a href="http://www.php.net/manual/fr/language.oop5.typehinting.php" title="PHP: Type hinting" target="_blank"><em>type hinting</em></a> est la seule fonctionnalité de PHP qui permette un typage explicite. Il s'agit de <strong>déclarer le type des paramètres</strong> d'une fonction ou d'une méthode. (En PHP, méthode et fonction ont un comportement similaire. Une méthode n'est qu'une fonction au sein d'une classe. Aussi, par facilité de langage, j'englobe souvent les méthodes dans le terme de fonction.)

[cc lang='php' ]
function foo(array $param){

}
[/cc]

Cette déclaration de type n'est donc pas obligatoire. Mais dès lors qu'elle est présente, <strong>elle lancera une erreur</strong> si l'on tente d'appeler la fonction avec un mauvais argument.

[cc lang='php' ]
foo(123); //Catchable fatal error: 
//Argument 1 passed to foo() must be of the type array, integer given
[/cc]

Toutefois, <strong>seuls les <em>array</em>, les objets et les <em>callable</em> sont concernés</strong>. (Il n'est pas tout à fait juste de dire que seules les données de type non scalaire sont concernées, car les <em>resource</em> et les <em>trait</em> ne sont pas typables non plus. Nous verrons plus tard que <em>null</em> est un cas particulier.)

[cc lang='php' ]
function bar(integer $param){

}

bar(123); //Catchable fatal error: 
//Argument 1 passed to foo() must be an instance of integer, integer given
[/cc]

Le message d'erreur est pour le moins étonnant dans ce cas-ci. En réalité, PHP s'attend à recevoir une instance de la classe <em>integer</em> (et pas un <em>int</em>), qui n'existe bien sûr pas.

EDIT: PHP 7 permettra également le typage des scalaires. Seuls <em>null</em> et <em>resource</em> restent malheureusement sans possibilité de typage.

<h3>Catcher l'erreur, une mauvaise idée</h3>

EDIT: cette partie n'est plus valable pour PHP 7 qui permet le typage des scalaires.

Une <em>catchable fatal error</em> est donc lancée qui coupe le script. Il s'agit d'une erreur de type E_RECOVERABLE_ERROR.

<em>Catchable</em> signifie que l'erreur est certes importante, mais que, contrairement à une <em>Fatal error</em> de type E_ERROR, <strong>elle peut être interceptée</strong> par un <a href="http://us1.php.net/manual/fr/function.set-error-handler.php" title="PHP: set_error_handler" target="_blank">gestionnaire d'erreur</a>.

[cc lang='php' ]
function errorHandler($errno, $errstr, $errfile, $errline) {
  return E_RECOVERABLE_ERROR === $errno;
}
set_error_handler('errorHandler'); 
[/cc]

[cc lang='php' ]
bar(123); //aucune erreur n'est lancée
[/cc]

Assurément, c'est quelque-chose à <strong>ne surtout pas faire</strong>! Si le script lance une erreur, c'est qu'il a une bonne raison... Cacher une erreur est la pire des erreurs.

A l'inverse, on pourrait aussi détourner cette fonctionnalité et imaginer <strong>typer les paramètres scalaires</strong>. Le typage pourrait donc être plus complet que celui de base.

[cc lang='php' ]
function errorHandler($errno, $errstr, $errfile, $errline) {
  return E_RECOVERABLE_ERROR === $errno 
     && strpos($errstr, 'integer, integer') !== false;
}
set_error_handler('errorHandler'); 
[/cc]

[cc lang='php' ]
bar(123); //aucune erreur n'est lancée

bar('123');//Catchable fatal error: 
//Argument 1 passed to bar() must be an instance of integer, string given
[/cc]

Mais <strong>c'est hacker PHP</strong>, et mal coder! Pensez un peu aux performances perdues inutilement...

<h3>Le hinting, à lui seul, permet de se passer du typage fort</h3>

Une bonne fonction est une fonction courte, dans laquelle les variables temporaires doivent être aussi rares que possible. C'est pourquoi elles peuvent, si la fonction est bien écrite, se résumer en grande partie aux seuls paramètres. Autrement dit, une bonne utilisation du hinting permet de <strong>typer les variables essentielles</strong> qui seront utilisées dans le code.

Nous reviendrons plus en détail sur ce point dans un prochain article.

<h3>Pas de hinting pour les scalaires? Pas grave!</h3>

EDIT: cette partie n'est plus valable pour PHP 7 qui permet le typage des scalaires.

Bon ok, c'est dommage... mais je dois vous avouer que, de plus en plus, je me dis que c'est une bonne chose, ou en tout cas pas un handicap.

En effet, grâce aux conversions implicites de PHP, <strong>les différents types scalaires sont interchangeables</strong>. Utilisez un <em>int</em> à la place d'une <em>string</em>: cela marchera. Un <em>bool</em> à la place d'un <em>float</em>: pas de problème. Vous n'aurez jamais d'erreur d'exécution. Et votre fonction aura toujours son comportement attendu.

[cc lang='php' ]
//en PHP, on peut tout mélanger:

var_dump(1 * '2' + true); //int(3)
[/cc]

Seuls les <em>array</em> et les objets peuvent engendrer des erreurs si leur type n'est pas respecté. Passez un <em>int</em> dans une boucle <em>foreach</em>, cela ne va pas marcher à merveille. Un <em>bool</em> depuis lequel vous appelez une méthode, vous aurez un problème. C'est pour cette raison (enfin, je suppose) que seuls les <em>array</em> et les objets sont concernés par le hinting.

<h3>Que faire des scalaires?</h3>

EDIT: cette partie n'est plus valable pour PHP 7 qui permet le typage des scalaires.

Pourquoi se compliquer la vie? Si on appelle votre fonction en passant un mauvais argument scalaire, <strong>ne vous en préoccupez pas</strong>. Ce n'est pas vos affaires. Par contre, à vous de coder suffisamment bien pour ne pas que ça se fasse ressentir. 

D'ailleurs, je vous mets au défi de me trouver un exemple où cela pose un souci. Et si c'est le cas, alors castez! <strong>Forcez explicitement la conversion</strong>. Cela peut être utile dans une structure de donnée, afin de forcer le bon typage au sein des <em>setter</em> (ou <em>mutator</em> pour faire smart). Par exemple, dans le cas d'une entité, les données proviennent généralement d'une base de donnée et arrivent donc toutes sous la forme d'une <em>string</em>.

[cc lang='php' ]
function setId($id){
	$this->id = (int) $id;
}
[/cc]

Mais, surtout, <strong>ne vérifiez jamais le type</strong> d'une donnée entrante, en lançant par exemple une exception: vous embrouillerez votre code inutilement. De plus, vous ajoutez autant de conditions supplémentaires que l'on fait appel à votre fonction. C'est du gaspillage. Faites simple et lisible, ne faites que l'essentiel, ne codez que ce pour quoi votre fonction est faite. Ce n'est pas le rôle de votre fonction de tester qu'on l'utilise correctement.

[cc lang='php' ]
//l'exception ne sert à rien car même si $number n'est pas un int, 
//le traitement ne pose aucun problème et convertit implicitement la valeur.

function square($number){
	if(!is_int($number)){
		throw new \InvalidArgumentException('$number doit être un int')
	}
	return $number * $number; 
}
[/cc]
Posez-vous la question: "Si je passe un autre type scalaire, mon code marchera-t-il toujours?" Si jamais la réponse est négative, <strong>réaménagez votre code</strong>, tout simplement. Mais en général, le traitement des arguments force la conversion de manière implicite, comme dans notre exemple. Du moins si, bien sûr, on passe effectivement un scalaire. Dans le cas contraire, PHP criera de toute façon.

Vous verrez, cela ne pose pas de problème. Considérez que vos paramètres sont bons. Vous pouvez, car ils sont interchangeables!

<h2>Pas de surcharge... dommage!</h2>

Au final, la seule fonctionnalité que l'on puisse regretter, c'est la surcharge paramétrale. Je parle bien sûr de la <a href="http://fr.wikipedia.org/wiki/Surcharge_(programmation_informatique)" title="Wikipédia: Surcharge" target="_blank">surcharge</a> classique, pas de la <a href="http://www.php.net/manual/fr/language.oop5.overloading.php" title="PHP: Surcharge magique" target="_blank">surcharge magique</a> de PHP. <strong>Impossible de déclarer deux méthodes avec un nom identique</strong> mais des arguments différents.

[cc lang='php' ]
//PHP considère que foo est déclaré deux fois, 
//malgré le type différent de paramètres

function foo(array $arg){}

function foo(Datetime $arg){}
[/cc]

EDIT: A noter que PHP 7 permettra désormais de typer le retour d'une fonction.

<h2>Quelques pièges à éviter</h2>

Evidemment, il y a aussi des pièges... En voici quelques-uns, sans que la liste ne soit en rien exhaustive!

<h3>array, attention aux clés</h3>

PHP <strong>convertit implicitement les clés</strong> d'un tableau soit en <em>int</em>, soit en <em>string</em>. &quot;0&quot;, 0, 0.0 s'écrasent les uns les autres. &quot;&quot; et <em>null</em> s'écrasent aussi l'un l'autre.

[cc lang='php' ]
var_dump(array(
	0 => 0, 
	'0' => '0', //écrase la valeur précédente
	0.0 => 0.0,  //écrase la valeur précédente
	false => false,  //écrase la valeur précédente	
));
/*
array (size=1)
  0 => boolean false
*/
[/cc]
[cc lang='php' ]
var_dump(array(
	'' => '', 
	null => null,  //écrase la valeur précédente
));
/*
array (size=1)
  '' => null
*/
[/cc]

Mais bon, si vous codez comme ça...

<h3>Trop de cast tue le cast</h3>

Les conversions sont <strong>parfois à sens unique</strong>. Ce n'est pas parce que vous castez le type A vers le type B, que vous reviendrez au résultat initial en recastant dans l'autre sens.

[cc lang='php' ]
//après quelques conversions, false vaut true...
var_dump((bool) (array) false); //bool(true)
[/cc]

<h3>Fonctions laxistes</h3>

Vous cherchez à savoir, grâce à la fonction <a href="http://fr2.php.net/in_array" title="PHP: in_array" target="_blank"><em>in_array()</em></a>, si la <em>string</em> 'abc' fait partie d'un tableau ne contenant qu'un <em>int</em> 0. Et PHP vous assure que oui... 
[cc lang='php' ]
in_array('abc', array(0)); //boolean true
[/cc]

Avant de se précipiter sur <a href="http://www.phpwtf.org/" title="www.phpwtf.org" target="_blank">phpwtf</a> pour y rajouter une énième anecdote ne démontrant que l'incompétence de celui qui la poste, essayons de comprendre pourquoi PHP a, en fait, raison. 

Par défaut, la comparaison effectuée par <em>in_array()</em> n'est pas stricte. <strong>PHP réalise une conversion implicite des valeurs</strong>. Or, une conversion vers un entier d'une chaîne de caractères qui ne débute pas par un chiffre donne 0. 0 est donc bien présent.

Quelques fonctions possèdent ce genre de comportement. Il est donc important de <strong>forcer la comparaison stricte</strong> pour éviter des mauvaises surprises.

[cc lang='php' ]
in_array('abc', array(0), true); //boolean false
[/cc]

<h3><em>null</em>, un cas particulier</h3>

<em>null</em> est un type à part. Souvent, il représente l'absence d'objet. Il est une sorte de valeur par défaut d'un objet.

Toutefois, si un paramètre est typé, <strong>on ne peut pas passer la valeur <em>null</em></strong> comme argument.

[cc lang='php' ]
class Bar{}

function foo(Bar $bar){
	var_dump($bar); 
}

foo(null); //Catchable fatal error: Argument 1 passed to foo() must be an instance of Bar, null given
[/cc]

Sauf si la valeur par défaut de <strong>ce paramètre vaut également <em>null</em></strong>.

[cc lang='php' ]
class Bar{}

function foo(Bar $bar = null){
	var_dump($bar); //null
}

foo(null);
[/cc]

Il faut aussi savoir que PHP ne connaît pas d'absence de type, tel que le <a href="http://fr.wikipedia.org/wiki/Void" title="Wikipédia: void" target="_blank"><em>void</em></a> de certains langages. Aussi,<strong> une fonction retournera <em>null</em> par défaut</strong> si aucune autre valeur n'est retournée explicitement.
[cc lang='php' ]
function foo(){}

var_dump(foo()); //null
[/cc]

[cc lang='php' ]
function foo(){
	return;
}

var_dump(foo()); //null
[/cc]


<h2>Conclusion</h2>

Bien sûr, moi aussi, j'aurais aimé disposer de davantage de possibilités de typage en PHP... Mais, en codant un minimum proprement, on sait déjà faire de belles choses. Le tout étant justement de bien coder, et ce d'autant plus qu'on ne peut pas se reposer sur le typage fort.

Sur ce coup-ci, j'ai été un peu polémique (surtout à l'heure où Hack commence à faire parler de lui pour son typage). Mais très franchement, grâce au <em>type hinting</em>, PHP est à la fois puissant, sûr et souple. C'est une des solutions pour apporter un peu de clarté au code.

Nous avons aussi vu qu'il fallait se prémunir de certains pièges induits notamment par les conversions implicites de PHP. Il nous reste à voir comment nous pouvons gagner davantage en lisibilité. En effet, comme je l'ai dit en introduction, la vraie force du typage faible réside dans la fluidité qu'il procure au langage. 

Dans les quelques articles à venir, je vais vous présenter des astuces que j'ai notées pour jouer de cette capacité. Suspens...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1643</wp:post_id>
		<wp:post_date>2014-04-17 12:30:13</wp:post_date>
		<wp:post_date_gmt>2014-04-17 11:30:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>servez-vous-du-typage-faible-de-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="conversion"><![CDATA[conversion]]></category>
		<category domain="post_tag" nicename="in_array"><![CDATA[in_array]]></category>
		<category domain="category" nicename="typage_php"><![CDATA[Le typage en PHP]]></category>
		<category domain="category" nicename="les-bonnes-pratiques-en-php"><![CDATA[Les bonnes pratiques en PHP]]></category>
		<category domain="post_tag" nicename="polymorphisme"><![CDATA[polymorphisme]]></category>
		<category domain="post_tag" nicename="scalar"><![CDATA[scalar]]></category>
		<category domain="post_tag" nicename="set_error_handler"><![CDATA[set_error_handler]]></category>
		<category domain="post_tag" nicename="surcharge"><![CDATA[surcharge]]></category>
		<category domain="post_tag" nicename="typage"><![CDATA[typage]]></category>
		<category domain="post_tag" nicename="type-hinting"><![CDATA[type hinting]]></category>
		<category domain="post_tag" nicename="void"><![CDATA[void]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[type hinting, typage, conversion, in_array, set_error_handler, scalar, surcharge, void, polymorphisme]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Et si le typage faible de PHP était un atout? Un article sur les bonnes pratiques en matière de typage faible.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_hod.heikki@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-04-25 14:47:27|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_jvarennes@free.fr</wp:meta_key>
			<wp:meta_value><![CDATA[2014-05-14 14:06:08|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_derpinskyderp@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-11-24 17:00:32|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>329</wp:comment_id>
			<wp:comment_author><![CDATA[Jérôme]]></wp:comment_author>
			<wp:comment_author_email>jerome@yopmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-04-23 21:20:19</wp:comment_date>
			<wp:comment_date_gmt>2014-04-23 20:20:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Et sinon, ça n'aurait pas été mieux d'investir tout ce temps et cet effort pour apprendre un langage digne d'intérêt ?

Ce n'est même pas pour troller: c'est si dur que ça moralement d'apprendre un langage d'avenir à la place ? Même en secret à la limite si on peur de perdre la face.

Il n'y a qu'à lire http://phpsadness.com/ pour se convaincre.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398284419.7047801;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>337</wp:comment_id>
			<wp:comment_author><![CDATA[Dominique]]></wp:comment_author>
			<wp:comment_author_email>gerard@perdu.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-04-25 09:17:19</wp:comment_date>
			<wp:comment_date_gmt>2014-04-25 08:17:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://www.youtube.com/watch?v=vRvNBqHu0Is

Et oui Jamie !]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398413839.996043;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>339</wp:comment_id>
			<wp:comment_author><![CDATA[JeanMi]]></wp:comment_author>
			<wp:comment_author_email>hod.heikki@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-04-25 14:47:25</wp:comment_date>
			<wp:comment_date_gmt>2014-04-25 13:47:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Quel beau troll !

En même tu fais du développement web, ce domaine où les compétences importent peu et où le talent du développeur est jugé sur sa capacité à faire de la branlette intellectuelle sur des pseudo-méthode d'ingénieurie logicielle et des pseudo-concepts ni scientifique ni intelligible ou logique, et dont l'objectif est de faire gonfler l'égo de ces sous-développeurs, qui se sentent oublier dans leur solitude lié au dédain intellectuel que provoque leur domaine de prédilection et leurs outils archaïques.

Non, vraiment, ce doit être le troll du siècle. Si seulement l'approche était documenté, argumenté (autrement que par des sophismes qui essayent de faire cache-misère devant vos outils, méthodes et compétences), elle pourrait faire écho auprès des 60 ans de recherche sur le typage et la théorie des langages.

N'oubliez pas que si dans le web, la qualité se mesure à la satisfaction du client, il existe des domaines où la qualité du code se mesure en nombre de vies. Pour toute l'informatique critique, tout le calcul haute performance et toute l'informatique où les coûts commencent à devenir important (faire une plateforme e-commerce qui gère des milliers de clients n'est pas une application aux coûts importants, le code embarqué d'un satellite, d'un calculateur dédié à la sureté nucléaire ou d'un avion de ligne  sont des exemples d'applications aux coûts importants).

Prôner un retour en arrière comme celui que vous faite, c'est dangereux et c'est proner l'incompétence. Cela ne passe que dans le développement web (même si cela semble contagieux). S'il vous plait, ravalez votre vomi et gardez le pour vous.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398433645.294878;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>397</wp:comment_id>
			<wp:comment_author><![CDATA[Simplifiez vos conditions]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/simplifiez-vos-conditions/</wp:comment_author_url>
			<wp:comment_date>2014-05-05 13:01:41</wp:comment_date>
			<wp:comment_date_gmt>2014-05-05 12:01:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399291362.2835431;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>488</wp:comment_id>
			<wp:comment_author><![CDATA[ninilepetit]]></wp:comment_author>
			<wp:comment_author_email>jvarennes@free.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-05-14 14:06:07</wp:comment_date>
			<wp:comment_date_gmt>2014-05-14 13:06:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Super article sur le typage en PHP qui est un langage magique qui permet à beaucoup de s'initier à la programmation, et qui ravit beaucoup de professionnels.
Malgré tout - et je ne crois pas être en désaccord avec l'auteur -, le typage reste un important concept à maitriser pour le stockage et le flux des informations, ainsi que pour éviter des problèmes de mémoire et de performance.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400072767.322654;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400073742.7381179;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>489</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-05-14 14:29:36</wp:comment_date>
			<wp:comment_date_gmt>2014-05-14 13:29:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[oui tout à fait, le typage est vraiment nécessaire dans ce genre de cas. Clairement, si on cherche les performances ou un niveau de sûreté plus élevé, les langages fortement typés resteront incontournables. Mais on n'est pas dans le même domaine de couverture d'application que PHP. (on ne choisit pas PHP pour ses perf... lol!)

merci pour ta remarque constructive! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>488</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400074176.7449951;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>713</wp:comment_id>
			<wp:comment_author><![CDATA[JB²]]></wp:comment_author>
			<wp:comment_author_email>jb.predery@online.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-05-28 22:02:03</wp:comment_date>
			<wp:comment_date_gmt>2014-05-28 21:02:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ça fait vraiment plaisir de lire ce genre d'articles en français sur PHP.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401310923.2071631;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401316772.749197;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>715</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-05-28 23:40:20</wp:comment_date>
			<wp:comment_date_gmt>2014-05-28 22:40:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[:-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>713</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401316821.0220301;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>737</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email>bla@google.fr</wp:comment_author_email>
			<wp:comment_author_url>http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/</wp:comment_author_url>
			<wp:comment_date>2014-05-30 09:41:39</wp:comment_date>
			<wp:comment_date_gmt>2014-05-30 08:41:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Rarement vu un article aussi mauvais et faux. Toute l'argumentation est fausse et infondée.

« Les langages fortement typés, c’est pour les mauvais codeurs! »

Au secours !!! Le monde est bourré de mauvais codeurs. Paix à leurs âmes.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401439300.50068;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401650833.3543389;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>767</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-06-01 20:27:21</wp:comment_date>
			<wp:comment_date_gmt>2014-06-01 19:27:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Désolé que tu n'aies pas compris mon article. Et dommage que ton commentaire ne présente absolument aucune forme d'argumentation. On pourrait donc le qualifier avec justesse de mauvais, faux et infondé.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>737</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401650841.4371581;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5181</wp:comment_id>
			<wp:comment_author><![CDATA[Derpderp]]></wp:comment_author>
			<wp:comment_author_email>derpinskyderp@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://null</wp:comment_author_url>
			<wp:comment_date>2014-11-24 17:00:31</wp:comment_date>
			<wp:comment_date_gmt>2014-11-24 16:00:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bon alors clairement, moi on m'a orienté sur cet article juste pour la quote "Mais le fait est qu’avec du typage faible, on gagne en légèreté, en lisibilité. [...] si vous avez besoin d’un typage fort, c’est que vous ne savez peut-être pas si bien coder que ça! ;-)"
Bon clairement, non. Je crois que tu n'as pas très bien compris la différence entre typage fort et esthétisme du code. Le fait est qu'avec un langage typé faiblement, effectivement le code est généralement plus beau et agréable à lire. Cela dit les performances s'en font ressentir. Personnellement j'ai besoin de performances. Le Go ("Golang") est un langage typé fortement. Mais il est néanmoins agréable à lire. Et tu pourra benchmarker les performances entre le go et le php. (Déjà qu'entre le go et le python y'a pas photo)
Je te conseille de retirer cette phrase. Elle est source de nombreux trolls et qui plus est, totalement infondée et fausse.

Cette phrase, aux premiers abords, peut-être lue "Tout ceux qui se servent du typage fort ne savent pas coder". Je pourrai enchainer en disant que tous ceux qui font du php ne savent pas innover par exemple ;)

PS : Je n'ai pas lu ton article, je m'intéresse guère au php.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1416844832.0281751;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1416846137.3363111;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5182</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-11-24 17:41:15</wp:comment_date>
			<wp:comment_date_gmt>2014-11-24 16:41:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[C'est un peu affligeant que les gens qui troll ne comprennent pas eux même le troll.

Soit c'est vrai, soit vous n'avez rien compris à l'article. A vous de choisir.

PS: lis-le avant de penser comprendre et peut-être que tu aurais compris.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>5181</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1416847275.1791871;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5183</wp:comment_id>
			<wp:comment_author><![CDATA[Derpderp]]></wp:comment_author>
			<wp:comment_author_email>derpinskyderp@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://null</wp:comment_author_url>
			<wp:comment_date>2014-11-24 17:51:18</wp:comment_date>
			<wp:comment_date_gmt>2014-11-24 16:51:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Je suis désolé mais je n'ai pas le temps de lire la totalité d'un article qui n'a que peu d'intérêt à mes yeux (et ce n'est pas méchant, c'est simplement de l'honnêteté). Je ne faisais que réagir a cette phrase dont, effectivement le principal but était de faire réagir.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>5182</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1416847878.9924991;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20547</wp:comment_id>
			<wp:comment_author><![CDATA[facebook]]></wp:comment_author>
			<wp:comment_author_email>celindalaguerre@aol.com</wp:comment_author_email>
			<wp:comment_author_url>http://techtweek.com</wp:comment_author_url>
			<wp:comment_date>2017-05-26 00:05:45</wp:comment_date>
			<wp:comment_date_gmt>2017-05-25 23:05:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I desire to subscribe for this webpage to take most recent updates,
therefore where can i do it please help.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1495753545.718677;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21152</wp:comment_id>
			<wp:comment_author><![CDATA[Real Cam Show.]]></wp:comment_author>
			<wp:comment_author_email>dolliegarrett@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://duckshop.co/681836</wp:comment_author_url>
			<wp:comment_date>2017-07-20 13:52:41</wp:comment_date>
			<wp:comment_date_gmt>2017-07-20 12:52:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Teen porb.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1500555161.8565249;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21644</wp:comment_id>
			<wp:comment_author><![CDATA[how to make money in real estate]]></wp:comment_author>
			<wp:comment_author_email>ofeliamanifold@yahoo.de</wp:comment_author_email>
			<wp:comment_author_url>http://entrepreneurion.com</wp:comment_author_url>
			<wp:comment_date>2017-09-11 03:02:41</wp:comment_date>
			<wp:comment_date_gmt>2017-09-11 02:02:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't even know the way I stopped up here, but I assumed 
this put up was good. I do not understand who you are but definitely you are going to a famous blogger if you happen to are not already.
Cheers!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1505095361.918359;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26506</wp:comment_id>
			<wp:comment_author><![CDATA[get wso]]></wp:comment_author>
			<wp:comment_author_email>noreenlandry@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>https://www.getwsofast.com/</wp:comment_author_url>
			<wp:comment_date>2018-10-07 05:13:15</wp:comment_date>
			<wp:comment_date_gmt>2018-10-07 04:13:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for some other great article. Where else could anybody 
get that type of info in such a perfect way of writing?
I have a presentation next week, and I am at 
the look for such info.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1538885595.3383801;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26836</wp:comment_id>
			<wp:comment_author><![CDATA[fapme.pw]]></wp:comment_author>
			<wp:comment_author_email>valeriamiranda@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://fapme.pw/muanhvxemy603787</wp:comment_author_url>
			<wp:comment_date>2018-11-04 11:09:27</wp:comment_date>
			<wp:comment_date_gmt>2018-11-04 10:09:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hiện Techglobal được nhận định và đánh giá 
là nhà cung cấp định vị xe máy ô tô có tiếng tăm 
nhất ngay lức này. Các loại định vị cho xe máy 
Techglobal đó đều có độ chuẩn xác gps cao, siêu nhỏ gọn để dễ 
lắp dấu kín. Không chỉ thế, Techglobal còn phân phối định vị gps 
xe máy để giúp khách hàng giám sát hành trình xe trực tuyến ngay ở nhà.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1541326167.6375351;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:94:{s:15:"comment_post_ID";i:1643;s:14:"comment_author";s:8:"fapme.pw";s:20:"comment_author_email";s:24:"valeriamiranda@gmail.com";s:18:"comment_author_url";s:32:"http://fapme.pw/muanhvxemy603787";s:15:"comment_content";s:451:"Hiện Techglobal được nhận định và đánh giá 
là nhà cung cấp định vị xe máy ô tô có tiếng tăm 
nhất ngay lức này. Các loại định vị cho xe máy 
Techglobal đó đều có độ chuẩn xác gps cao, siêu nhỏ gọn để dễ 
lắp dấu kín. Không chỉ thế, Techglobal còn phân phối định vị gps 
xe máy để giúp khách hàng giám sát hành trình xe trực tuyến ngay ở nhà.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:0;s:7:"user_ID";i:0;s:7:"user_ip";s:11:"95.67.10.22";s:10:"user_agent";s:109:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36";s:8:"referrer";s:75:"http://www.thedarksideofthewebblog.com/servez-vous-du-typage-faible-de-php/";s:4:"blog";s:38:"http://www.thedarksideofthewebblog.com";s:9:"blog_lang";s:5:"fr_FR";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:75:"http://www.thedarksideofthewebblog.com/servez-vous-du-typage-faible-de-php/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:8:"fapme.pw";s:10:"POST_email";s:24:"valeriamiranda@gmail.com";s:8:"POST_url";s:32:"http://fapme.pw/muanhvxemy603787";s:12:"POST_comment";s:451:"Hiện Techglobal được nhận định và đánh giá 
là nhà cung cấp định vị xe máy ô tô có tiếng tăm 
nhất ngay lức này. Các loại định vị cho xe máy 
Techglobal đó đều có độ chuẩn xác gps cao, siêu nhỏ gọn để dễ 
lắp dấu kín. Không chỉ thế, Techglobal còn phân phối định vị gps 
xe máy để giúp khách hàng giám sát hành trình xe trực tuyến ngay ở nhà.";s:11:"POST_submit";s:22:"Laisser un commentaire";s:20:"POST_comment_post_ID";s:4:"1643";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"162c5a7c29";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:9:"PAAS_USER";s:12:"hosting-user";s:6:"TMPDIR";s:13:"/srv/data/tmp";s:11:"GITWEB_USER";s:12:"hosting-user";s:14:"container_ttys";s:43:"/dev/pts/0 /dev/pts/1 /dev/pts/2 /dev/pts/3";s:10:"LD_PRELOAD";s:38:" /usr/local/lib/gandi/gandi-preload.so";s:10:"WWW_ENGINE";s:3:"php";s:9:"DB_ENGINE";s:5:"mysql";s:6:"LC_ALL";s:1:"C";s:9:"LOCAL_DIR";s:8:"/srv/run";s:4:"PAAS";s:5:"lamp0";s:8:"PHP_USER";s:12:"hosting-user";s:4:"PATH";s:194:"/usr/sbin:/usr/bin:/sbin/:/bin:/opt/php-5.4/bin:/opt/php-5.4/sbin:/opt/php-5.4/usr/bin:/opt/php-5.4/usr/sbin:/opt/mysql-5.5/bin:/opt/mysql-5.5/sbin:/opt/mysql-5.5/usr/bin:/opt/mysql-5.5/usr/sbin";s:1:"_";s:11:"/sbin/capsh";s:14:"LOGROTATE_CONF";s:34:"/srv/data/var/admin/logrotate.conf";s:3:"PWD";s:18:"/home/hosting-user";s:4:"LANG";s:1:"C";s:8:"APP_USER";s:12:"hosting-app0";s:10:"DB_VERSION";s:3:"5.5";s:4:"HOME";s:18:"/home/hosting-user";s:5:"SHLVL";s:1:"2";s:7:"MAX_MEM";s:3:"256";s:6:"PREFIX";s:1:"/";s:7:"DB_USER";s:10:"hosting-db";s:8:"SYS_USER";s:13:"hosting-admin";s:11:"WWW_VERSION";s:3:"5.4";s:12:"CUSTOMER_DIR";s:9:"/srv/data";s:9:"container";s:3:"lxc";s:7:"DISTRIB";s:6:"jessie";s:8:"NO_MOUNT";s:3:"yes";s:4:"USER";s:12:"hosting-user";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:8:"W3TC_ENC";s:5:"_gzip";s:17:"proxy-nokeepalive";s:1:"1";s:15:"HTTP_USER_AGENT";s:109:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.5";s:8:"HTTP_DNT";s:1:"1";s:12:"HTTP_REFERER";s:75:"http://www.thedarksideofthewebblog.com/servez-vous-du-typage-faible-de-php/";s:11:"HTTP_ORIGIN";s:38:"http://www.thedarksideofthewebblog.com";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:4:"1022";s:22:"HTTP_X_FORWARDED_PROTO";s:4:"http";s:19:"HTTP_X_COUNTRY_CODE";s:2:"UA";s:9:"HTTP_HOST";s:31:"www.thedarksideofthewebblog.com";s:13:"HTTP_GANDI_RP";s:5:"43797";s:20:"HTTP_ACCEPT_ENCODING";s:4:"gzip";s:20:"HTTP_X_FORWARDED_FOR";s:11:"95.67.10.22";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:31:"www.thedarksideofthewebblog.com";s:11:"SERVER_ADDR";s:12:"172.21.32.48";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:11:"95.67.10.22";s:13:"DOCUMENT_ROOT";s:59:"/srv/data/web/vhosts/www.thedarksideofthewebblog.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:59:"/srv/data/web/vhosts/www.thedarksideofthewebblog.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:80:"/srv/data/web/vhosts/www.thedarksideofthewebblog.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:4:"9532";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1541326167.0634";s:12:"REQUEST_TIME";s:10:"1541326167";s:25:"comment_post_modified_gmt";s:19:"2015-07-08 08:22:24";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Optimisation WordPress: Suppression des révisions de la base de données</title>
		<link>http://www.thedarksideofthewebblog.com/optimisation-wordpress-suppression-des-revisions-de-la-base-de-donnees/</link>
		<pubDate>Mon, 17 Feb 2014 18:11:07 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1689</guid>
		<description></description>
		<content:encoded><![CDATA[Mon blog est "propulsé" par <a href="http://wordpress.org/" title="WordPress" target="_blank">WordPress</a>. J'en suis globalement assez content, surtout pour la myriade de plugins qu'il est possible d'y greffer. Je vous conseille par ailleurs cet <a href="http://www.sitepoint.com/wordpress-framework/" title="WordPress as a Framework" target="_blank">article de Chirag Swadia</a> qui résume les principales fonctionnalités de ce CMS et ses possibilités au niveau développement.

Sans doute que le moins bon point de WordPress réside dans ses performances. Les pages semblent parfois longues à se charger. On penche alors vers des <a href="http://wordpress.org/plugins/w3-total-cache/" title="W3 Total Cache" target="_blank">plugins de mise en cache</a>. Quoiqu'en réalité une solution plus pertinente serait d'utiliser des solutions de cache server comme <a href="https://www.varnish-cache.org/" title="Varnish" target="_blank">Varnish</a>.

Second point faible de WordPress: <strong>la base de données</strong>. Lorsqu'on y jette un oeil, une table se dégage par sa taille particulièrement importante: wp_post. Ce sera le sujet de cet article. Voyons comment il est possible de l'optimiser.

<h2>Qu'est-ce qu'une révision?</h2>

La table <em>wp_post</em> contient l'ensemble du contenu du site. Par contenu, on pense directement aux articles. Et c'est vrai qu'elle renferme notamment le corps même des articles, lesquels peuvent être lourds.

Mais cela va plus loin: dans WordPress, tout est <em>post</em>. Aussi, la table inclut également bien d'autres choses, comme les références des médias que l'on charge, par exemple.

C'est pourquoi on y trouve aussi les révisions des articles. Une révision est simplement <strong>une version d'un article</strong>, une sauvegarde à une date donnée. Un seul article peut ainsi comporter un nombre impressionnant de versions, et <strong>celles-ci s'accumulent</strong> dans la base de données. 


<h2>Comment restaurer une révision?</h2>

Ces révisions peuvent néanmoins être utiles pour restaurer une version antérieure d'un article. Vous pouvez les afficher depuis la page d'édition de votre article, via, en haut à droite, les <strong>Options de l'écran</strong>. Il suffit ensuite de cliquer sur la révision de votre choix pour arriver sur un écran de restauration.

<img src="http://www.thedarksideofthewebblog.com/wp-content/uploads/2014/01/screenShotWordPress-910x1024.png" alt="Visualiser les révisions" />

<h2>Comment désactiver les révisions?</h2>

Il est possible d'empêcher la sauvegarde de ces révisions pour éviter de surcharger la table. Pour ce faire, vous devez <strong>ajouter une constante</strong> à <em>false</em> dans le fichier de configuration qui se trouve à la racine du dossier de WordPress.

[cc lang='php' ]
//wp-config.php

define('WP_POST_REVISIONS', false); //aucune révision sauvegardée
[/cc]

Vous pouvez également <strong>limiter le nombre de révisions</strong> en précisant cette fois un entier dans la constante.

[cc lang='php' ]
//wp-config.php

define('WP_POST_REVISIONS', 5); //ne garde que 5 révisions
[/cc]

<h2>Comment supprimer les révisions?</h2>

Pour <strong>nettoyer la base de données</strong> des révisions déjà présentes, plusieurs sites proposent cette query SQL:
[cc lang='sql' ]
DELETE 
	a,b,c

FROM 
	wp_posts a

	LEFT JOIN 
		wp_term_relationships b ON (a.ID = b.object_id)

	LEFT JOIN 
		wp_postmeta c ON (a.ID = c.post_id)

WHERE 
	a.post_type = 'revision'
[/cc]

Je l'ai exécutée sans ennui, mais n'hésitez pas à procéder à un backup de votre base de données au préalable (comme on dit, je me dégage de toute responsabilité...).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1689</wp:post_id>
		<wp:post_date>2014-02-17 19:11:07</wp:post_date>
		<wp:post_date_gmt>2014-02-17 18:11:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>optimisation-wordpress-suppression-des-revisions-de-la-base-de-donnees</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[wordpress]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Restaurer, désactiver et supprimer les révisions dans WordPress]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_yesweblogfr@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-07-24 08:47:05|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2443</wp:comment_id>
			<wp:comment_author><![CDATA[GG]]></wp:comment_author>
			<wp:comment_author_email>yesweblogfr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://yesweblog.fr/</wp:comment_author_url>
			<wp:comment_date>2014-07-24 08:47:04</wp:comment_date>
			<wp:comment_date_gmt>2014-07-24 07:47:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hello, j'ai bien ajouté la constante dans le fichier de config mais hélas cela ne fonctionne pas. sur tout nouvel article modifié puis enregistré j'ai toujours plusieurs versions/révisions. cela serait il du à la version wp ? j'ai la dernière en prod]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406188024.7328241;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406200156.426842;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18378</wp:comment_id>
			<wp:comment_author><![CDATA[Test: Suppression des révisions de la base de données &#8211; Info-Gate]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.info-gate.fr/optimisation-wordpress-suppression-des-revisions-de-la-base-de-donnees/</wp:comment_author_url>
			<wp:comment_date>2016-06-30 09:45:02</wp:comment_date>
			<wp:comment_date_gmt>2016-06-30 08:45:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://www.thedarksideofthewebblog.com/optimisation-wordpress-suppression-des-revisions-de-la-base-d... [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1467276302.2525539;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1467282243.2627721;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19306</wp:comment_id>
			<wp:comment_author><![CDATA[WP Suppression des révisions de la base de données &#8211; Info-Gate]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.info-gate.fr/wp-suppression-des-revisions-de-la-base-de-donnees/</wp:comment_author_url>
			<wp:comment_date>2017-01-27 16:58:38</wp:comment_date>
			<wp:comment_date_gmt>2017-01-27 15:58:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://www.thedarksideofthewebblog.com/optimisation-wordpress-suppression-des-revisions-de-la-base-d... [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1485532718.8838749;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1500666083.669517;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21154</wp:comment_id>
			<wp:comment_author><![CDATA[Huffman]]></wp:comment_author>
			<wp:comment_author_email>nicolas.huffman@laposte.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.tazzaz.com</wp:comment_author_url>
			<wp:comment_date>2017-07-20 14:39:35</wp:comment_date>
			<wp:comment_date_gmt>2017-07-20 13:39:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonjour, j'ai essayé la constante et effectivement chez moi non plus les révisions ne sont plus supprimées. En revanche, lors de l'enregistrement d'un article aucune nouvelle révision n'est créée. J'ai donc dû également procéder à l'épuration manuelle avec la requête présente ici.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2443</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1500557975.1518421;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1500666061.7529681;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Simplifiez vos conditions</title>
		<link>http://www.thedarksideofthewebblog.com/simplifiez-vos-conditions/</link>
		<pubDate>Mon, 05 May 2014 11:45:10 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=1898</guid>
		<description></description>
		<content:encoded><![CDATA[Dans notre précédent article, nous avons examiné le <a href="http://www.thedarksideofthewebblog.com/servez-vous-du-typage-faible-de-php/" title="Servez-vous du typage faible de PHP!" target="_blank">typage en PHP</a>. Voyons à présent quelques règles simples qui rendent le code plus lisible dans un contexte de conversion implicite, et plus particulièrement au sein des structures conditionnelles.

<h2>Mauvaise utilisation de <em>count</em></h2>

Je rencontre régulièrement ce genre de test sur des <em>array</em>:

[cc lang='php' ]
function foo($bar){
	if(count($bar)>0){
		...
	}
}
[/cc]

En lisant ce code, on peut être amené à penser que la condition s'assure que le tableau n'est pas vide et que le traitement ne s'effectue que si le tableau contient au moins une valeur. En réalité, ce n'est pas exactement ce qui est fait. Si on veut être très précis:

<ol>
	<li>On compte le nombre de valeurs présentes dans le tableau.</li>
	<li>On s'assure que ce nombre est supérieur à 0.</li>
</ol>

Autrement dit, le code ne fait pas ce pour quoi il est destiné. Avant toute chose, le code compte le nombre de valeurs du tableau. Le fait que l'on passe la condition lorsque le tableau est vide n'est rien d'autre qu'un effet de bord, une sorte de hack, un détournement du code.

Bien sûr, ce genre d'écriture serait nécessaire si une condition n'acceptait que des <em>boolean</em>. Ce n'est pas le cas en PHP qui convertit les valeurs de manière implicite. Si on caste un <em>array</em> en <em>boolean</em>, il vaut <em>false</em> s'il est vide et <em>true</em> s'il contient au moins une valeur.

[cc lang='php' ]
(bool) array(); //false
(bool) array(false); //true
[/cc]

La conversion implicite d'un tableau suffit à savoir s'il est vide. 

[cc lang='php' ]
function foo($bar){
	if($bar){
		...
	}
}
[/cc]

Cette fois-ci, le code fait exactement ce que l'on attend de lui. L'écriture s'en trouve simplifiée, et, en éliminant ainsi du bruit superflu, le code devient enfin lisible.

Précisons également qu'il est inutile de procéder à un tel test en amont d'un <em>foreach</em>. Il est évident qu'un <em>foreach</em> ne réalise aucune boucle sur un tableau vide.

<h2>Mauvaise utilisation de <em>is_array</em></h2>

Un autre cas typique de détournement de code peut arriver avec l'écriture suivante.

[cc lang='php' ]
function foo($bar){
	if(is_array($bar)){		
		foreach($bar as $value){
			...
		}
	}
}
[/cc]

La fonction <em>is_array()</em> sert uniquement à tester le type d'une valeur. Elle permet donc de traiter dynamiquement des valeurs selon leur type. A contrario, <em>is_array()</em> n'est pas destiné à se prémunir d'un mauvais comportement, comme par exemple l'utilisation par un <em>foreach</em> d'une valeur qui ne soit pas itérable.

La condition ci-dessus peut donc être bonne ou mauvaise, selon l'intention du codeur. Ce code peut être ambigü à la base, et seul en étant précis, on reste clair sur ses intentions. C'est pour cette raison (de ne pas induire le lecteur en erreur) qu'il est important, dans ce cas précis, de ne pas détourner la fonction <em>is_array()</em>. 

<h3>Test sur le type</h3>
Premier cas d'utilisation: La condition permet de traiter l'argument reçu comme une variable contenant potentiellement plusieurs types de valeurs possibles. Dans un tel cas, le code se tient car la fonction <em>is_array()</em> est correctement utilisée et permet de traiter dynamiquement plusieurs comportements différents.

Le code pourrait alors se traduire de la sorte:

[cc lang='php' ]
function foo($bar){
	if(is_array($bar)){		
		//traitement dans le cas où $bar est un tableau
	}elseif(is_string($bar)){
		//traitement dans le cas où $bar est une string
	}
	...
}
[/cc]

Par contre, il serait préférable de déléguer le traitement de chaque type à des sous-fonctions, si on ne désire pas outre-passer le niveau d'abstraction de cette fonction principale, tel que décrit par l'Oncle Bob.

[cc lang='php' ]
function foo($bar){
	if(is_array($bar)){		
		fooForArray($bar);
	}elseif(is_string($bar)){
		fooForString($bar);
	}
	...
}

function fooForArray(array $bar){
	foreach($bar as $value){
		...
	}
}

...
[/cc]

Ce genre de code arrive fréquemment si on travaille de manière récursive.

[cc lang='php' ]
function mixedToUpper($data){
	if(is_array($data)){
		return arrayToUpper($data);
	}
	if(is_string($data)){
		return strtoupper($data);
	}
	return $data;	
}

function arrayToUpper(array $data){
	foreach($data as $key => $value){
		$data[$key] = mixedToUpper($value);
	}
	return $data;
}

var_dump(mixedToUpper(array('a', array('a')))); // => les 'a' sont passés en MAJ
[/cc]

<h3>Se prémunir d'un mauvais comportement</h3>
Second cas d'utilisation: La condition sert uniquement à s'assurer que la fonction reçoit effectivement un tableau comme argument.

Le code pourrait alors se traduire de la sorte:

[cc lang='php' ]
function foo($bar){
	if(is_array($bar)){		
		...
	}
	throw new InvalidArgumentException('$bar must be an array.'):
}
[/cc]

Cela pourrait arriver si l'on veut se prémunir d'un mauvais comportement avant une boucle <em>foreach</em> par exemple.
[cc lang='php' ]
function foo($bar){
	if(is_array($bar)){ //ce test sert uniquement à prévenir d'une erreur d'exécution dans le cas où $bar n'est pas un array
		foreach($bar as $value){
			...
		}
	}	
}
[/cc]

Pourtant, cela rend le code beaucoup moins lisible. On rajoute une condition qu'il faudra à nouveau comprendre lorsque, quelque temps après, on essaiera de relire le code. Et souvent, on aura omis d'y jouxter un commentaire.

Un commentaire n'aurait toutefois pas été une excuse! Au contraire, on aurait eu un indice que le code n'est pas lisible. En général, si on doit rajouter des commentaires <em>inline</em>, c'est qu'il faut réécrire le code, pas le commenter.

Mais avant tout, le code n'est pas bon car la fonction <em>is_array</em> est détournée. On confond le rôle de cette fonction. On ne désire pas vraiment savoir s'il s'agit d'un <em>array</em>; on essaie juste de se prémunir d'une mauvaise utilisation du code par un autre développeur. Ce code est donc erroné d'un point de vue sémantique.

Si vous voulez que le code n'engendre pas de mauvais comportement, il vous suffit tout simplement d'utiliser le <a href="http://www.php.net/manual/en/language.oop5.typehinting.php" title="PHP: Type hinting" target="_blank"><em>type hinting</em></a>.

[cc lang='php' ]
function foo(array $bar){
	foreach($bar as $value){
		...
	}
}
[/cc]

A nouveau, le code est simplifié. Plus clair, plus court, plus juste. Et intérêt supplémentaire non négligeable, on gagne également en lisibilité au niveau de la signature de la fonction: pas besoin de rentrer dans le code pour savoir le type d'argument à passer.


<h2>Mauvaise utilisation de <em>empty</em></h2>
Dans le même esprit, voici une écriture utilisant <a href="http://be2.php.net/manual/fr/function.empty.php" title="PHP: empty" target="_blank"><em>empty</em></a> pour de mauvaises raisons.
[cc lang='php' ]
function foo($bar){
	if(!empty($bar)){
		...
	}
}
[/cc]

Que fait la fonction <em>empty</em> (peu importe le type, le comportement est toujours identique)? Deux choses:
<ol>
	<li>Elle teste l'existence d'une variable, à l'instar d'<em>isset</em>.</li>
	<li>Elle effectue une comparaison pour savoir si la valeur est équivalente à <em>false</em>. Cette comparaison est laxiste et implique donc une conversion implicite du type.</li>
</ol>

Autrement dit, par rapport à notre bout de code:
<ol>
	<li>Le premier test ne sert à rien, étant donné qu'on est certain de l'existence du paramètre de la fonction.</li>
	<li>Le deuxième test ne sert à rien, étant donné que la condition <em>if</em> effectue d'office une conversion vers un <em>bool</em>.</li>
</ol>

Autrement dit donc, <em>empty</em> ne sert à rien, et il suffit d'écrire simplement ceci:

[cc lang='php' ]
function foo($bar){
	if($bar){
		...
	}
}
[/cc]

A nouveau, simplicité signifie lisibilité.

Et lorsque l'on sait ça, j'avoue ne pas très bien avoir compris la raison pour laquelle PHP 5.5 permet désormais d'utiliser <em>empty</em> sur le résultat d'une expression... 



<h2>Utilisez la comparaison stricte</h2>


Si vous pouvez, écrivez des comparaisons strictes! Préférez la comparaison "===" ou  "!==" dès que possible. 

Vous excluez ainsi la possibilité d'une conversion implicite. Le code est plus facile à comprendre, car il ne fait qu'une seule chose. Celui qui vous relit ne devra pas se poser la question de l'interprétation des types. La comparaison laxiste ne sert à rien d'autre qu'à engendrer une confusion dans le code.

Par ailleurs, vous échapperez aussi à quelques erreurs vicieuses auxquelles on ne pense pas en codant...

[cc lang='php' ]
$var = 1
if($var == 'abc'){
	//je ne passe pas
	//en effet, le int est casté en string => '1' === 'abc'
}
[/cc]
[cc lang='php' ]
$var = true;
if($var == 'abc'){
	//je passe
	//en effet, la string est castée en bool => true === true
}
[/cc]

Mieux vaut donc faire soit
[cc lang='php' ]
if($var){
}
[/cc]
soit
[cc lang='php' ]
if($var === 'abc'){
}
[/cc]

Et si vous utilisez une comparaison laxiste, expliquez-en la raison dans un commentaire adjacent.

<h2>Conclusion</h2>

Simplifier les conditions permet avant tout de gagner en lisibilité. En général, en informatique, plus la solution est simple, meilleure elle sera.

Et par la même occasion vous éviterez de hacker PHP et de détourner des fonctions. Votre code sera plus juste.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1898</wp:post_id>
		<wp:post_date>2014-05-05 12:45:10</wp:post_date>
		<wp:post_date_gmt>2014-05-05 11:45:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simplifiez-vos-conditions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="count"><![CDATA[count]]></category>
		<category domain="post_tag" nicename="empty"><![CDATA[empty]]></category>
		<category domain="post_tag" nicename="is_array"><![CDATA[is_array]]></category>
		<category domain="category" nicename="typage_php"><![CDATA[Le typage en PHP]]></category>
		<category domain="category" nicename="les-bonnes-pratiques-en-php"><![CDATA[Les bonnes pratiques en PHP]]></category>
		<category domain="post_tag" nicename="typage"><![CDATA[typage]]></category>
		<category domain="post_tag" nicename="type-hinting"><![CDATA[type hinting]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[count, is_array, empty, type hinting, typage]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Quelques règles de bonnes pratiques en PHP pour rendre vos conditions à la fois plus justes et plus lisibles.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_tony.bonucci@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-05-05 14:10:53|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_olivier.xsa@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-05-06 07:28:31|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_massutolivier@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-05-13 13:35:55|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>399</wp:comment_id>
			<wp:comment_author><![CDATA[Tony]]></wp:comment_author>
			<wp:comment_author_email>tony.bonucci@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-05-05 14:10:52</wp:comment_date>
			<wp:comment_date_gmt>2014-05-05 13:10:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour l'article !
Tant qu'on est dans les bonnes pratiques de structures conditionnelles, je préfère écrire :
if('abc' == $var){
}

que

if($var == 'abc'){
}

qui permet d'éviter des comportements inattendus en cas de faute de frappe (en effet, $var = 'abc' passera, là où 'abc' = $var nous remontera une erreur).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399295453.045176;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399295814.3950329;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>400</wp:comment_id>
			<wp:comment_author><![CDATA[Lumin0u]]></wp:comment_author>
			<wp:comment_author_email>olivier.xsa@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-05-06 07:28:30</wp:comment_date>
			<wp:comment_date_gmt>2014-05-06 06:28:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[bon article ! ça fait longtemps que je vois ce genre de choses en php.
juste petite typo :
à un moment tu écris "il faut false s’il est vide et true s’il contient au moins une valeur.". je pense que tu voulais dire "il vaut".

aussi concernant is_array() et foreach(), j'ai peut-être mal compris mais tu ne parles pas du fait que foreach sert avant tout à itérer, que ce soit sur un tableau ou un objet itérable. du coup si on teste systématiquement avec is_array(), au moindre changement (array vers objet itérable), le code est cassé.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399357710.669271;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399369264.5962801;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>402</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-05-06 10:42:47</wp:comment_date>
			<wp:comment_date_gmt>2014-05-06 09:42:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[merci pour les remarques. :-) le foreach est là surtout pour l'exemple mais tu as raison.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>400</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399369368.0687661;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>403</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-05-06 10:44:31</wp:comment_date>
			<wp:comment_date_gmt>2014-05-06 09:44:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[merci pour ta contribution. je pense qu'on gagne aussi en performance avec cette inversion.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>399</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399369472.795876;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>472</wp:comment_id>
			<wp:comment_author><![CDATA[Olivier]]></wp:comment_author>
			<wp:comment_author_email>massutolivier@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-05-13 13:35:54</wp:comment_date>
			<wp:comment_date_gmt>2014-05-13 12:35:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Très intéressant Raph. Vive la simplicité du code. 
C'est drôle, mais j'ai l'impression de reconnaître une discussion que nous avons eu sur empty au retour d'une expression.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399984554.9843211;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399988606.7121291;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>509</wp:comment_id>
			<wp:comment_author><![CDATA[Zilong]]></wp:comment_author>
			<wp:comment_author_email>zilong.qiu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-05-15 22:34:53</wp:comment_date>
			<wp:comment_date_gmt>2014-05-15 21:34:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice trick :D]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>403</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400189693.8446701;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400245023.885639;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2479</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2014-07-24 23:14:05</wp:comment_date>
			<wp:comment_date_gmt>2014-07-24 22:14:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>472</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406240047.494288;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bien débuter sa lib PHP: Intro</title>
		<link>http://www.thedarksideofthewebblog.com/bien-debuter-sa-lib-php-intro/</link>
		<pubDate>Thu, 09 Oct 2014 12:02:24 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2266</guid>
		<description></description>
		<content:encoded><![CDATA[Quelles sont les bonnes pratiques pour écrire une simple bibliothèque PHP? Comment structurer son code? Comment assurer son interopérabilité et sa fiabilité? Voici des questions importantes dont les réponses sont nombreuses et en constante évolution. 

En effet, le monde du développement web est en pleine ébullition depuis quelques années maintenant. La communauté ne cesse de dégager des bonnes pratiques professionnelles. On parle d'<a href="http://www.phptherightway.com/" title="PHP The Right Way" target="_blank">industrialisation du code</a>. Nous disposons désormais de frameworks puissants, de conventions de codage, de librairies de tests, etc. Notre petit monde bouge énormément, ce qui le rend fort intéressant! 

C'est donc l'occasion de commencer par quelques bases d'organisation d'une bibliothèque PHP. Attention, je parle bien d'une bibliothèque et pas d'une application. Je ne traiterai pas des problématiques liées aux serveurs, au contexte web, aux langages front-end ou autres.

Nous allons, dans les prochains articles, passer en revue quelques points qui permettent d'élaborer un projet standardisé, clair et fiable. Je ne doute pas qu'il existe beaucoup d'autres bonnes pratiques que celles qui seront listées. Si vous en connaissez ou si vous pensez à certaines ressources intéressantes, n'hésitez pas à les partager dans les commentaires!

Pour finir, sachez que l'ensemble des bonnes pratiques dégagées dans cette série d'articles seront consignées dans un <a href="https://github.com/Raphhh/php-lib-bootstrap" title="php-lib-bootstrap" target="_blank">projet GitHub</a> représentant une sorte de bootstrap plus ou moins idéal d'un projet PHP.

<ol>
  <li><a href="http://www.thedarksideofthewebblog.com/bien-debuter-sa-lib-php-part-i-les-outils/" title="Bien débuter sa lib PHP: Part I – Les outils">Les outils</a><ul>
    <li>Le versionning</li>
    <li>Les éditeurs de code</li>
    <li>Les serveurs d’intégration continue</li>
    <li>Les gestionnaires de dépendances</li>
   </ul>
  </li>

  <li>
   Le code<ul>
    <li>Les fichiers généraux</li>
    <li>Le code source</li>
    <li>Les tests</li>
    <li>Les exécutables</li>
    <li>La documentation</li>
   </ul>
  </li>
</ol>

To be continued...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2266</wp:post_id>
		<wp:post_date>2014-10-09 13:02:24</wp:post_date>
		<wp:post_date_gmt>2014-10-09 12:02:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bien-debuter-sa-lib-php-intro</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bien-debuter-sa-lib-php"><![CDATA[Bien débuter sa lib PHP]]></category>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="post_tag" nicename="industrialisation"><![CDATA[industrialisation]]></category>
		<category domain="post_tag" nicename="integration-continue"><![CDATA[intégration continue]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[industrialisation, intégration continue]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Un petit aperçu des principales bonnes pratiques pour écrire une simple bibliothèque PHP, assurer son intégration continue et quelques principes d'industrialisation du code.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4079</wp:comment_id>
			<wp:comment_author><![CDATA[bux]]></wp:comment_author>
			<wp:comment_author_email>sevajol.bastien@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.bux.fr</wp:comment_author_url>
			<wp:comment_date>2014-10-23 08:13:15</wp:comment_date>
			<wp:comment_date_gmt>2014-10-23 07:13:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Superbe initiative. Le premier volet "Les outils" est très complet merci !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414048395.933044;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4080</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2014-10-23 08:24:49</wp:comment_date>
			<wp:comment_date_gmt>2014-10-23 07:24:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[merci!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>4079</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414049089.681561;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10961</wp:comment_id>
			<wp:comment_author><![CDATA[Bien débuter sa lib PHP | wiki]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://wiki.blog.xif6.com/2015/04/18/bien-debuter-sa-lib-php/</wp:comment_author_url>
			<wp:comment_date>2015-04-18 13:58:57</wp:comment_date>
			<wp:comment_date_gmt>2015-04-18 12:58:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Intro, Part 1 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429361937.640316;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429686147.9159269;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bien débuter sa lib PHP: Part I - Les outils</title>
		<link>http://www.thedarksideofthewebblog.com/bien-debuter-sa-lib-php-part-i-les-outils/</link>
		<pubDate>Tue, 14 Oct 2014 08:20:39 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2383</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>GitHub, IDE, Travis, Scrutinizer, Insight, Composer, Packagist, ...</h2>

Ce premier article sur <a href="http://www.thedarksideofthewebblog.com/bien-debuter-sa-lib-php-intro/" title="Bien débuter sa lib PHP: Intro">les bonnes pratiques de développement d'une librairie PHP</a> propose de passer en revue les principaux outils à mettre en place en débutant son projet. Ces outils touchent au versionning, au formatage du code et à la gestion des dépendances. Nous verrons qu'ils permettent la mise en place d'un processus d'<a href="http://fr.wikipedia.org/wiki/Int%C3%A9gration_continue" title="Wikipédia: intégration continue" target="_blank">intégration continue</a> d'un projet.

Cet article n'est assurément pas exhaustif. Il n'en a d'ailleurs pas la vocation. Il s'agit avant tout d'un aperçu des solutions les plus en vogue, et de dégager <em>de facto</em> les principaux <a href="http://fr.wikipedia.org/wiki/Norme_et_standard_techniques" title="Norme et standard techniques" target="_blank">standards</a> actuels. Par exemple, en matière de versionning, je ne parle que de Git, alors qu'il existe bien sûr d'autres solutions du même type (dont certaines que vous, personnellement, préférerez).

Ce choix est arrêté arbitrairement, de par la popularité de l'outil, sa facilité ou sa puissance d'utilisation. Pour revenir à notre exemple, Git est extrêmement polyvalent en lui-même, il s'est imposé auprès d'une large partie de la communauté, et il permet de s'interfacer facilement avec GitHub, qui lui-même s'interface facilement avec les serveurs d'intégration en ligne ainsi qu'avec les gestionnaires de dépendance, etc. Cela ne veut pour autant pas dire que d'autres solutions ne sont pas envisageables.

Enfin, il ne s'agit pas non plus d'expliquer en profondeur ces outils. Chaque outil fera l'objet d'une présentation globale résumant ses principales fonctionnalités. Nous essaierons de dégager les impacts directs touchant le projet et de lister un maximum de ressources intéressantes pour approfondir le sujet.

Par contre, peut-être ai-je oublié certains points, certaines bonnes pratiques essentielles. Si vous en connaissez ou si vous pensez à certaines ressources intéressantes, n'hésitez pas à les partager dans les commentaires!

Pour finir, sachez que l'ensemble des bonnes pratiques dégagées dans cette série d'articles seront consignées dans un <a href="https://github.com/Raphhh/php-lib-bootstrap" title="php-lib-bootstrap" target="_blank">projet GitHub</a> représentant une sorte de bootstrap plus ou moins idéal d'un projet PHP. Deplus, une <a href="https://gist.github.com/Raphhh/6468b110467c8960ea04" title="PHP lib check list" target="_blank">check-list</a> résumant les principaux points est sur Gist.

<h2>Le versionning</h2>

Le <a href="http://fr.wikipedia.org/wiki/Gestion_de_versions" title="Wikipédia: Gestion des versions" target="_blank">versonning</a> c'est quoi? Si jamais vous ne connaissez pas, retenez que, en gros, cela permet de partager ses développements (et dès lors de déployer une application) et de garder un historique des modifications (et dès lors de gérer les versions d'une application). S'il n'y a qu'une seule bonne pratique que vous deviez mettre en place, et ce dans tous les cas, c'est bien de versionner votre projet.

<h3>Git</h3>

<a href="http://git-scm.com/" title="Git" target="_blank">Git</a> est le logiciel de versionning qui s'est imposé ces dernières années. Puissant, léger, pratique: Git, c'est génial. :) Parmi ses atouts, on comptera entre autres la possibilité de gérer plusieurs branches très facilement ainsi que de nettoyer son historique avant de partager ses commit.

<h4>Config</h4>

Une bonne utilisation de Git nécessite que l'on ajoute <a href="http://git-scm.com/docs/gitignore" title="Git - gitignore" target="_blank">.gitignore</a>, un fichier de configuration situé à la racine du projet. Il permet de spécifier les path qui ne doivent pas être versionnés. Le projet <a href="http://www.gitignore.io/" title="gitignore.io" target="_blank">gitignore.io</a> vous propose de générer vos fichiers sur base des <a href="https://github.com/github/gitignore" title="github/gitignore" target="_blank">exemples proposés par GitHub</a>.

<h4>Fichiers versionnés</h4>
.gitignore
.gitattributes (en cas de besoin)

<h4>Doc et tutos</h4>
Se lancer dans Git avec la <a href="http://git-scm.com/doc" title="Git doc" target="_blank">doc officielle</a> ou avec un <a href="http://www.grafikart.fr/blog/deployer-site-git" title="Grafikart - Git" target="_blank">tuto vidéo</a>.



<h3>GitHub</h3>

<h4>Fonctionnalités</h4>
<a href="https://github.com/" title="GitHub" target="_blank">GitHub</a>, quant à lui, s'est imposé comme l'un des principaux dépôts distants pour Git. Sa grande force: il est gratuit pour l'open-source, facile d'utilisation et fort complet. Parmi ses principales fonctionnalités:

<ul>
	<li>Partage du code: visualiser le code, l'historique, les contributions, les release...</li>
	<li>Gestion des métadonnées: gérer les issues, la documentation, les discussions, ...</li>
</ul>

<h4>Doc et tutos</h4>
Se lancer dans GitHub avec <a href="https://help.github.com/articles/create-a-repo" title="GiHub Help: Create A Repo" target="_blank">la doc officielle</a> ou avec un <a href="http://www.grafikart.fr/tutoriels/internet/git-github-131" title="Grafikart: Utiliser GitHub" target="_blank">tuto en vidéo</a>. Un <a href="http://www.blog-nouvelles-technologies.fr/archives/13114/comprendre-github-fork-branch-track-squash-et-pull-request/" title="Comprendre GitHub : Fork, Branch, Track, Squash et Pull Request" target="_blank">tuto</a> sur la gestion des pull request.




<h2>Les éditeurs de code</h2>
Pour ma part, j'utilise <a href="http://www.jetbrains.com/phpstorm/" title="PHPStorm" target="_blank">PHPStorm</a> et j'en suis extrêmement satisfait. Mais <a href="http://www.journaldunet.com/developpeur/php/logiciel-de-developpement-php/editeurs-de-texte-ide-php.shtml" title="Éditeurs de texte & IDE PHP" target="_blank">peu importe votre éditeur de code</a>, pourvu que vous respectiez les formatages suivants:

<h3>File encoding</h3>
Le standard actuel d'encodage des fichiers, tel que défini par la <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md" title="GitHub - PSR-1" target="_blank">PSR-1</a>, est <a href="http://www.w3.org/International/questions/qa-utf8-bom" title="The byte-order mark (BOM) in HTML" target="_blank">l'UTF-8 sans BOM</a>. (Attention que ni <a href="https://bugs.php.net/bug.php?id=22108" title="PHP does not support BOM" target="_blank">PHP</a> ni même le <a href="http://www.alsacreations.com/astuce/lire/86-ma-page-commence-par-de-quoi-sagit-ilnbsp.html" title="Ma page commence par ï»¿ de quoi s'agit-il  ?" target="_blank">HTML</a> ne gèrent le BOM.)

PHP supporte initialement l'<a href="http://fr.wikipedia.org/wiki/ISO_8859-1" title="Wikipédia: ISO 8859-1" target="_blank">ISO 8859-1</a>. Aussi certaines fonctions de manipulation des string pourraient avoir un <a href="http://www.php.net/manual/fr/language.types.string.php#language.types.string.details" title="PHP: String" target="_blank">comportement inattendu</a> sur les caractères non compatibles avec l'<a href="http://fr.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange" title="Wikipédia: ASCII" target="_blank">ASCII</a>.  C'est pourquoi il est recommandé de travailler avec l'extension <a href="http://www.php.net/manual/fr/book.mbstring.php" title="PHP: mbstring" target="_blank">mbstring</a>.

D'autre part, le comportement de certaines fonctions peut également changer selon les versions de PHP, comme par exemple <em><a href="http://www.php.net/manual/fr/function.htmlentities.php#refsect1-function.htmlentities-changelog" title="PHP: htmlentities" target="_blank">htmlentities</a></em> qui supporte par défaut l'UTF-8, mais seulement depuis 5.4.0. 

Si vous travaillez sur un projet web, le <a href="http://www.w3.org/International/questions/qa-changing-encoding#server" title="Changing (X)HTML page encoding to UTF-8" target="_blank">header HTTP</a> doit également être adapté via la fonction <em><a href="http://be2.php.net/manual/fr/function.header.php" title="PHP: header" target="_blank">header</a></em> ou de la directive <em><a href="http://www.php.net/manual/fr/ini.core.php#ini.default-charset" title="PHP: default_charset" target="_blank">default_charset</a></em>. Egalement en matière d'interfaçage, il sera important de vous soucier de votre base de données (<a href="http://dev.mysql.com/doc/refman/5.7/en/charset-connection.html" title="Mysql: charset connection" target="_blank">connexion</a> et <a href="http://dev.mysql.com/doc/refman/5.7/en/charset-syntax.html" title="MySQL: Charset syntax" target="_blank">format des données</a>). (Attention que pour Mysql, <a href="https://mathiasbynens.be/notes/mysql-utf8mb4" title="Mysql: utf8mb4" target="_blank">le charset utf8 est codé sur 3 bytes (utf8mb3) au lieu de 4 (utf8mb4)</a>. Mysql parle de ce problème dans <a href="https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-upgrading.html" title="Mysql: charset unicode" target="_blank">sa doc</a>.)

Je vous recommande le résumé de <a href="https://phpbestpractices.org/#utf-8" title="PHP and UTF-8" target="_blank">PHP Best Practices</a> ainsi que ce <a href="http://stackoverflow.com/questions/16858915/migrating-a-php-application-to-handle-utf-8" title="Migrating a php application to handle UTF-8" target="_blank">post stackoverflow</a> sur la migration d'un projet PHP en UTF-8.

Réglage dans PHPStorm: Project Settings > File Encodings

<h3>Line separator</h3>
PHP tournant sur Linux, on utilisera le <a href="http://fr.wikipedia.org/wiki/Fin_de_ligne#LF" title="Wikipédia: Fin de ligne" target="_blank">saut de ligne</a> (LF, line feed, &#92;n) comme séparateur de ligne, tel que défini par la <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md" title="GitHub -  PSR-2" target="_blank">PSR-2</a>. A priori, si votre éditeur de code est un minimum intelligent, cela ne posera aucun problème, même si, en local, vous ne travaillez pas sous Linux. 

Attention également à la gestion de ce caractère avec <a href="http://stackoverflow.com/questions/3206843/how-line-ending-conversions-work-with-git-core-autocrlf-between-different-operat" title="How line ending conversions work with git core.autocrlf between different operating systems" target="_blank">Git</a>: le paramètre <a href="http://git-scm.com/book/fr/Personnalisation-de-Git-Configuration-de-Git#Formatage-et-espaces-blancs" title="Git: autocrlf" target="_blank">core.autocrlf</a> peut convertir les fins de ligne. Si votre IDE est bien configuré et gère vos fins de ligne, ce paramètre de Git peut être modifié pour "input" (`git config --global core.autocrlf input`).

Une autre façon de gérer ce problème est de forcer les fins de ligne grâce à une commande passée dans le fichier <em>.gitattributes</em> de Git. Il est en effet possible de demander à Git de convertir les fins de ligne de tous les fichiers texte:

<pre>
//.gitattributes
* text eol=lf
</pre>

Réglage dans PHPStorm: Project Settings > Code Style > General

<h3>Coding style</h3>

Et bien sûr, il faut formater le code lui-même selon le style de codage que vous aurez choisi. La norme actuelle pour PHP est résumée dans les <a href="https://github.com/php-fig/fig-standards/tree/master/accepted" title="Les PSR sur GitHub" target="_blank">PSR 1 et 2</a>.

Réglage dans PHPStorm: Project Settings > Code Style

<h3>Fichiers versionnés</h3>
Le projet <a href="http://editorconfig.org/" title="EditorConfig" target="_blank">EditorConfig</a> permet, grâce à des plugin, de bénéficier d'un fichier de config cross-IDE gérant quelques-uns de leurs paramétrages: .editorconfig 


Par ailleurs, faites attention de ne pas versionner les dossiers ou fichiers propres aux IDE (Pour PHPStorm: /.idea). Cela pourrait, par exemple, être fait à l'aide du fichier <a href="https://help.github.com/articles/ignoring-files#create-a-local-gitignore" title="GitHub Help: Create a local .gitignore" target="_blank">.gitignore</a>. Il existe des <a href="https://github.com/github/gitignore/tree/master/Global" title="github/gitignore" target="_blank">exemples de config</a> dédiés à cette problématique. 

Toutefois, dès lors que votre .gitignore est versionné et donc partagé avec tous, cela risque d'être fort lourd: si vous le faites pour un IDE, vous devrez le faire pour tous les IDE, sans compter les fichiers spécifiques aux OS. 

Une meilleure pratique consiste donc à exclure les particularités de votre environnement de travail dans le fichier <a href="https://help.github.com/articles/ignoring-files#explicit-repository-excludes" title="Git Help: Explicit repository excludes" target="_blank">.git/info/exclude</a>, spécialement dédié à cet effet et qui, lui, n'est pas versionné. 

Une autre possibilité est de configurer un <a href="https://help.github.com/articles/ignoring-files#create-a-global-gitignore" title="GitHub Help: Create a global .gitignore" target="_blank">.gitignore global</a> qui sera commun à tous vos repository. Cela aura pour avantage de ne devoir être configuré qu'une seule et unique fois pour tous vos projets.


<h2>Les serveurs d'intégration continue</h2>

Quelques outils deviennent incontournables, car ils vous permettent de publier un code stable et de qualité. Dans cette partie, on parlera de build et de qualité de code. Par "build", on entend le déploiement automatisé d'un projet (rapatriement des fichiers de code, récupération des dépendances...) (ici ce sera dans un serveur de test, mais cela sera fait ensuite dans un serveur de prod) et l'exécution d'analyses de qualité du code. Parmi ces analyses, une attention particulière est accordée aux tests automatisés, lesquels permettent de garantir que le code est stable et que le déploiement s'est correctement déroulé. Il s'agit d'un processus d'<a href="http://fr.wikipedia.org/wiki/Int%C3%A9gration_continue" title="Wikipédia: intégration continue" target="_blank">intégration continue</a> indispensable dans l'évolution d'un projet. Voyons quelques solutions parmi d'autres (<a href="https://github.com/ziadoz/awesome-php#continuous-integration" title="Awesome PHP: Coutinuous integration" target="_blank">serveurs ci</a>, <a href="https://github.com/ziadoz/awesome-php#code-analysis" title="Awesome PHP: Code analyisis" target="_blank">analyseurs de code)</a>.



<h3>Travis</h3>

<h4>Fonctionnalités</h4>
<a href="https://travis-ci.org/" title="Travis-ci" target="_blank">Travis</a> est un serveur d'intégration continue. Il va garantir que votre code est stable. C'est lui qui va builder votre projet pour ensuite exécuter vos tests sous les versions de PHP dont votre code assure la compatibilité.

<h4>Config</h4>
Travis demande un fichier de configuration à la racine du projet: <a href="http://docs.travis-ci.com/user/build-configuration/#.travis.yml-file%3A-what-it-is-and-how-it-is-used" title="Travis - Config file" target="_blank">.travis.yml</a>. De base, ce fichier contiendra le langage du build, ainsi que ses versions (on peut donc tester la compatibilité du code avec plusieurs versions différentes, ainsi qu'avec hhvm):

<pre>
language: php
php:
  - 5.6
  - 5.5
  - 5.4
  - hhvm
</pre>

Il existe un <a href="http://docs.travis-ci.com/user/travis-lint/" title="Travis lint" target="_blank">outil de validation</a> de ce fichier. Travis propose également un <a href="https://github.com/travis-ci/travis-ci-php-example" title="gitHub - Travis: Example PHP project" target="_blank">exemple de projet PHP</a>, intéressant notamment pour la gestion des tests sous plusieurs DB.

<h4>Intégration</h4>
Travis est lancé depuis un <a href="https://help.github.com/articles/connecting-with-third-party-applications" title="GitHub - Connecting with third party applications" target="_blank">hook de GitHub</a>. Autrement dit, il va se déclencher automatiquement dès lors que GitHub reçoit un nouveau push de Git.

<h4>Fichiers versionnés</h4>
.travis.yml

<h4>Doc et tutos</h4>
Se lancer dans Travis <a href="http://docs.travis-ci.com/user/languages/php/" title="Building a PHP project" target="_blank">avec la doc officielle</a>, avec un <a href="http://www.sitepoint.com/php-continuous-integration-travis-ci/" title="PHP and Continuous Integration with Travis CI" target="_blank">tuto assez clair de sitepoint</a>, ou avec un <a href="http://www.grafikart.fr/tutoriels/internet/travis-integration-continue-438" title="Grafikart: Travis CI" target="_blank">tuto vidéo</a>.



<h3>Scrutinizer</h3>

<h4>Fonctionnalités</h4>
<a href="https://scrutinizer-ci.com/" title="Scrutinizer-ci" target="_blank">Scrutinizer</a> est un outil complémentaire à Travis. Et plus particulièrement, il réalise des analyses de code et sort une estimation de la qualité de votre pojet, ainsi que le taux de couverture des tests. Par ailleurs, il propose, davantage comme Travis, d'exécuter des build du code.

<ol>
<li>Code review automatisées
<ul>
	<li>Analyse de la couverture des tests.</li>
	<li>Analyse de la qualité du code.</li>
</ul>
</li>
<li>Intégration continue (service payant)</li>
</ol>

<h4>Config</h4>
Il existe plusieurs possibilités de configurer Scrutinizer. Je vous conseille de simplement placer un fichier de configuration situé à la racine du projet et donc versionné: <a href="https://scrutinizer-ci.com/docs/configuration" title="Scrutinizer - The Configuration File" target="_blank">.scrutinizer.yml</a>. Il existe un <a href="https://scrutinizer-ci.com/config-editor" title="Scrutinizer - Config Editor" target="_blank">éditeur en ligne</a> pour configurer facilement les multiples options de ce fichier.

L'outil est vraiment puissant et <a href="https://scrutinizer-ci.com/docs/guides/php/" title="Getting Started - PHP" target="_blank">assez facilement paramétrable</a>. Par contre, la <a href="https://scrutinizer-ci.com/docs/tools/external-code-coverage/" title="Scrutinizer: External Code Coverage" target="_blank">couverture de code</a> doit se faire via un serveur distant (comme Travis par exemple) pour se passer du service payant de build.

<h4>Intégration</h4>
Scrutinizer est également lancé depuis un hook de GitHub. Tout se fait donc automatiquement.

D'autre part, les issues peuvent être transmises à GitHub pour un report centralisé.

Seul bémol, Scrutinizer est dépendant d'un service externe pour lancer les tests unitaires. Son lancement est donc conditionné au lancement parallèle d'un service comme Travis, sans quoi le build échouera faute d'avoir trouvé un rapport de test.

<h4>Fichiers versionnés</h4>
.scrutinizer.yml

<h4>Doc et tutos</h4>
Se lancer dans Scrutinizer avec la <a href="https://scrutinizer-ci.com/docs/" title="Scrutinizer - Documentation" target="_blank">doc officielle</a>. 


<h3>SensioLabs Insight</h3>

<h4>Fonctionnalités</h4>
<a href="https://insight.sensiolabs.com/" title="SensioLabs Insight" target="_blank">Insight</a> est un outil d'analyse de code qui se targue de procéder également à des analyses dynamiques. Il est vrai que <a href="https://insight.sensiolabs.com/what-we-analyse" title="SensioLabs Insight: analyses" target="_blank">les analyses fournies</a> semblent offrir des possibilités complémentaires aux outils vus précédemment. 

<h4>Config</h4>
Insight peut également se configurer grâce à un fichier situé à la racine du projet : <a href="https://insight.sensiolabs.com/howtos/insight-yml-configuration.html" title="How to customize Insight configuration in your own repository" target="_blank">.insight.yml</a>

<h4>Intégration</h4>
A nouveau,  Insight est lancé depuis un hook de GitHub. Tout se fait donc automatiquement.

Comme Scrutinizer, les issues peuvent être transmises à GitHub.

<h4>Fichiers versionnés</h4>
.insight.yml


<h4>Doc et tutos</h4>
<a href="https://insight.sensiolabs.com/howtos/" title="Getting started with SensioLabsInsight" target="_blank">Se lancer dans Insight</a>



<h2>Les gestionnaires de dépendances</h2>

A l'opposé du <a href="http://fr.wikipedia.org/wiki/Not_Invented_Here" title="Wikipédia: Not Invented Here" target="_blank">Syndrôme NIH</a> ou du fameux <a href="http://fr.wikipedia.org/wiki/R%C3%A9inventer_la_roue" title="Wikipédia: Réinventer la roue" target="_blank">"réinventer la roue"</a>, une application ne se conçoit pas comme un bloc monolithique, mais bien comme la somme d'une multitude de plugins. Votre code est destiné à constituer l'une de ces briques, et s'appuie lui-même sur une série de briques déjà écrites. Ce sont ses dépendances. 

Un système de gestion de dépendances doit répondre à trois problématiques principales:
<ul>
	<li>Un repository distant doit lister les librairies disponibles ainsi que leurs versions.</li>
	<li>Un logiciel doit permettre de télécharger des librairies, en gèrant notamment les incompatibilités et les upgrade de versions.</li>
	<li>Un système d'intégration doit permettre d'utiliser les librairies dans le code.</li>

</ul>

<h3>Composer</h3>
<a href="https://getcomposer.org/" title="Composer" target="_blank">Composer</a> est le gestionnaire de dépendance le plus utilisé pour l'instant dans le monde de PHP. Il a détrôné <a href="http://pear.php.net/" target="_blank">Pear</a> grâce à sa simplicité d'utilisation. Composer répond à deux des problématiques décrites plus haut: il va télécharger les librairies externes selon une version spécifiée, et gérer leur intégration dans votre projet grâce à un autoloader.

<h4>Lister les dépendances</h4>

Composer se base sur un fichier de config <a href="https://getcomposer.org/doc/04-schema.md" title="Composer: composer.json" target="_blank">composer.json</a> qui répertorie les dépendances et leurs versions. 

<pre>
{
    "require": {
        "vendor/package": "2.*"
    }
}
</pre>

Ce fichier est configurable en <a href="https://getcomposer.org/doc/03-cli.md#require" title="Composer: require" target="_blank">ligne de commande</a>:

<pre>
php composer.phar require vendor/package:2.*
</pre>

De plus, selon votre environnement, vous pouvez demander le chargement de librairies spécifiques (require et require-dev).

<h4>Installer les dépendances</h4>

Une simple <a href="https://getcomposer.org/doc/03-cli.md#install" title="Composer: install" target="_blank">ligne de commande</a> permet de télécharger les librairies listées dans votre fichier de config.

<pre>
php composer.phar install
</pre>

Composer les place dans le dossier <a href="http://en.wikipedia.org/wiki/Vendor" title="Wikipédia: vendor" target="_blank"><em>vendor</em></a>. Ce dossier ne doit dès lors pas être versionné, car il revient à Composer de s'occuper d'alimenter les dépendances lors du build du projet.

<h4>Gérer les versions</h4>

<a href="https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file" title="Composer: he Lock File" target="_blank">composer.lock</a> est un fichier de lock de Composer. Il permet de freezer les versions exactes qui sont chargées lors de l'installation initiale des dépendances. Ce freeze contribue à garantir le comportement de l'application après son build, sur base du comportement tel que développé. C'est le processus qu'on privilégiera pour la mise en prod d'une application.

Ainsi, lors de la première installation d'une nouvelle dépendance, Composer ajoute la version téléchargée dans ce fichier. Lorsque l'on rebuildera le projet par la suite, l'installation des dépendances se fera sur base des versions précises telles qu'elles ont été ainsi répertoriées.

Les versions des dépendances peuvent toutefois être mises à jour via la <a href="https://getcomposer.org/doc/03-cli.md#update" title="Composer: update" target="_blank">commande update</a>. Cette commande permet de récupérer la dernière version en date d'une librairie qui corresponde à la définition faite dans le fichier de config <em>composer.json</em>.

Attention, <a href="https://getcomposer.org/doc/02-libraries.md#lock-file" title="Composer: lock file" target="_blank"><em>composer.lock</em> n'a d'effet que pour le projet courant</a>, et pas pour les projets dont il est dépendant. C'est pour cette raison que les librairies de dépendance ne vont pas forcément versionner ce fichier. A l'inverse, une application web doit absolument freezer ses dépendances pour assurer que le comportement de prod soit identique. 

A noter toutefois que, malgré tout, Scrutinizer <a href="https://scrutinizer-ci.com/docs/tools/php/php-analyzer/guides/composer_dependencies" title="Scrutinizer: composer dependancies">recommande de le versionner</a>.

<h4>Loader les dépendances</h4>

Grâce aux <a href="https://github.com/php-fig/fig-standards/tree/master/accepted" title="PSR" target="_blank">PSR 0 et 4</a>, Composer offre un <a href="https://getcomposer.org/doc/01-basic-usage.md#autoloading" title="Composer: autoloading" target="_blank">autoloader des dépendances</a> de votre projet. Il suffit d'inclure le fichier <em>vendor/autoload.php</em>. Nous verrons que ceci peut être facilement réalisé dans le fichier de configuration des tests (car au final, seuls les tests ont besoin, en développement, de ce fichier). Vos dépendances seront ainsi automatiquement chargées selon le <a href="http://php.net/manual/fr/function.spl-autoload-register.php" title="PHP: spl_autoload_register" target="_blank">principe d'autoloadage de PHP</a>.

Par ailleurs, il vous est possible, et même recommandé, d'utiliser Composer pour autoloader vos propres classes. Une fois que votre projet sera lui-même une dépendance, l'application qui l'utilisera pourra ainsi charger votre code de la même sorte, via l'autoloader de Composer. Pour ce faire, vous devez simplement préciser le type de PSR utilisée par votre projet dans le fichier de config de Composer. Nous en verrons un peu plus dans notre prochain article sur les différences entre les deux systèmes de PSR.

<pre>
{
    "autoload": {
        "psr-4": {"Acme\\": "src/"}
    }
}
</pre>

<h4>Lister les settings de PHP</h4>

Un autre très gros avantage de Composer est qu'il permet de <a href="https://getcomposer.org/doc/02-libraries.md#platform-packages" title="Composer: Platform packages" target="_blank">lister les settings de PHP</a>. A savoir:
<ul>
<li>Les versions de PHP/HHVM sous lesquelles tourne le package (ex: php >=5.3.2)</li>
<li>Les extensions/librairies PHP utilisées par le package (ex: ext-pdo ou lib-pcre)</li>
</ul>

Bien évidemment, Composer ne va pas aller installer une extension qui vous manquerait, mais il doit normalement vous signaler le problème.
<pre>
{
    "require": {
        "php": ">=5.3.2",
        "ext-pdo": "*",
        "lib-pcre": "*"
    }
}
</pre>

<h4>Config</h4>
La config de Composer est gérée directement dans le fichier <em>composer.json</em>. Il définit notamment les dépendances et leurs versions.

Le build de Travis est dépendant de Composer, et il est nécessaire de demander explicitement l'installation des dépendances dans son propre <a href="http://docs.travis-ci.com/user/languages/php/#Installing-Composer-packages" title="Installing Composer packages" target="_blank">fichier de config</a>:

<pre>
before_script:
  - composer self-update
  - composer install
</pre>

Le fichier <em>vendor/autoload.php</em> doit être inclus comme bootstrap de votre libraire, mais uniquement pour les tests. Par ailleurs, votre projet doit préciser le type PSR utilisée pour son propre autoloadage.


<h4>Fichiers versionnés</h4>
composer.json doit être absolument inclus. 
composer.lock qui n'est pas nécessaire pour les librairies (mais l'est pour les app).
Le dossier vendor doit impérativement être exlu, car il sera reconstruit lors de chaque build.
composer.phar doit également être exclu, si jamais il est stocké, par facilité, à l'intérieur du projet.

<h4>Doc et tutos</h4>

Découvrir Composer avec <a href="https://getcomposer.org/doc/00-intro.md" title="Composer: getting started" target="_blank">la doc officielle</a>, <a href="https://getcomposer.org/doc/02-libraries.md" title="Composer: Librairies" target="_blank">la doc pour les librairies</a>, ou avec <a href="http://www.grafikart.fr/tutoriels/php/composer-480" title="Garfikart: Composer" target="_blank">un tuto vidéo</a>.
Une <a href="http://www.youtube.com/watch?v=4LQjWVbp6gw&list=UUb-D560WkMEPE7dwNta_nqA" title="Composer Best Practices - Jordi Boggiano" target="_blank">conférence sur les bonnes pratiques</a> de Composer.

<h3>Packagist</h3>

<a href="https://packagist.org/" title="Packagist" target="_blank">Packagist</a> est le pendant de Composer. C'est lui qui liste les librairies disponibles. (A noter qu'il est possible de <a href="https://getcomposer.org/doc/05-repositories.md#hosting-your-own" title="Composer: Hosting your own" target="_blank">se passer de Packagist</a> depuis Composer en utilisant par exemple GitHub ou <a href="https://toranproxy.com/" title="Toran Proxy" target="_blank">Toran Proxy</a>). C'est ce qui permet de partager votre code. Dès lors que votre librairie est publiée sur GitHub, vous pouvez en préciser très facilement les différentes versions et les proposer au téléchargement de Composer via Packagist.

<h4>Intégration</h4>

Packagist fonctionne également en harmonie avec GitHub. Il suffit de rajouter une projet GitHub, ainsi qu'un système de hook pour que vos versions soient automatiquement disponibles.

<h4>Versions</h4>

Pour définir les versions téléchargeables, Packagist se base sur les tag git. Un tag est une version (c'est-à-dire un point dans le temps qui ne doit plus changer). 

A noter que le numéro de vos versions ne doit par contre <a href="https://getcomposer.org/doc/02-libraries.md#specifying-the-version" title="Composer: version" target="_blank">pas se trouver dans le fichier composer.json</a>, car il interférera avec les tags Git.

GitHub vous permet de <a href="https://help.github.com/articles/creating-releases/" title="GitHub - creating releases" target="_blank">créer à la volée une version</a>, en y associant une description. C'est la méthode la plus facile et la plus complète, selon moi.

Il est important de normaliser ses <a href="http://fr.wikipedia.org/wiki/Version_d'un_logiciel" title="Wikipédia: Version d'un logiciel" target="_blank">numéros de version</a> selon la <a href="http://semver.org/" title="Semantic Versioning 2.0.0" target="_blank">Semantic Versioning 2.0.0 (SemVer)</a>. Il s'agit (en simplifiant) d'un système essentiellement basé  sur 3 nombres séparés par des points (par exemple &quot;2.1.5&quot;) définissant de manière logique les modifications que peut subir un code:

<ul>
	<li>Le premier numéro  correspond à la version majeure. Un saut de version majeure implique des modifications dans votre API.</li>
	<li>Le deuxième numéro correspond à la version mineure. Un saut de version mineure implique l'ajout de fonctionnalités, tout en assurant la rétrocompatibilité.</li>
	<li>Le troisième numéro correspond à des patch apportés. Il s'agit de corrections de bug.</li>
</ul>

C'est sur cette base que Composer propose un <a href="https://getcomposer.org/doc/01-basic-usage.md#package-versions" title="Composer: Package Versions" target="_blank">système de pattern</a> pour définir les dépendances de versions dans son fichier de config. Il est conseillé d'utiliser la contrainte de version "~" (Tilde Operator).

Enfin, un <a href="https://getcomposer.org/doc/02-libraries.md#tags" title="Composer: Tags" target="_blank">système de suffixe</a> (<em>alpha, patch</em>, etc) peut être ajouté au numéro de version. Ces suffixes indiquent que la version n'est pas encore stable (dev -> alpha -> beta -> RC -> stable), et, par défaut, empêcheront qu'elle soit <a href="https://getcomposer.org/doc/01-basic-usage.md#stability" title="Composer: stability" target="_blank">prise en considération</a> par Composer.

<h3>Monitoring des dépendances</h3>

Il existe plusieurs services de monitoring des dépendances. L'idée est d'informer sur l'état des dépendances d'un projet.


Par exemple, <a href="https://www.versioneye.com/ " title="versioneye" target="_blank">VersionEye</a> permet deux choses:
<ul>
<li>Comme Packagist, une vision sur les dépendances d'un projet. Mais, en plus, VersionEye indique (en se basant sur le fichier composer.lock) si ses dépendances sont à jour.</li>
<li>Un aperçu du nombre de librairies dépendantes.</li>
</ul>

Un autre exemple: <a href="http://depending.in/" title="Depending" target="_blank">Depending</a> qui travaille spécifiquement avec Composer.

<h2>Conclusions</h2>

Les différents outils que nous avons vus se complètent tous pour offrir la possibilité d'installer un système de build automatique. C'est ce qu'on appelle l'intégration continue (il nous manque encore les tests automatiques que nous verrons bientôt). Cela se base sur un système de versionning (Git), un système de repository de code (GitHub), un système de gestion dépendances (Composer), un serveur d'analyse du code (Scrutinizer/Insight), ainsi qu'un serveur de build (Travis). Ces différents outils s'interconnectent facilement et se configurent assez rapidement.

Nous verrons bientôt l'organisation interne de notre package, des différents fichiers sources et tests.

Je me permets de rappeler que les bonnes pratiques décrites ici sont rassemblées dans un <a href="https://github.com/Raphhh/php-lib-bootstrap" title="php-lib-bootstrap" target="_blank">projet GitHub</a>.

Enfin, n'hésitez pas à compléter cet article de vos commentaires! :-)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2383</wp:post_id>
		<wp:post_date>2014-10-14 09:20:39</wp:post_date>
		<wp:post_date_gmt>2014-10-14 08:20:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bien-debuter-sa-lib-php-part-i-les-outils</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="autoloading"><![CDATA[autoloading]]></category>
		<category domain="category" nicename="bien-debuter-sa-lib-php"><![CDATA[Bien débuter sa lib PHP]]></category>
		<category domain="post_tag" nicename="coding-style"><![CDATA[coding style]]></category>
		<category domain="post_tag" nicename="composer"><![CDATA[composer]]></category>
		<category domain="post_tag" nicename="depending"><![CDATA[depending]]></category>
		<category domain="post_tag" nicename="editorconfig"><![CDATA[editorconfig]]></category>
		<category domain="post_tag" nicename="file-encoding"><![CDATA[file encoding]]></category>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="post_tag" nicename="git-2"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="post_tag" nicename="ide"><![CDATA[ide]]></category>
		<category domain="post_tag" nicename="industrialisation"><![CDATA[industrialisation]]></category>
		<category domain="post_tag" nicename="insight"><![CDATA[insight]]></category>
		<category domain="post_tag" nicename="integration-continue"><![CDATA[intégration continue]]></category>
		<category domain="post_tag" nicename="line-separator"><![CDATA[line separator]]></category>
		<category domain="post_tag" nicename="packagist"><![CDATA[packagist]]></category>
		<category domain="post_tag" nicename="phpstorm"><![CDATA[phpstorm]]></category>
		<category domain="post_tag" nicename="psr"><![CDATA[PSR]]></category>
		<category domain="post_tag" nicename="scrutinizer"><![CDATA[scrutinizer]]></category>
		<category domain="post_tag" nicename="sensiolabs"><![CDATA[sensiolabs]]></category>
		<category domain="post_tag" nicename="travis"><![CDATA[travis]]></category>
		<category domain="post_tag" nicename="versioneye"><![CDATA[versioneye]]></category>
		<category domain="post_tag" nicename="versionning"><![CDATA[versionning]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_raven_schema_load</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[intégration continue, travis, scrutinizer, industrialisation, git, github, composer, PSR, packagist]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Un aperçu des principaux outils disponibles pour assurer l'intégration continue d'un projet open-source.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3942</wp:comment_id>
			<wp:comment_author><![CDATA[Bien débuter sa lib PHP: Intro]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/bien-debuter-sa-lib-php-intro/</wp:comment_author_url>
			<wp:comment_date>2014-10-14 09:25:09</wp:comment_date>
			<wp:comment_date_gmt>2014-10-14 08:25:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent Suivant &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413275274.79918;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24192</wp:comment_id>
			<wp:comment_author><![CDATA[JC]]></wp:comment_author>
			<wp:comment_author_email>Zbub@yahoo.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2018-04-18 18:49:08</wp:comment_date>
			<wp:comment_date_gmt>2018-04-18 17:49:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[c'est la mer noire]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1524073748.840178;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Les petites choses marrantes en PHP: tester une string</title>
		<link>http://www.thedarksideofthewebblog.com/les-petites-choses-marrantes-en-php-tester-une-string/</link>
		<pubDate>Mon, 15 Sep 2014 11:04:19 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2428</guid>
		<description></description>
		<content:encoded><![CDATA[Dans notre <a href="http://www.thedarksideofthewebblog.com/simplifiez-vos-conditions/" title="Simplifiez vos conditions">précédent article</a>, nous avions vu plusieurs astuces pour simplifier nos conditions, en utilisant quelques règles de typage. Toutefois, il ne faut pas croire que tout soit aussi systématique. Il existe des pièges qu'il s'agit d'éviter.

L'occasion idéale pour un nouvel article de notre série <a href="http://www.thedarksideofthewebblog.com/menu/php/les-petites-choses-marrantes-en-php/" title="Les petites choses marrantes en PHP">Les petites choses marrantes en PHP</a>, consacrées aux petites choses marrantes en PHP, avec quelques exemples de petites choses marrantes en matière de test sur des string.

Mais attention, que les choses soient bien claires: comme tous les articles de cette série, il ne s'agit pas de troll! Juste de faire gaffe…


<h2>Comment tester une string vide?</h2>

Vous voulez écrire une condition qui ne laisse passer que les <em>string</em> qui ne sont pas vides. Simple, me diriez-vous? Pas si sûr...

<h3>Test sur la variable</h3>
Commençons avec une écriture dépouillée: on teste juste une variable dans une condition. 
[cc lang='php' ]
if($str){
	...
}
[/cc]

<h4>Ma string vaut &quot;&quot;</h4>

Que va-t-il se passer? Notre variable va être castée dynamiquement en booléen. Une string vide castée en booléen va effectivement retourner false. Le test est correct.

[cc lang='php' ]
$str = '';

if($str){
	//ok, je n'entre pas dans la condition avec une string vide
}
[/cc]


<h4>Ma string vaut &quot;0&quot;</h4>

Nous sommes d'accord qu'une string équivalant à &quot;0&quot; ne peut pas être considérée comme vide. Toutefois, en PHP, caster une string &quot;0&quot; en booléen va retourner <em>false</em>. Eh oui... (même chose avec la fonction empty). Autrement dit, on n'entre pas dans la condition alors que la string n'est pas vide. Le test n'est pas correct.

[cc lang='php' ]
$str = '0';

if($str){
	//oups, je n'entre pas dans la condition alors que ma string n'est pas vide
}
[/cc]

Marrant, non?

<h3>Comparaison stricte</h3>

On améliore notre test en précisant qu'on veut exclure spécifiquement les string vides.

[cc lang='php' ]
if($str !== ''){
	...
}
[/cc]
<h4>Ma string vaut &quot;0&quot;</h4>

Du coup, le &quot;0&quot; n'est plus considéré comme une string vide.  Cette fois-ci, le test est correct.
[cc lang='php' ]
$str = '0';

if($str !== ''){
	//ok, j'entre dans la condition
}
[/cc]

<h4>Ma string vaut null</h4>
Il existe malgré tout encore un piège. Tout va dépendre de la question suivante: voulez-vous accepter d'autres scalaires équivalents à <em>false</em> qui soient d'un autre type que string (<em>false, null, 0, &quot;&quot;</em>)? En effet, si on teste la variable avec une comparaison stricte, on autorise d'autres types à rentrer dans la condition. Par exemple, <em>null</em> n'est pas strictement égale à &quot;&quot;. Donc, on entre dans la condition.  Le test n'est pas correct.

[cc lang='php' ]
$str = null;

if($str !== ''){
	//oups, j'entre dans la condition alors que ma valeur vaut null
}
[/cc]

Marrant, non?

<h3>Comparaison laxiste</h3>

Seule la comparaison laxiste permet ici d'accepter les string &quot;0&quot;, tout en refusant les string vides ainsi que les scalaires ayant une valeur équivalente à <em>false</em>.

[cc lang='php' ]
if($str != ''){
	...
}
[/cc]
<h4>Ma string vaut null</h4>
Du coup, <em>null</em> ne pose plus de problème.  Le test redevient correct.
[cc lang='php' ]
$str = null;

if($str != ''){
	//ok, je n'entre pas dans la condition
}
[/cc]


<h4>Ma string vaut array</h4>
Il reste malgré tout encore un piège. :) Si notre variable vaut un <em>array</em> (ou potentiellement un objet implémentant <a href="http://php.net/manual/fr/language.oop5.magic.php#object.tostring" title="PHP: __toString" target="_blank">__toString</a>), la conversion se fait du tableau vers la string. Or, caster un tableau en string retourne toujours la string "Array" (avec heureusement une notice depuis PHP 5.4, mais attention toutefois que cette notice ne se déclenche évidemment pas lors d'une comparaison laxiste). Dommage, on aurait préféré une string vide. Le test n'est donc pas correct.

[cc lang='php' ]
$str = array();

if($str != ''){
	//oups,j'entre dans la condition
}
[/cc]

Marrant, non?

<h3>Comparaison stricte et test sur le type</h3>
La seule façon de s'assurer qu'aucun cas ne pose problème réside dans le test du type de la variable suivi par une comparaison stricte.  Le test devient enfin correct.

[cc lang='php' ]
if(is_string($str) && $str !== ''){
	...
}
[/cc]

Au final, la solution n'est pas très intuitive et l'écriture de la condition n'est pas très claire. On se retrouve à l'exacte opposé de ce qui était préconisé dans l'article sur <a href="http://www.thedarksideofthewebblog.com/simplifiez-vos-conditions/" title="Simplifiez vos conditions">la simplification des conditions</a>. Bien sûr, il s'agit d'adapter son test à chaque cas. Tous les contextes d'exécution n'ont pas forcément besoin d'autant de mesures de sécurité.




<h2>Comment tester une string non-vide?</h2>

Deuxième condition: vous voulez vous assurer d'avoir une <em>string</em> équivalente à &quot;abc&quot;. L'enfance de l'art, me diriez-vous? Pas si sûr...

Il existe en effet un piège (juste un seul cette fois) : l'utilisation d'une comparaison laxiste.
[cc lang='php' ]
if($str == 'abc'){
	...
}
[/cc]

En effet, si notre variable vaut <em>true</em>, le cast se fera vers le booléen. Une string non vide équivalant à <em>true</em>, vous entrez dans la condition.

[cc lang='php' ]
$str = true;

if($str == 'abc'){
	//oups, j'entre dans la condition
}
[/cc]

Marrant, non?

<h2>Conclusion</h2>

Le principal problème réside dans l'inconnue du typage de la valeur testée. <a href="http://php.net/manual/fr/language.types.type-juggling.php" title="Manipulation de types" target="_blank">La précédence des types</a> ainsi que certaines conversions particulières peuvent créer des effets non désirés. Les conversions entre types ne sont pas toujours évidentes. La documentation de PHP propose notamment un <a href="http://php.net/manual/fr/types.comparisons.php" title="Comparaison de types en PHP" target="_blank">tableau de comparaison des types</a> qu'il est intéressant de relire régulièrement. Il convient donc de rester toujours prudent si le code n'est pas correctement sécurisé.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2428</wp:post_id>
		<wp:post_date>2014-09-15 12:04:19</wp:post_date>
		<wp:post_date_gmt>2014-09-15 11:04:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-petites-choses-marrantes-en-php-tester-une-string</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="typage_php"><![CDATA[Le typage en PHP]]></category>
		<category domain="category" nicename="les-petites-choses-marrantes-en-php"><![CDATA[Les petites choses marrantes en PHP]]></category>
		<category domain="post_tag" nicename="typage"><![CDATA[typage]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[typage]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Voyons pourquoi une comparaison de string n'est pas aussi simple qu'il n'y paraît]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_sevajol.bastien@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2014-09-26 11:04:37|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3708</wp:comment_id>
			<wp:comment_author><![CDATA[bux]]></wp:comment_author>
			<wp:comment_author_email>sevajol.bastien@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.bux.fr</wp:comment_author_url>
			<wp:comment_date>2014-09-26 11:04:37</wp:comment_date>
			<wp:comment_date_gmt>2014-09-26 10:04:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah le bon vieux typage dynamique. Simple en apparence ^^
Ca me rappelle un code que j'ai débuggé cette semaine qui se comportait mal, car un string vide c'était glissé a la place d'un tableau. Et il faut savoir qu'un count() sur une string vide ... Ca ne vaut pas 0 !

php &gt; var_dump(count(''));
int(1)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411725877.830044;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411727873.7009659;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bonnes pratiques Composer: gérer les versions</title>
		<link>http://www.thedarksideofthewebblog.com/bonnes-pratiques-composer-gerer-les-versions/</link>
		<pubDate>Thu, 20 Aug 2015 10:29:23 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2728</guid>
		<description></description>
		<content:encoded><![CDATA[On ne présente plus <a href="https://getcomposer.org/" title="Composer" target="_blank">Composer</a>, la star des gestionnaires de dépendance en PHP. Composer permet de télécharger toutes vos dépendances très facilement, et possède un solveur de dépendance plutôt malin. Il travaille souvent en binôme avec <a href="https://packagist.org/" title="Packagist" target="_blank">Packagist</a> qui liste les projets, notamment depuis un compte <a href="https://github.com/" title="GitHub" target="_blank">GitHub</a>.

Par contre, il est toujours une question un peu délicate lorsque l'on liste ses dépendances: doit-on figer leur version, au risque d'une trop rapide obsolescence? Ou être plus laxiste, au risque de provoquer des incompatibilités? Bref, comment gérer ses versions?

Je vous propose cette fois-ci un petit mot d'explication sur tout ce que la gestion de version implique avec Composer, dans une liste de petits articles:

<ul>
    <li><a href="http://www.thedarksideofthewebblog.com/quest-ce-quune-version/" title="Précédent Qu’est-ce qu’une « version »?">Qu’est-ce qu’une « version »?</a></li>
    <li><a href="http://www.thedarksideofthewebblog.com/quelles-versions-de-dependance-specifier-avec-composer/" title="Quelles versions de dépendance spécifier dans Composer?">Quelles versions de dépendance spécifier dans Composer?</a></li>
    <li><a href="http://www.thedarksideofthewebblog.com/comment-manager-les-versions-de-dependance-avec-composer/" title="Comment manager les versions de dépendance avec Composer?">Comment manager les versions des dépendances avec Composer?</a></li>
</ul>

Bientôt sur tous vos écrans!



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2728</wp:post_id>
		<wp:post_date>2015-08-20 11:29:23</wp:post_date>
		<wp:post_date_gmt>2015-08-20 10:29:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bonnes-pratiques-composer-gerer-les-versions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="composer"><![CDATA[composer]]></category>
		<category domain="category" nicename="composer-php"><![CDATA[Composer]]></category>
		<category domain="post_tag" nicename="depending"><![CDATA[depending]]></category>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="post_tag" nicename="integration-continue"><![CDATA[intégration continue]]></category>
		<category domain="post_tag" nicename="packagist"><![CDATA[packagist]]></category>
		<category domain="post_tag" nicename="versionning"><![CDATA[versionning]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[composer, versionning, intégration continue, packagist, depending]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Introduction d'une série d'articles relatifs à la gestion des versions avec Composer, un gestionnaire de dépendances PHP]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15611</wp:comment_id>
			<wp:comment_author><![CDATA[Qu&rsquo;est-ce qu&rsquo;une &laquo;&nbsp;version&nbsp;&raquo;?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/quest-ce-quune-version/</wp:comment_author_url>
			<wp:comment_date>2015-09-18 20:16:21</wp:comment_date>
			<wp:comment_date_gmt>2015-09-18 19:16:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1445865953.219022;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Les petites choses marrantes en PHP: les entrées non-définies</title>
		<link>http://www.thedarksideofthewebblog.com/les-petites-choses-marrantes-en-php-les-entrees-non-definies/</link>
		<pubDate>Sat, 04 Apr 2015 11:27:11 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2757</guid>
		<description></description>
		<content:encoded><![CDATA[Continuons notre série <a href="http://www.thedarksideofthewebblog.com/menu/php/les-petites-choses-marrantes-en-php/" title="Les petites choses marrantes en PHP">Les petites choses marrantes en PHP</a>, consacrées aux petites choses marrantes en PHP, avec quelques exemples de petites choses marrantes en matière d'entrées non-définies.

Mais attention, que les choses soient bien claires: il ne s'agit pas de troll! Juste de faire gaffe…

<h2>Lire une entrée</h2>

<h3>Depuis un array vide</h3>

Tout le monde sait qu'essayer d'accéder à une clé non-définie est mal. Cela provoque d'ailleurs une notice.

[cc lang='php' ]
$var = array();
$var['blurp']; //Notice:  Undefined index: blurp
var_dump($var); //array(0) {}
[/cc]

<h3>Depuis une variable null</h3>
Pourtant, si la variable vaut <em>null</em>, plus de notice...

[cc lang='php' ]
$var = null;
$var['blurp']; //pas de notice
var_dump($var); //null
[/cc]

Marrant, non?

<h3>Et avec un object</h3>

Par contre, si on essaie d'accéder à un attribut de <em>null</em>, ce coup-ci, on a bien une notice. Les traitements de l'objet et de l'array diffèrent.

[cc lang='php' ]
$var = null;
$var->blurp; //Notice: Trying to get property of non-object
var_dump($var); //null
[/cc]

Marrant, non?

<h3>Depuis une string</h3>

Pour les string, là c'est bien plus grave. Nous avons droit à un warning à la place d'une notice...

[cc lang='php' ]
$var = '';
$var['blurp']; //Warning: Illegal string offset 'blurp'
var_dump($var); //string(0) ""
[/cc]

Marrant, non?


<h2>Assigner une entrée</h2>

<h3>Tel un array</h3>

Si on assigne une entrée à une variable null, on initialise un array, et ce sans notice.

[cc lang='php' ]
$var = null;
$var['blurp'] = 'lol'; //pas de notice
var_dump($var); //array(1) { ["blurp"] => string(3) "lol" }
[/cc]

<h3>Tel un object</h3>

A l'inverse, si on prend la variable pour un objet, c'est un warning qui hurle. (A noter qu'avant 5.4, on aurait eu droit à "Strict Standards: Creating default object from empty value".) A nouveau, les traitements de l'objet et de l'array diffèrent.

[cc lang='php' ]
$var = null;
$var->blurp = 'lol'; //Warning: Creating default object from empty value
var_dump($var); //object(stdClass)#1 (1) { ["blurp"] => string(3) "lol"}
[/cc]

Marrant, non?

<h2>Modifier une string</h2>

Les string sont manipulables comme des tableaux? Presque... On peut effectivement boucler sur une string et récupérer chaque caractère. Mais l'assignation est un peu plus complexe...

<h3>Avec une string vide</h3>

Malheureusement, comme dans les exemples précédents, on caste la variable en array.

[cc lang='php' ]
$var = '';
$var[0] = 'l'; //pas de notice
var_dump($var); //var_dump($var); //array(1) { [0] => string(1) "l" }
[/cc]

<h3>Avec une string non-vide</h3>

Pourtant, si la string n'est pas vide, ça marche!

[cc lang='php' ]
$var = 'e';
$var[0] = 'l'; //pas de notice
var_dump($var); //string(1) "l"
[/cc]

Marrant, non?

<h2>Conclusion</h2>

Euh... le conseil de l'année: Initialisez bien... ^^
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2757</wp:post_id>
		<wp:post_date>2015-04-04 12:27:11</wp:post_date>
		<wp:post_date_gmt>2015-04-04 11:27:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-petites-choses-marrantes-en-php-les-entrees-non-definies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="array"><![CDATA[array]]></category>
		<category domain="category" nicename="les-petites-choses-marrantes-en-php"><![CDATA[Les petites choses marrantes en PHP]]></category>
		<category domain="post_tag" nicename="object"><![CDATA[object]]></category>
		<category domain="post_tag" nicename="string"><![CDATA[string]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[array, string, object]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Tiens, et si on initialisait mal?]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Les mocks sont-ils nos amis?</title>
		<link>http://www.thedarksideofthewebblog.com/les-mocks-sont-ils-nos-amis/</link>
		<pubDate>Thu, 04 Jun 2015 10:37:33 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2799</guid>
		<description></description>
		<content:encoded><![CDATA[Au début, lorsque j'ai commencé à tester mon code, j'éprouvais un certain sentiment de sécurité. J'avais l'impression de coder avec un filet de sécurité, mon code était plus sûr. :-D

Toutefois, même si tous les tests passaient individuellement, un code composé de nombreuses classes pouvait mal se comporter, car les différentes pièces ne s’emboîtaient pas toujours très bien. Un peu comme si, en construisant une voiture, on avait bien unit-testé le clignoteur, mais qu'on l'avait monté au milieu du capot... (Par contre, qu'est-ce qu'il clignote bien mon cligno!)

<a href="https://twitter.com/gbevin/status/599440696618184704" title="Unit testing in a nutshell! " target="_blank"><video name="media" class="aligncenter" data-height="204" data-width="280" loop src="https://pbs.twimg.com/tweet_video/CFGkIvLUMAATRpF.mp4">
  <source video-src="https://pbs.twimg.com/tweet_video/CFGkIvLUMAATRpF.mp4" type="video/mp4" class="source-mp4" src="https://pbs.twimg.com/tweet_video/CFGkIvLUMAATRpF.mp4">
</video>
</a>

C'est là qu'est apparu tout l'intérêt des tests d'intégration: Est-ce que le comportement global fonctionnait dans sa longue liste d'actions? Est-ce que la cohérence du tout était assuré dans son ensemble? Avec de nouvelles questions qui arrivaient cependant: est-ce que les test unitaires conservent toute leur raison d'être? A partir de quand unit-tester, et quand "global"-tester? Le code doit-il alors être couvert deux fois par des tests redondants?

Beaucoup de questions où les bonnes pratiques se heurtent à la réalité d'entreprise. La réalité, c'est qu'il faut tester ce qui est pertinent d'une part, et réaliser des tests pertinents d'autre part. Je ne sais pas s'il existe des règles théoriques pour cela...?

Quoiqu'il en soit, loin de vouloir donner de grands conseils ou d'édicter de grandes règles que je connais pas, voici juste un petit exemple simpliste à propos des mocks: <strong>Comment introduire un bug avec 100% de coverage?</strong> (oui c'est possible!) Juste histoire de faire gaffe, parce que les mocks n'ont pas que des avantages...

<h2>Step 1: tout va bien!</h2>

<h3>Classe A</h3>
On a ce petit code (mais imaginez que le code est trèèès compliqué):

[cc lang='php' ]
class A
{
    function foo()
    {
        echo 'foo';
    }
}
[/cc]

Très facile à tester:

[cc lang='php' ]
class ATest extends PHPUnit_Framework_TestCase
{
    function testFoo()
    {
        $a = new A();
        $this->expectOutputString('foo');
        $a->foo();
    }
}
[/cc]

<h3>Classe B</h3>

La classe A est utilisée par la classe B à l'aide d'une injection de dépendance:

[cc lang='php' ]
class B
{
    private $a;
    
    function __construct(A $a)
    {
        $this->a = $a;
    }
    
    function bar()
    {
        $this->a->foo();
        echo '-bar';
    }
}
[/cc]

Son utilisation:

[cc lang='php' ]
$b = new B(new A());
$b->bar(); //"foo-bar"
[/cc]

Pour tester la fonction "bar", on utilise un joli mock de A pour isoler le comportement des classes, et tout est super cool. Quand on appelle "bar", on teste aussi l'appel de "foo".

[cc lang='php' ]
class BTest extends PHPUnit_Framework_TestCase
{
    function testBar()
    {
        $mockedA->expects($this->once())
            ->method('foo')
            ->will($this->returnCallback(function(){
                    echo 'foo';
                })
            );

        $b = new B($mockedA);
        $this->expectOutputString('foo-bar');
        $b->bar();

    }
}
[/cc]

Bien sûr, un tel code, si simple, n'a pas besoin de mock... C'est juste un exemple simpliste que vous devez essayer de transposer dans un code ample et complexe.

Au final, ce qu'il faut retenir, c'est que nous avons un coverage à 100%. (on peut être fier!)



<h2>Step 2: tout va bien... ah ben non!</h2>

Puis, deux ou trois mois plus tard, quand tout le monde a oublié comment marchait ce code, quelqu'un vient modifier la classe A. Sans grande inquiétude puisque le code est bien testé!

[cc lang='php' ]
class A
{
    function foo()
    {
        return 'foo';
    }
}
[/cc]

Plus de "echo" mais un "return"! 

Du coup, bien évidemment, son test est en erreur:

[cc]
There was 1 failure:

1) ATest::testFoo
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'foo'
+''
[/cc]

Mais on corrige ça très facilement:

[cc lang='php' ]
class ATest extends PHPUnit_Framework_TestCase
{
    function testFoo()
    {
        $a = new A();
        $this->assertSame('foo', $a->foo());
    }
}
[/cc]

Et nous n'avons plus d'erreur dans nos tests... Pourtant la classe B ne fonctionne plus!

[cc lang='php' ]
$b = new B(new A());
$b->bar(); //"bar" (et plus "foo-bar")
[/cc]

<h2>Le problème</h2>

Le problème, c'est que la classe A a changé de contrat, et son fonctionnement n'est plus le même. Tandis que son mock se comporte toujours comme son implémentation d'origine.

La classe B correspond donc toujours au comportement donné par ce mock et le test est bon. Nous avons été dupés par le mock!

Mais comment l'auteur des modifications pouvait-il être au courant que ce mock n'est plus valide? Rien dans les tests ne l'indique... Surtout que, étant donné le coverage de 100%, on se reposait justement sur les tests unitaires pour effectuer sans risque les modifications dans l'ensemble du code.

Donc, nous avons introduit un bug dans un code testé à 100%...


<h2>Conclusion</h2>

On a tendance à utiliser les mocks pour simplifier les tests unitaires, et ne tester explicitement que le code propre à la classe.

Toutefois, l'utilisation des mocks est à double tranchant. Rien ne garantit que l'objet est correctement mocké. Rien ne garantit que le mock représente effectivement le comportement de sa classe.

Et, en cas de modification de la classe mockée, ses mocks peuvent potentiellement être à revoir.

Les tests d'intégration demeurent la seule possibilité d'être avertit d'un souci d'interaction entre différentes classes.

<script>
var v = document.getElementsByTagName("video")[0];
v.play();
</script>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2799</wp:post_id>
		<wp:post_date>2015-06-04 11:37:33</wp:post_date>
		<wp:post_date_gmt>2015-06-04 10:37:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-mocks-sont-ils-nos-amis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coverage"><![CDATA[coverage]]></category>
		<category domain="category" nicename="les-bonnes-pratiques-en-php"><![CDATA[Les bonnes pratiques en PHP]]></category>
		<category domain="post_tag" nicename="mock"><![CDATA[mock]]></category>
		<category domain="post_tag" nicename="phpunit"><![CDATA[PHPUnit]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[unit testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[unit testing, phpunit, coverage, mock]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment introduire un bug avec 100% de coverage? Un exemple d’utilisation de mock à double tranchant…]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_petitcolas.jonathan@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2015-06-05 08:59:04|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12970</wp:comment_id>
			<wp:comment_author><![CDATA[LGnap]]></wp:comment_author>
			<wp:comment_author_email>lgnap@helpcomputer.org</wp:comment_author_email>
			<wp:comment_author_url>http://lgnap.helpcomputer.org</wp:comment_author_url>
			<wp:comment_date>2015-06-04 13:32:28</wp:comment_date>
			<wp:comment_date_gmt>2015-06-04 12:32:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Même si oui en effet tu tentes de suggérer que ce sont des tests d'intégrations qui devraient couvrir ce genre de cas (et tu as raison) je pense que tu minimises la responsabilité du développeur dans l'histoire.

En effet si tu modifies le contrat d'une fonction ou d'une classe donnée c'est à toi de vérifier si tu impactes ou pas le code(Alt + F7 sur les bons IDEs).

De plus un test unitaire écrit correctement aura d'office une fonction getAMock() qui DOIT avoir: 
 - le FQDN de ta classe au niveau du call de getMock() (peut être un IDE pourrait il aider dans ce sens)
 - un tag @return dans les commentaires pour préciser le type renvoyé: celui ci serait défini à 'A' et on aurait donc trace de son utilisation dans le test.
 
 Dans les deux cas c'est au développeur de regarder et corriger les éventuels impacts.
 
 C'est aussi pour cela qu'il est très important que ton IDE sache en permanence avec quel objet tu travailles que ce soit pas typehinting ou via les tags @return ou @var. Et pour cela que les Pimple et autres dependency injection container doivent être tjrs défini à un moment ou à un autre.
 Un petit 
 
[cc lang='php' ]
 /** @return EntityManager */
public function getEntityManager(){
    return $this-&gt;container['entity_manager'];
}[/cc]

 est capital pour ne pas avoir des soucis de contrats mal respectés.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433421148.615869;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13010</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan Petitcolas]]></wp:comment_author>
			<wp:comment_author_email>petitcolas.jonathan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jonathan-petitcolas.com</wp:comment_author_url>
			<wp:comment_date>2015-06-05 08:59:04</wp:comment_date>
			<wp:comment_date_gmt>2015-06-05 07:59:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[À mon sens, les tests d'intégrations doivent servir à tester le parcours optimal, c'est à dire quand toutes les données sont correctes. Cela permet de vérifier qu'aucune grosse erreur n'est présente. Les tests unitaires eux servent à vérifier le comportement de la classe dans tous les cas, fonctionnement normal et cas d'erreur.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433491144.397244;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433491254.4387839;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13011</wp:comment_id>
			<wp:comment_author><![CDATA[Swanny Lorenzi]]></wp:comment_author>
			<wp:comment_author_email>swanny@lorenzi-le.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2015-06-05 09:19:49</wp:comment_date>
			<wp:comment_date_gmt>2015-06-05 08:19:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[En relisant ça je me demande si le pb ne vient pas d'un mélange au niveau des TU de la classe B.

Normalement, les TU de B ne doivent concerner que la classe B, et uniquement sa spec, son contrat.
Y inclure un mock de la classe A - bien qu'a priori imposé par l'injection de dépendance - n'est elle pas une erreur ? Car quelque part, on inclus la spec de A dans les TU de B. Donc on "teste" A dans les TU de B. =&gt; ce n'est plus unitaire.

Est-ce qu'il ne vaudrait pas mieux définir le(s) mock(s) de A dans les TU de A, et importer ce mock dans les TU de B, de la meme façon qu'on importe A dans la classe B dans le code "officiel" ?

Dans ce cas, quand un développeur touche au contrat de A dans le code réel, il modifie aussi les TUs de A, et les mocks de A dans le meme temps. Et peut ensuite voir les impacts sur tous les codes utilisant A.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433492389.417958;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433492987.5372441;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13013</wp:comment_id>
			<wp:comment_author><![CDATA[Swanny Lorenzi]]></wp:comment_author>
			<wp:comment_author_email>swanny@lorenzi-le.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2015-06-05 09:54:45</wp:comment_date>
			<wp:comment_date_gmt>2015-06-05 08:54:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bon je me relis et c'est peut être pas très clair.
Ce que je voulais dire, c'est que TestB inclus une définition de A qu'il ne devrait pas inclure.

Dans le code officiel vous avez surement une structure du genre :
fichier A.class.php :
[cc lang='php' ]
class A {
    ...
}
[/cc]
fichier B.class.php :
[cc lang='php' ]
require_once('A'); // voire même pas de require avec un autoload
class B {
    ...
}
[/cc]
Il ne viendrait même pas à l'esprit d'écrire :
fichier B.class.php :
[cc lang='php' ]
Class A {} // sachant qu'en plus ça provoque une erreur PHP "class A déjà définie ailleurs".
Class B {}
[/cc]
Or c'est ce que vous faites dans les TU de B :
TestB.php :
[cc lang='php' ]
class testB {
    testB() {
        définition classe A (le mock)
        test
    }
}
[/cc]
A la place, il vaudrait mieux un truc du genre :
fichier mockA.php :
[cc lang='php' ]
// définition du/des mock
[/cc]
fichier testB.php :
[cc lang='php' ]
require('mockA');
class TestB {}
[/cc]

Et ça fait le café :p

(mockA, café... *sort*)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433494485.3594551;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13014</wp:comment_id>
			<wp:comment_author><![CDATA[Tony Bonucci]]></wp:comment_author>
			<wp:comment_author_email>tony.bonucci@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2015-06-05 10:09:42</wp:comment_date>
			<wp:comment_date_gmt>2015-06-05 09:09:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Salut, merci pour l'article !
En fait tu as raison sur la forme, il est tout à fait possible d'avoir un test coverage de 100% sans avoir un code fonctionnel (principalement grâce aux mocks).
Cela dit, si on suit l'exemple que tu utilises :
1 - Tu as un code fonctionnel, avec des tests qui couvrent le tout.
2 - Tu modifies le contrat d'une fonction testée
3 - Tu modifies le test de cette fonction

Le problème dans ce workflow, c'est que tu ne t'occupes pas du tout de la dépendance, alors que tu casses tout ce qui va utiliser cette fonction. Tu dois vérifier les différents appels, les corriger, et corriger les tests unitaires afférents, pour garder un ensemble cohérent et fonctionnel.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433495382.2084551;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433526065.4489269;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13053</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2015-06-06 10:58:48</wp:comment_date>
			<wp:comment_date_gmt>2015-06-06 09:58:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour tous ces commentaires intéressants! :)

Je remarque que plusieurs avis concordent en disant -si je résume de manière caricaturale- que ce problème relève un peu de la responsabilité du développeur.

Il y a toutefois quelque-chose de paradoxal avec cet axiome. En effet, le but d'un test automatisé, par essence, c'est qu'il remplace l'intervention humaine. 

Si l'humain doit s'assurer que le code est effectivement toujours valide, c'est que le test n'est plus automatisé. Il ne répond plus à sa fonction.

Pour moi, un tel test devient donc potentiellement inutile, voire même contre-productif, car il demande un effort supplémentaire de maintenance.

De plus, l'erreur est humaine. Comment assurer que le dev fasse correctement son job, si le test n'est pas là pour lui dire?

Bien sûr je me fais l'avocat du diable... Mais c'est juste pour dire qu'il y a potentiellement un problème dans le fait que la détection du changement ne soit pas automatisée.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433584728.815865;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13965</wp:comment_id>
			<wp:comment_author><![CDATA[Swanny Lorenzi]]></wp:comment_author>
			<wp:comment_author_email>swanny@lorenzi-le.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2015-07-02 13:32:58</wp:comment_date>
			<wp:comment_date_gmt>2015-07-02 12:32:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[C'est tout le problème de la (non)rétrocompatibilité des interfaces.

Et là encore, on est dans le cas où on maîtrise tout le logiciel, donc on peut corriger tous les appels.
Mais imaginez une API utilisée par des milliers de partenaires ?

Heureusement il y a des solutions à ce problème : documentation des versions, support et publication de plusieurs versions en parallèle (quitte à informer des éléments dépréciés, et à charge aux utilisateurs de se mettre à jour à temps)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>13014</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1435840378.514869;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13968</wp:comment_id>
			<wp:comment_author><![CDATA[Swanny Lorenzi]]></wp:comment_author>
			<wp:comment_author_email>swanny@lorenzi-le.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2015-07-02 13:54:48</wp:comment_date>
			<wp:comment_date_gmt>2015-07-02 12:54:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[C'est tout le problème de "mais qui teste les tests alors ?".

Après il faut faire la part des choses :
* Les tests qui permettent de "prouver" qu'une spec est implémentée =&gt; responsabilité du QA
* L'implémentation en elle même =&gt; responsabilité de l'équipe de développement

Rien n'impose dans l'absolu que ce soit le dev final qui code à la fois les tests et l'implémentation finale.
On peut très bien avoir une team QA qui fournit les tests, et une autre team dev plus classique qui implémente les fonctionnalités.

Enfin, il y a des outils et des process qui peuvent aider à ne pas se planter dans les tests.
Déjà, si la spec est suffisament claire, les TU devraient être évidents :
"la fonction doit renvoyer un entier" =&gt; assertEntier(maFonction())
Si les tests sont difficiles/impossibles à écrire, c'est peut être que la spec est elle même trop imprécise et doit etre retravaillée.
Certains outils permettent même "d'écrire" des tests comme on parle couramment (cucumber par exemple), réduisant ainsi le risque d'erreurs.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>13053</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1435841688.3768051;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17662</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2016-03-10 09:36:22</wp:comment_date>
			<wp:comment_date_gmt>2016-03-10 08:36:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sur le même sujet:
http://www.developpez.com/actu/84887/Les-Mocks-deteriorent-ils-les-tests-unitaires-Selon-un-developpeur-le-testing-se-portait-mieux-avant/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457598982.7995951;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Créer un site en Twig avec Puppy framework</title>
		<link>http://www.thedarksideofthewebblog.com/creer-un-site-en-twig-avec-puppy-framework/</link>
		<pubDate>Wed, 06 May 2015 13:32:25 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2802</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://puppyframework.com/" title="Puppy php micro-framework" target="_blank">Puppy</a> est un micro-framework PHP prêt à l'emploi. Vous pouvez directement créer un site sans même devoir écire une seule ligne de PHP. Il est spécialement dédié aux petits sites, mais dispose néanmoins de pas mal de fonctionnalités de base.

Examinons ensemble ses principes de fonctionnement.

<h2>Installation</h2>

Une fois <a href="http://puppyframework.com/get-started/#installation" title="Installer Puppy framework" target="_blank">téléchargé avec Composer</a>, il suffit de lancer la commande <em>puppy run</em> avant de se rendre dans son navigateur en localhost.

[cc lang='bash' ]
puppy run [dev]
[/cc]

Cette commande lance simplement le serveur interne de PHP sur le port 8080 du localhost. On peut ainsi accéder à la démo de Puppy. L'option "dev" n'est utile qu'en développement, car elle annule le système de cache.

<h2>Le routage automatique</h2>

Sa spécialité? Puppy permet de construire directement un site en <a href="http://twig.sensiolabs.org/" title="Twig template engine" target="_blank">Twig</a> sans devoir configurer de routes. Son moteur lie automatiquement l'adresse de la page courante à un template correspondant.

Par exemple, il suffit d'ajouter un fichier "index.html.twig" pour avoir une homepage (les templates publics se trouvent dans le dossier "/templates/public").

[cc lang='html' ]
<!-- templates/public/index.html.twig -->

<h1>Hello world</h1>
[/cc]

A l'instar d'un site en HTML, Puppy va pointer vers le template équivalent (lequel doit toutefois être agrémenté d'une extension <em>.twig</em>). Il suffit ensuite d'y insérer son code HTML, et le site tourne!

<h2>Les templates Twig</h2>

Puppy utilise Twig (bien qu'on puisse potentiellement utiliser un autre moteur). Vous bénéficiez donc de toute la puissance d'un moteur de template. Par exemple, vous pouvez communautariser le code HTML commun à toutes vos pages.

[cc lang='html' ]
{% extends 'common.html.twig' %}

{% block content %}
    <h1>Hello world</h1>
{% endblock %}
[/cc]

Twig est capable de beaucoup de choses. Le mieux est d'en parcourir la <a href="http://twig.sensiolabs.org/" title="Twig documentation" target="_blank">documentation</a>.

<h2>Le routage dynamique</h2>

Parallèlement Puppy dispose des mêmes fonctionnalités de base que n'importe quel autre micro-framework: routing, middlewares, services,... Vous pouvez ainsi rajouter un comportement dynamique à certaines de vos pages.

<h3>Déclarer une route</h3>

Vous pouvez, par exemple, implémenter le traitement d'un formulaire de contact, et créer une route en POST, à l'instar d'un Slim ou d'un Silex.

[cc lang='php' ]
$puppy->post('contact', function(){ 
    ...
});
[/cc]

<h3>Récupérer les services</h3>

Avec ce système, vous pouvez récupérer dynamiquement les services dans les paramètres de la <a href="http://www.thedarksideofthewebblog.com/menu/php/les-callback-en-php/" title="Les callback en PHP" target="_blank"><em>callbable</em></a>. Il suffit de les déclarer, dans n'importe quel ordre. 

Par exemple, si vous voulez utiliser le <em>StaticController</em>, qui est la classe qui gère les routages automatiques vers les templates, il faut simplement le préciser dans les paramètres.

[cc lang='php' ]
$puppy->post('contact', function(StaticController $staticController){ 
    ...
});
[/cc]

Vous pouvez aussi appeler la <em>Request</em>, la <em>RequestStack</em>, le <em>Router</em>, la <em>Config</em>,...

<h3>Utiliser StaticController</h3>

Une fois que vous disposer d'une route, vous pouvez effectuer des traitements spécifiques. Si vous voulez afficher le template associé à la route courante, il suffit d'appeler le <em>StaticController</em>.

[cc lang='php' ]
return $staticController->render([
    'text-danger' => 'Form not filled'
]);
[/cc]

Puppy appelera alors le template "contact/index.html.twig" (toujours dans le dossier "/templates/public").

Et si vous voulez effectuer une redirection vers la page courante pour empêcher une nouvelle soumission du formulaire, à nouveau <em>StaticController</em> vous vient en aide.

[cc lang='php' ]
return $staticController->redirect([
    'text-info' => 'Email sent'
]);
[/cc]

Remarquez que dans ce cas, Puppy traite de manière transparente les données passées directement au template ou les données qui utilisent la session flash lors d'une redirection.

<h3>Gestion des variables du template</h3>

Du côté du template, la récupération est également transparente. Que ce soit une redirection ou pas, il existe un service retriever qui permet de ne pas s'en soucier.

[cc lang='html' ]
<p class="text-info">
    {{ services['retriever'].get('text-info') }}
</p>
[/cc]

<h3>Utiliser les méthodes génériques</h3>

Vous ne devez donc pas vous soucier du chemin vers votre template. Mais bien sûr, il est possible d'appeler facilement un autre template, à la manière traditionnelle d'un framework. Un truc sympa, c'est que les <em>callback</em> bénéficient d'une série de méthodes utilitaires, comme par exemple de la méthode <em>render</em> pour afficher un template.

[cc lang='php' ]
$puppy->post('contact', function(){ 
    return $this->render('path/file.html.twig');
});
[/cc]

Vous pouvez aussi faire une redirection, renvoyer une erreur 404, appeler un autre controller, ajouter un message flash,...

<h3>Le module</h3>

Le code final doit être mis dans un module et ressemblera à quelque-chose comme ceci:

[cc lang='php' ]
class ContactModule implements IModule
{
    /**
     * init the module.
     *
     * @param Application $application
     */
    public function init(Application $application)
    {
        $application->post(
            'contact', 
            function (Request $request, StaticController $staticController) {

                if (!$request->get('email')) {
                    //if the form is not filled, we display the form with the error
                    return $staticController->render([
                        'text-danger' => 'Form not filled'
                    ]);
                }
    
                //send the email...
    
                //if the email is send, we redirect to avoid F5.
                return $staticController->redirect([
                    'text-info' => sprintf('Email sent from %s', $request->get('email'))
                ]);

            }
        );
    }
}
[/cc]

Le module est chargé dynamiquement par Puppy et mis en cache, pas besoin de s'en soucier. Pas même besoin de le déclarer à Puppy!

<h2>Conclusion</h2>

En conclusion, Puppy s'adresse à des petits sites avec quelques traitements dynamiques simples.

Il ne s'agit pas simplement un générateur de sites statiques, car on dispose également des avantages d'un vrai framework. 

Puppy permet de réaliser un petit site rapidement, sans devoir configurer quoique ce soit, tout en bénéficiant de la puissance d'un moteur de template. 

Il dispose aussi des outils de base indispensables, notamment un système de routage simple. On peut facilement ajouter des petites extensions pour des besoins spécifiques.


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2802</wp:post_id>
		<wp:post_date>2015-05-06 14:32:25</wp:post_date>
		<wp:post_date_gmt>2015-05-06 13:32:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creer-un-site-en-twig-avec-puppy-framework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="puppy-framework"><![CDATA[puppy framework]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[puppy framework]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Tutorial sur l'utilisation de Puppy, un micro-framework PHP qui crée des sites en Twig sans problème de configuration de routes.]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Qu&#039;est-ce qu&#039;une &quot;version&quot;?</title>
		<link>http://www.thedarksideofthewebblog.com/quest-ce-quune-version/</link>
		<pubDate>Fri, 18 Sep 2015 19:11:15 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2978</guid>
		<description></description>
		<content:encoded><![CDATA[Vista, Xp, alpha, beta, 2.0... Les versions sont omniprésentes dans notre quotidien. Mais, dans le fond, comment définit-on une (bonne) version? Voici quelques éléments de réponse qui, bien qu'ils s'intègrent dans une réflexion globale par rapport à <a href="http://www.thedarksideofthewebblog.com/bonnes-pratiques-composer-gerer-les-versions/" title="Bonnes pratiques Composer: gérer les versions" target="_blank">la gestion des versions par Composer</a>, dépassent largement ce cadre.


<h2>Versioning: Tag vs branch</h2>

Selon <a href="http://fr.wikipedia.org/wiki/Version_d'un_logiciel" title="Wikipédia: Version d'un logiciel" target="_blank">Wikipédia</a>, <quote>"une version d'un logiciel correspond à un état donné de l'évolution d'un produit logiciel utilisant le versionnage"</quote>. On connaît tous les principaux <a href="https://fr.wikipedia.org/wiki/Logiciel_de_gestion_de_versions" title="Wikipédia: Logiciel de gestion de versions" target="_blank">systèmes de versionnage</a>: Git, Svn, Mercurial, ... Mais, dans ce flux de <a href="https://fr.wikipedia.org/wiki/Gestion_de_versions" title="Wikipédia: Gestion de versions" target="_blank">révisions</a>, qu'est-ce qui distincte précisément une version? 

On peut distinguer (par exemple dans Git) deux types de références potentielles: les branches et les tags. Bien sûr, tous deux pointent sur un commit. Mais une différence intrinsèque les distingue néanmoins:

<ul>
	<li>Un <strong>tag</strong> marque un point dans le temps qui ne doit plus changer. Il désigne un commit invariable.</li> 
	<li>A l'inverse, une <strong>branche</strong> est en évolution (du moins potentielle). Il désigne une succession de commit.</li>
</ul>

Seul, donc, le tag peut être assimilé à une version stable d'un logiciel, dans la mesure où une version désigne justement un état invariable du code. Toutefois, il n'est pas rare de devoir utiliser des versions instables, essentiellement lors du développement, et donc notamment des branches.


<h2>Cycle de développement d'un logiciel</h2>

Qu'est-ce qu'une branche "stable"? Car une branche stable peut contenir des bugs, et donc présenter une certaine instabilité applicative. Ca aussi, on le sait tous... Il s'agit donc d'une convention, et on peut ainsi distinguer plusieurs grandes phases de stabilité, correspondant au cycle de vie traditionnel des logiciels avant la release finale:
<dl>
	<dt>Version dev</dt><dd>La version est en cours de développement. Aucune stabilité n'est garantie.</dd>
	<dt>Version alpha</dt><dd>La version est développée mais en cours de test en interne.</dd>
	<dt>Version beta</dt><dd>La version est ouverte à un public restreint, lequel peut remonter les problèmes.</dd>
	<dt>Version RC (Release Candidate)</dt><dd>La version est ouverte à un public restreint, mais ne doit normalement plus contenir de bugs.</dd>
	<dt>Version stable</dt><dd>La version est ouverte au public et est sensée ne plus contenir de bugs.</dd>
</dl>

<h2>Semantic versioning (SemVer)</h2>

Par essence, le nom d'une version possède une valeur forte. Il représente une évolution déterministe et indique un état particulier que l'on doit pouvoir identifier de manière sémantique ou symbolique. Le nommage sémantique implique une signification, tandis qu'un nommage symbolique peut être arbitraire.

Dans un but d'harmonisation sémantique (et pas symbolique), la <a href="http://semver.org/" title="Semantic Versioning 2.0.0" target="_blank">Semantic Versioning 2.0.0 (SemVer)</a> présente un standard de nommage de version. Ce système est essentiellement basé sur <strong>trois nombres séparés par des points</strong> (par exemple &quot;2.1.5&quot;) définissant de manière logique les modifications que peut subir un code:

<ul>
	<li>Le premier numéro  correspond à la version majeure. Un saut de version majeure implique des modifications dans votre API existante. Il n'y a donc <strong>pas de rétrocompatibilité</strong> qui soit assurée.</li>
	<li>Le deuxième numéro correspond à la version mineure. Un saut de version mineure implique l'ajout de fonctionnalités, mais assure la <strong>rétrocompatibilité</strong>.</li>
	<li>Le troisième numéro correspond à des patch apportés. Il s'agit de <strong>corrections de bug</strong>.</li>
	<li>Séparé par un tiret, il est aussi possible de rajouter le <strong>degré de stabilité</strong> (voir les différents types de stabilités).</li>
</ul>

<h2>Conclusion</h2>

Une version est un état du code déterminé grâce au versioning, et facilement identifiable grâce au standard de nommage SemVer. 

Un tel versioning aura donc notamment un impact sur votre <a href="http://nvie.com/posts/a-successful-git-branching-model/" title="A successful Git branching model" target="_blank">git flow</a>.

Nous verrons dans les prochains articles que c'est sur cette base que Composer a élaboré son système de contrainte de version.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2978</wp:post_id>
		<wp:post_date>2015-09-18 20:11:15</wp:post_date>
		<wp:post_date_gmt>2015-09-18 19:11:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quest-ce-quune-version</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="composer"><![CDATA[composer]]></category>
		<category domain="category" nicename="composer-php"><![CDATA[Composer]]></category>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="git-2"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="semver"><![CDATA[semver]]></category>
		<category domain="post_tag" nicename="versionning"><![CDATA[versionning]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[SemVer, composer, versionning, git, SemVer]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Une version est un état du code déterminé grâce au versionning, et facilement identifiable grâce au standard de nommage SemVer.]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15612</wp:comment_id>
			<wp:comment_author><![CDATA[Bonnes pratiques Composer: gérer les versions]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/bonnes-pratiques-composer-gerer-les-versions/</wp:comment_author_url>
			<wp:comment_date>2015-09-18 20:18:22</wp:comment_date>
			<wp:comment_date_gmt>2015-09-18 19:18:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Précédent Suivant &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1442681187.0106039;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15615</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2015-09-18 20:22:25</wp:comment_date>
			<wp:comment_date_gmt>2015-09-18 19:22:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Comme autre ressource, un autre article sur le même sujet: http://blog.nicolashachet.com/gestion-de-projets/comment-gerer-la-version-dun-logiciel/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1442604145.658323;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15839</wp:comment_id>
			<wp:comment_author><![CDATA[www.dropy.com]]></wp:comment_author>
			<wp:comment_author_email>rhys.salier@gawab.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dropy.com</wp:comment_author_url>
			<wp:comment_date>2015-09-28 17:04:19</wp:comment_date>
			<wp:comment_date_gmt>2015-09-28 16:04:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonjour !
Des sujets à redéfinir je pense ! :p]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1443456259.9263721;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1445865112.1761589;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Quelles versions de dépendance spécifier avec Composer?</title>
		<link>http://www.thedarksideofthewebblog.com/quelles-versions-de-dependance-specifier-avec-composer/</link>
		<pubDate>Sat, 24 Oct 2015 19:51:59 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2980</guid>
		<description></description>
		<content:encoded><![CDATA[Après avoir abordé les règles et contraintes sémantiques des versions dans un <a href="http://www.thedarksideofthewebblog.com/quest-ce-quune-version/" title="Qu’est-ce qu’une « version »?" target="_blank">précédent article</a>, voyons comment définir ses dépendances avec <a href="https://getcomposer.org/" title="Composer" target="_blank">Composer</a>.


<h2>Patterns de contrainte</h2>

Composer propose un <a href="https://getcomposer.org/doc/01-basic-usage.md#package-versions" title="Composer: Package Versions" target="_blank">système de pattern</a> pour définir les contraintes de version des dépendances incluses dans un projet. Cela permet de contrôler précisément quelle version sera loadée par Composer. Ce système est basé sur <em>SemVer</em> (tel que vu dans le <a href="http://www.thedarksideofthewebblog.com/quest-ce-quune-version/" title="Qu’est-ce qu’une « version »?" target="_blank">précédent article</a>).

La liste de dépendances apparaît dans le fichier de config <em>composer.json</em> de votre projet, sous les propriétés <em>require</em> et <em>require-dev</em>.

[cc]
{
    "require": {
        "vendor/package": "2.11.0",
    }
}
[/cc]

Voici les principales règles de contrainte:

<table>
<tr>
<td>
Exact
</td>
<td>
1.2.3
</td>
<td>
Correspond à une version précise au patch près.
</td>
</tr>

<tr>
<td>
Wildcard
</td>
<td>
1.2.*
</td>
<td>
Le "*" est un jocker qui peut correspondre à un range de versions.
</td>
</tr>

<tr>
<td>
Range
</td>
<td>
>=1.2.3 <2.0 || >2.2
</td>
<td>
Correspond à un "range" logique de version.
</td>
</tr>

<tr>
<td>
Tilde
</td>
<td>
~1.2
</td>
<td>
Correspond à un range de version au niveau du dernier chiffre. Il indique donc la version minium sur son dernier chiffre, mais implique qu'on ne fasse pas de saut de version sur ses autres chiffres. Si vous précisez deux chiffres comme dans l'exemple, la version minimum est mineure (1.2.*), mais ne passera jamais sur une nouvelle version majeur (2.*).
</td>
</tr>

<tr>
<td>
Caret
</td>
<td>
^1.2.3
</td>
<td>
Assure la rétrocompatibilité comme le tilde, mais permet également de préciser une version de patch minimum.
</td>
</tr>

</table>



Il est conseillé d'utiliser la contrainte de version "^" (Caret Operator). En effet, cela permet de bénéficier la dernière version d'une librairie qui soit rétrocompatible. 

Par défaut, Composer harmonise la version de la sorte (ou avec "~" jusqu'il y a peu) lorsque vous utilisez la commande <a href="https://getcomposer.org/doc/03-cli.md#require" title="Composer: require" target="_blank">require</a> sans préciser la version demandée. Vous aurez ainsi la dernière version majeure avec une contrainte optimisée pour celle-ci.

[cc]
$ composer require vendor/package
[/cc]

Enfin, Composer accepte également les <a href="https://getcomposer.org/doc/02-libraries.md#tags" title="Composer: Tags" target="_blank">suffixes de stabilité</a> (ex: 1.0.1-alpha) et les <a href="https://getcomposer.org/doc/02-libraries.md#branches" title="Composer: Branches" target="_blank">noms de branches</a> (ex: dev-master).

<h2>Contraintes de stabilité</h2>

Si vous ne le demandez pas explicitement, Composer ne prendra pas en considération les <a href="https://getcomposer.org/doc/01-basic-usage.md#stability" title="Composer: stability" target="_blank">versions non stables</a>. Ainsi, si un projet possède une version avec un suffixe d'instabilité (ex: 1.0.1-alpha) ou s'il s'agit d'un nom de branche (ex: dev-master), celles-ci ne seront pas pris en compte lors de la résolution des contraintes.

<h3>Stabilité minimum</h3>

Ce comportement est défini par la configuration <a href="https://getcomposer.org/doc/04-schema.md#prefer-stable" title="Composer prefer-stable" target="_blank">prefer-stable</a> et et <a href="https://getcomposer.org/doc/04-schema.md#minimum-stability" title="Composer: minimum-stability" target="_blank">minimum-stability</a> du fichier <em>composer.json</em> de votre projet. 

Le paramètre <em>prefer-stable</em> (activé par défaut) indique simplement si Composer doit effectivement appliquer cette restriction.

Le paramètre <em>minimum-stability</em> (stable par défaut) spécifie quant à lui la stabilité minimum des dépendances à rechercher. Il agit comme un filtre. Composer ne recherchera que les versions au moins aussi stables (dev -> alpha -> beta -> RC -> stable). Par défaut, la valeur est <em>stable</em>, mais vous pouvez la redéfinir avec des valeurs comme <em>dev</em>, <em>alpha</em>, etc. 

Si vous spécifier explicitement une version non-stable ou une branche dans vos contraintes de version, vous devez donc impérativement définir un minimum de stabilité qui soit au moins équivalent.

[cc]
{
    "minimum-stability": "dev",
    "vendor/package": "1.0.x-dev",
}
[/cc]

Notez enfin que toutes les dépendances seront affectées par cette valeur. 

<h3>Flags de stabilité</h3>

Il faut savoir également qu'un système de <a href="https://getcomposer.org/doc/04-schema.md#package-links" title="Composer: stability flags" target="_blank">stability flags</a> (<em>@alpha, @patch</em>, etc) peut être spécifié dans la contrainte que vous définissez pour vos dépendances. Ces suffixes indiquent que vous désirez explicitement une version qui n'est pas encore stable et force la valeur globale de <em>minimum-stability</em>. Composer prendra donc le dernier commit en date qui corresponde à la contrainte.

[cc]
{
    "minimum-stability": "stable",
    "require": {
        "vendor/package": "1.0.*@dev",
        "vendor/package": "@dev",
    }
}
[/cc]

Enfin, il est possible de préciser un hash précis de commit pour les versions de dev.

[cc]
{
    "minimum-stability": "dev",
    "require": {
        "vendor/package": "dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7",
        "vendor/package": "1.0.x-dev#2eb0c0978d290a1c45346a1955188929cb4e5db7",
    }
}
[/cc]

<h2>Conclusion</h2>

Composer a instauré un système de contraintes basé sur SemVer qui permet un large panel de possibilités.

Une fois la version définie, encore faut-il loader et updater correctement sa dépendance, voire résoudre les conflits. C'est ce que nous verrons prochainement dans un article. 




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2980</wp:post_id>
		<wp:post_date>2015-10-24 20:51:59</wp:post_date>
		<wp:post_date_gmt>2015-10-24 19:51:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quelles-versions-de-dependance-specifier-avec-composer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="composer"><![CDATA[composer]]></category>
		<category domain="category" nicename="composer-php"><![CDATA[Composer]]></category>
		<category domain="post_tag" nicename="semver"><![CDATA[semver]]></category>
		<category domain="post_tag" nicename="version"><![CDATA[version]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_raven_schema_load</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[composer, semver, version]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment définir les versions de ses dépendances grâce à Composer]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[quelles-versions-de-dependance-specifier-dans-composer]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_massutolivier130@hotmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2015-10-26 14:05:11|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>16355</wp:comment_id>
			<wp:comment_author><![CDATA[Olivier]]></wp:comment_author>
			<wp:comment_author_email>massutolivier130@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2015-10-26 14:05:11</wp:comment_date>
			<wp:comment_date_gmt>2015-10-26 13:05:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Haaaa cool, un peu de lecture pour ce soir.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1445864711.082375;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1445864997.6562171;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16935</wp:comment_id>
			<wp:comment_author><![CDATA[Comment manager les versions de dépendance avec Composer?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thedarksideofthewebblog.com/comment-manager-les-versions-de-dependance-avec-composer/</wp:comment_author_url>
			<wp:comment_date>2015-11-26 13:15:01</wp:comment_date>
			<wp:comment_date_gmt>2015-11-26 12:15:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] avons vu comment définir une version de dépendance avec Composer. Voyons à présent comment les charger et gérer les [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448630339.9406919;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Comment manager les versions de dépendance avec Composer?</title>
		<link>http://www.thedarksideofthewebblog.com/comment-manager-les-versions-de-dependance-avec-composer/</link>
		<pubDate>Thu, 26 Nov 2015 11:14:24 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=2982</guid>
		<description></description>
		<content:encoded><![CDATA[Nous avons vu <a href="http://www.thedarksideofthewebblog.com/quelles-versions-de-dependance-specifier-avec-composer/" title="Quelles versions de dépendance spécifier avec Composer?">comment définir une version de dépendance</a> avec <a href="https://getcomposer.org/" title="Composer" target="_blank">Composer</a>. Voyons à présent comment les charger et gérer les conflits.

<h2>Installation des dépendances</h2>

Si vous utilisez Composer, vous avez déjà certainement remarqué que, à la racine de vos projets, se rajoute automatiquement le fichier <a href="https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file" title="Composer: he Lock File" target="_blank">composer.lock</a>. Ce fichier permet de geler les versions exactes qui sont chargées lors de l'installation initiale des dépendances. Ce freeze contribue à garantir la stabilité du comportement de l'application après son build telle que développée. C'est le processus qu'on privilégiera pour la mise en prod d'une application.

<h3><em>require</em></h3>
Ainsi, lorsque l'on ajoute une nouvelle dépendance (avec la commande <a href="https://getcomposer.org/doc/03-cli.md#require" title="Composer: require" target="_blank">require</a>), Composer spécifie la version téléchargée exacte dans <em>composer.lock</em>. Par exemple, si la contrainte d'une dépendance est &quot;^2.1.2&quot;, et que la dernière version stable est &quot;2.2.4&quot;, cette dernière sera téléchargée puis rajoutée dans le fichier.

<h3><em>install</em></h3>
Lorsque l'on rebuildera le projet par la suite (avec la commande <a href="https://getcomposer.org/doc/03-cli.md#install" title="Composer: install" target="_blank">install</a>), l'installation des dépendances se fera sur base des versions précises telles qu'elles ont été répertoriées dans ce fichier (et plus sur base des contraintes). Dans notre exemple, ce sera donc la version &quot;2.2.4&quot; qui sera installée, même si, entre temps, une nouvelle version a vu le jour qui satisfasse également à la contrainte, &quot;2.5.1&quot;.

<h3><em>update</em></h3>
Les versions des dépendances peuvent toutefois être mises à jour (avec la commande <a href="https://getcomposer.org/doc/03-cli.md#update" title="Composer: update" target="_blank">update</a>). Composer va  récupérer la dernière version en date d'une librairie qui corresponde à la contrainte et remplacer la version précise dans <em>composer.lock</em>. Par rapport à notre exemple, la dépendance sera actualisée à &quot;2.5.1&quot;.

<h3>Portée de <em>composer.lock</em></h3>
Attention, <a href="https://getcomposer.org/doc/02-libraries.md#lock-file" title="Composer: lock file" target="_blank"><em>composer.lock</em> n'a d'effet que pour le projet courant</a> (le <a href="https://getcomposer.org/doc/04-schema.md#root-package" title="Composer: root package" target="_blank">root package</a>), et pas pour les projets dont il est dépendant. C'est pour cette raison que les librairies de dépendances ne vont pas forcément versionner ce fichier. A l'inverse, une application web doit absolument freezer ses dépendances pour assurer que le comportement de prod soit identique. 

<h2>Gestion des conflits</h2>

Il n'est pas impossible de rencontrer des conflits entre contraintes de dépendances. Par exemple, vous avez besoin d'une librairie avec une version minimum &quot;^2.1.4&quot;. Et une autre de vos dépendances a elle-même besoin de cette même librairie, mais avec la contrainte &quot;^1.8.7&quot;. Composer ne pourra pas trancher entre ces deux contraintes s'excluant mutuellement. Il n'y a pas vraiment de solution miracle, et il faudra composer (mauvais jeu de mot) avec cela. Essayer de trouver une version compatible, etc.

Si le conflit touche une de vos dépendances directes, vous gardez une possibilité d'action dans vos propres définitions de contraintes. Vous pourriez également connaître des problèmes de stabilité minimum si vous travaillez avec des branches de dev. Mais si le problème se situe dans des dépendances de dépendances, cela devient compliqué...

<h3><em>conflict</em></h3>

Composer vous offre la possibilité de blacklister certaines versions de dépendances avec la propriété <a href="https://getcomposer.org/doc/04-schema.md#conflict" title="Composer: conflict" target="_blank">conflict</a>. Les dépendances listées ne seront alors pas téléchargées.

[cc]
"conflict": {
    "vendor/package": "<1.0.7"
 }
[/cc]

<h3><em>alias</em></h3>

Une autre solution envisageable consiste à utiliser un <a href="https://getcomposer.org/doc/articles/aliases.md#require-inline-alias" title="Composer: require inline alias" target="_blank">aliasing</a> de vos contraintes:

[cc]
"require": {
    "vendor/package": "dev-master as 1.1.2"
}
[/cc]

Vous installerez alors la branche master tout en la déclarant en tant que version &quot;1.1.2&quot;.

<h2>Surcharge de fork</h2>

De même, vous pourriez avoir besoin de surcharger une dépendance. Par exemple, si vous fixez un bug sur une librairie mais que votre patch ne sera mergé que dans un certains temps, vous pouvez surcharger la librairie avec votre fork. 

<h3><em>alias</em></h3>

Pour ce faire, il vous faudra aliasser votre fork pour qu'il puisse satisfaire les contraintes des autres dépendances qui l'appellent.

[cc]
{
    "require": {
        "doctrine/orm": "2.3.*",
        "doctrine/common": "dev-myFix as 2.3.0"
    },
    "repositories": [
        {
            "type": "vcs",
            "url": "https://github.com/you/doctrine-common"
        }
    ]
}
[/cc]

Ici, notre fork "myFix" surchargera "doctrine/common" sans que "doctrine/orm", qui appelle également cette dépendance, n'en trouve rien à redire.

<h3><em>replace</em></h3>
On peut arriver au même résultat d'aliassing depuis le fork, en utilisant la propriété <a href="https://getcomposer.org/doc/04-schema.md#replace" title="Composer: replace" target="_blank">replace</a>.

[cc]
"replace": {
    "vendor/package": "2.1.3"
}
[/cc]

<h2>Monitorer les versions</h2>

Il existe plusieurs services de monitoring des dépendances. L'idée est d'informer sur l'état des dépendances d'un projet pour savoir si elles sont toujours à jour ou si de nouvelles versions ont été développées.


Par exemple, <a href="https://www.versioneye.com/ " title="versioneye" target="_blank">VersionEye</a> permet deux choses:
<ul>
<li>Comme Packagist, une vision sur les dépendances d'un projet. Mais, en plus, VersionEye indique (en se basant sur le fichier composer.lock) si ses dépendances sont à jour.</li>
<li>Un aperçu du nombre de librairies dépendantes.</li>
</ul>

Un autre exemple: <a href="http://depending.in/" title="Depending" target="_blank">Depending</a> qui travaille spécifiquement avec Composer.


<h2>Conclusion</h2>

Composer possède plusieurs fonctionnalités pour gérer les dépendances, depuis leur téléchargement avec <em>require</em>, <em>install</em> et <em>update</em>, jusqu'à certaines possibilités de gestion des conflits avec <em>conflict</em>, <em>replace</em> et <em>alias</em>.

Pourtant, les dépendances demeurent parfois à double tranchant. Certes, elles permettent des fonctionnalités souvent complètes. Mais les dépendances entraînent les dépendances et se démultiplient de manière exponentielle. C'est alors qu'on peut connaître des difficultés de maintenance et de compatibilité.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2982</wp:post_id>
		<wp:post_date>2015-11-26 12:14:24</wp:post_date>
		<wp:post_date_gmt>2015-11-26 11:14:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>comment-manager-les-versions-de-dependance-avec-composer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="composer"><![CDATA[composer]]></category>
		<category domain="category" nicename="composer-php"><![CDATA[Composer]]></category>
		<category domain="post_tag" nicename="packagist"><![CDATA[packagist]]></category>
		<category domain="post_tag" nicename="versionning"><![CDATA[versionning]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_raven_schema_load</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[composer, packagist, versioning]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment charger ses dépendances avec Composer et gérer les conflits]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_adrienpauly1@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2015-11-27 11:26:33|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_Philippe@Gemnasium.com</wp:meta_key>
			<wp:meta_value><![CDATA[2015-11-27 12:38:36|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_xavier.leune@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2015-12-01 14:26:22|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>16959</wp:comment_id>
			<wp:comment_author><![CDATA[Adrien]]></wp:comment_author>
			<wp:comment_author_email>adrienpauly1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://checkmycomposer.com</wp:comment_author_url>
			<wp:comment_date>2015-11-27 11:26:33</wp:comment_date>
			<wp:comment_date_gmt>2015-11-27 10:26:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,

Je me permets de partager un outil que j'ai développé permettant également de monitorer ses propres projets : http://checkmycomposer.com
L'idée est d'avoir une dashboard de ses projets et d'être averti par e-mail (selon nos préférences) lorsque l'un d'entre eux contient une ou plusieurs dépendances dépassées. Je fournis également une commande qui permet de voir l'état des dépendances d'un projet en ligne de commandes.

N'hésitez pas à me faire des retours !

Adrien]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448619993.9864011;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448630335.9029131;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16962</wp:comment_id>
			<wp:comment_author><![CDATA[Philippe]]></wp:comment_author>
			<wp:comment_author_email>Philippe@Gemnasium.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2015-11-27 12:38:36</wp:comment_date>
			<wp:comment_date_gmt>2015-11-27 11:38:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Il existe aussi https://Gemnasium.com pour ça. Gemnasium indique en plus s'il existe des alertes de sécurité concernant ces dépendances. Le service est gratuit pour les projets open source.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448624316.2737319;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448630330.124584;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16964</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2015-11-27 14:20:45</wp:comment_date>
			<wp:comment_date_gmt>2015-11-27 13:20:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[excellent! merci! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>16959</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448630445.667309;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16965</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2015-11-27 14:21:17</wp:comment_date>
			<wp:comment_date_gmt>2015-11-27 13:21:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[merci!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>16962</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448630477.727339;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17036</wp:comment_id>
			<wp:comment_author><![CDATA[beoneself]]></wp:comment_author>
			<wp:comment_author_email>xavier.leune@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://tech.ccmbg.com/blog/</wp:comment_author_url>
			<wp:comment_date>2015-12-01 14:26:10</wp:comment_date>
			<wp:comment_date_gmt>2015-12-01 13:26:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Et hop au passage j'ajoute le lien vers mon outil : http://tech.ccmbg.com/blog/?p=972 qui a la particularité de checker aussi bien dans un satis l'état des dépendances et la gestion général de composer :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448976370.3347299;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1448993249.69311;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Automatiser votre débugage d&#039;historique Git avec PHPUnit et Behat</title>
		<link>http://www.thedarksideofthewebblog.com/automatiser-votre-debugage-dhistorique-git-avec-phpunit-et-behat/</link>
		<pubDate>Thu, 31 Dec 2015 14:54:45 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=3100</guid>
		<description></description>
		<content:encoded><![CDATA[Une histoire classique: Pris par la fièvre de votre projet, vous alignez les commits, les uns après les autres, jusqu'au moment fatidique où vous vous rendez compte que vous avez cassé vos tests. Mais depuis combien de commit? Difficile à dire car le bug est insidieux.

Si on jette un œil à l'historique de la branche, on se retrouve avec quelque-chose comme ça:
<pre>
$ git log
| a1bf1b1 - (HEAD, master) refactor a little bit more (me 54 seconds ago)
| 2d32ee0 - make some stuff (me 7 minutes ago)
| 5aedc45 - refactor my function (me 8 minutes ago)
| de872cb - add a nice thing (me 12 minutes ago)
| c4254ad - modify something (me 12 minutes ago)
| da54d5a - do some refactoring (me 15 minutes ago)
| e57bf5d - (origin/master) ...
</pre>

On remarque que le <em>HEAD</em> est buggé, tandis que <em>origin</em> fonctionnait. Le bug a été introduit entre temps par l'un de ces commits, mais on ne sait pas lequel...

La première idée qui vient en tête est de faire un <em>checkout</em> sur chacune des révisions et de retester. Mais cela deviendrait vite fastidieux à mesure que s'allonge l'historique. 

Pas de panique: <a href="https://git-scm.com/docs/git-bisect" title="Git bisect" target="_blank">git-bisect</a> arrive à la rescousse! Git va rentabiliser le parcours de l'historique grâce à une <a href="https://fr.wikipedia.org/wiki/Dichotomie" title="Wikipédia: dichotomie" target="_blank">recherche dichotomique</a>. 

On comprend alors tout l'intérêt d'<a href="https://git-scm.com/book/ch5-2.html#Commit-Guidelines" title="Git: Contributing to a Project" target="_blank">atomiser ses commits</a>. Plus précis ils seront, plus finement Git déterminera les modifications incriminées.

<h2><em>git-bisect</em> manuel</h2>

Avant toute chose, il faut initier le <em>bisect</em>:
<pre>
$ git bisect start
</pre>

Ensuite, vous devez définir le range de l'historique à parcourir. Dans notre cas, le bug est quelque-part entre <em>HEAD</em> et <em>origin</em>:
<pre>
$ git bisect bad                        # la révision courante (HEAD) est buggée
$ git bisect good origin/master         # origin était stable
</pre>

C'est alors que Git lance le <em>bisect</em> et va effectuer un <em>checkout</em> au milieu du range. Vous devez donc lancer vos tests (avec PHPUnit ou Behat, peu importe):
<pre>
$ bin/phpunit
</pre>
Si vos tests échouent, vous ne vous posez aucune question:
<pre>
$ git bisect bad
</pre>

Même chose si vos tests passent:
<pre>
$ git bisect good
</pre>

Git effectue alors un nouveau <em>checkout</em>, on relance les tests, et ainsi de suite.

A chaque étape, Git évalue également le nombre d'étapes restantes:
<pre>
Bisecting: 2 revisions left to test after this (roughly 2 steps)
</pre>

Une fois le commit fautif découvert, on stoppe le <em>bisect</em>:
<pre>
$ git bisect reset
</pre>


<h2><em>git-bisect</em> automatisé</h2>

On a assurément réduit le nombre de commits à devoir tester, mais il faut toujours boucler sur un certain nombre de commits, lancer les tests à chaque fois, et communiquer leurs résultats à Git...

Tant qu'à faire, autant que tout ceci soit automatisé. Ce qui est possible grâce à la sous-commande <em>run</em>. Une fois que vous avez défini le range de l'historique à parcourir, plutôt que de simplement tester manuellement, vous lancez les tests avec cette sous-commande:

<pre>
$ git bisect run bin/phpunit
</pre>

A chaque <em>checkout</em>, Git va lancer automatiquement vos tests pour vous. Vous n'avez plus qu'à patienter le temps du <em>bisect</em>, puis à le reseter à la toute fin.

Et tant qu'à faire simple, pourquoi pas se faire un petit <a href="https://git-scm.com/book/tr/v2/Git-Basics-Git-Aliases" title="Git: aliases" target="_blank">alias</a>:

<pre>
# ~/.gitconfig

[alias]
    debug = !sh -c 'git bisect start && git bisect good $2 && git bisect bad HEAD && git bisect run $1 && git bisect reset' -
</pre>

que vous pouvez utiliser comme ceci:

<pre>
$ git debug bin/phpunit origin/master    #git debug &lt;test_command&gt; &lt;good_commit&gt;
</pre>

<h2>Attention aux caches</h2>

Attention toutefois à vos caches, en particulier si vous testez avec Behat. Il vous sera certainement nécessaire de vider votre cache applicatif avant chaque lancement de Behat. Le plus simple est donc de surcharger la commande originale de Behat (bin/behat) et de la versionner (.gitignore).

Par exemple, si vous travaillez sous Symfony:
[cc lang='bash' ]
#!/usr/bin/env bash

# récupération du directory du fichier
BASEDIR=$(dirname $0)

# suppression du cache de symfony
$BASEDIR/../app/console cache:clear -e test

# lancement de behat
$BASEDIR/../vendor/behat/behat/bin/behat $*

# retour du code d'erreur de behat
exit $?
[/cc]

Veillez bien à retourner le code d'erreur de Behat, car c'est lui que Git va interpréter pour déterminer si le commit est buggé ou pas.

Par ailleurs, vous devrez certainement modifier les droits du fichier:

<pre>
$ chmod +x bin/behat
</pre>

Enfin, vous devrez versionner ce script explicitement, car le dossier <em>bin</em> est généralement ignoré par Git dans le <em>.gitignore</em>

<code>
# .gitignore

/bin/*           #tout le dossier bin
!/bin/behat     #à l'exception de behat
</code>

<h2>Conclusion</h2>
Conclusion: bonne année! :)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3100</wp:post_id>
		<wp:post_date>2015-12-31 15:54:45</wp:post_date>
		<wp:post_date_gmt>2015-12-31 14:54:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>automatiser-votre-debugage-dhistorique-git-avec-phpunit-et-behat</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="behat"><![CDATA[Behat]]></category>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="git-2"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="phpunit"><![CDATA[PHPUnit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[git, PHPUnit, Behat]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[git-bisect automatisé avec PHPUnit et Behat]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Comment se perdre en écrivant un objet en JS</title>
		<link>http://www.thedarksideofthewebblog.com/comment-ecrire-un-objet-en-js/</link>
		<pubDate>Sun, 06 Mar 2016 11:34:29 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=3155</guid>
		<description></description>
		<content:encoded><![CDATA[Vraiment, j'adore Javascript. Mais néanmoins, il faut reconnaître que ce langage offre un tel nombre de syntaxes différentes pour réaliser une même opération que ça en devient parfois un peu bordélique.

Petit exemple avec l'écriture d'un objet. J'ai compté six façons différentes d'obtenir un objet (et j'en ai certainement oubliées).


<h2>Simple objet littéral</h2>

<h3>La syntaxe</h3>

Le truc cool avec javascript, c'est qu'on peut déclarer un simple objet à la volée (sans déclarer de classe) et de manière littérale (sans syntaxe d'instanciation). Il s'agit souvent soit d'une structure de donnée (par exemple pour passer des options à une classe), soit d'une instance unique d'objet.

[cc lang='javascript' ]
var foo = {
    bar: 'bzzz'
};

console.debug(foo.bar); //'bzzz'
[/cc]

<h3>Le problème</h3>

Cette syntaxe convient parfaitement si la structure de l'objet ne doit pas assurer une intégrité absolue (on peut se passer de définir certaines propriétés) ou être reproductible avec fidélité (on peut se passer de la déclaration d'une signature par l'intermédiaire d'une classe). Cela remplit bien le rôle d'un <em>array</em> associatif en PHP, par exemple.

 Par contre, cela ne donne pas d'assurance quant à la complétude de l'objet, et cela devient plus embêtant si on doit créer plusieurs objets du même type avec fidélité.


<h2>Object.create()</h2>

<h3>La syntaxe</h3>
Avec ES5, on sait instancier un objet depuis une définition, grâce à <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/create" title="MDN: Object.create()" target="_blank">Object.create()</a>. Basiquement, cela ressemble un peu à une instanciation de classe dynamique. Cela permet beaucoup de choses en pratique car plutôt que de travailler avec une définition, on peut utiliser directement le prototype d'une classe. On sait réaliser alors une sorte de clone du prototype.

[cc lang='javascript' ]
var foo = Object.create({}, { bar: { value: 'bzzz' } })
console.debug(foo.bar); //'bzzz'
[/cc]

<h3>Le problème</h3>

Ok, si on rend le code réutilisable (par exemple, en stockant la définition dans une fonction faisant office de constructeur), on est sûr d'avoir un objet formé correctement lors de chaque instanciation. Par contre, il n'y a pas de réelle plus-value par rapport à la déclaration d'une classe si on ne travaille pas au niveau du prototype.


<h2>Objet créé par une fonction</h2>

<h3>La syntaxe</h3>

Pour remédier autrement au problème de l'intégrité, on peut imaginer utiliser une fonction qui retourne systématiquement la même structure de donnée. Une factory en somme.


[cc lang='javascript' ]
function createFoo(bar){
    return {
        bar: bar
    };
}

var foo = createFoo('bzzz');
console.debug(foo.bar); //'bzzz'
[/cc]

<h3>Le problème</h3>

En appelant une fonction, on perd un peu la syntaxe objet, et donc la notion de ce qui est retourné par la fonction. On n'a plus "l'impression" de travailler avec un objet...

<h2>Objet littéral instancié</h2>

<h3>La syntaxe</h3>

On peut agrémenter la syntaxe précédente d'un <em>new</em>. Le résultat sera exactement identique, si ce n'est qu'on devient plus explicite quant au comportement de la fonction.

[cc lang='javascript' ]
function Foo(bar){
    return {
        bar: bar
    };
}

var foo = new Foo('bzzz');
console.debug(foo.bar); //'bzzz'
[/cc]

<h3>Le problème</h3>

Le problème c'est qu'on peut être dupé par le faux typage. En effet, le résultat cette opération est bien l'instanciation d'un nouvel objet de type <em>Object</em> depuis l'objet littéral retourné par la fonction. Il ne s'agit pas de l'instanciation de la fonction en tant que telle, comme dans le processus d'instanciation depuis une classe.

[cc lang='javascript' ]
console.debug(foo instanceof Foo); //false
[/cc]

D'autre part, c'est assez vicieux comme syntaxe. On ne sait pas vraiment ce qui est instancié: est-ce l'objet ou la fonction. Surtout que, normalement, il n'est pas possible d'instancier un autre objet.

[cc lang='javascript' ]
var foo = {
    bar: 'bzzz'
};

var foo2 = new foo; //Uncaught TypeError: foo is not a function(…)
[/cc]
<h2>Objet instancié depuis une classe</h2>

<h3>La syntaxe</h3>

Comme on le sait, on peut déclarer une classe depuis une fonction. Du coup, l'objet sera effectivement une instance de la fonction. Le problème précédent est résolu.

[cc lang='javascript' ]
function Foo(bar){
    this.bar = bar;
}

var foo = new Foo('bzzz');
console.debug(foo.bar); //'bzzz'
console.debug(foo instanceof Foo); //true
[/cc]

<h3>Le problème</h3>

Toutefois, on se retrouve avec une erreur un peu bizarre si on oublie le <em>new</em> (faut le vouloir aussi, mais bon...).

[cc lang='javascript' ]
var foo = Foo('bzzz');
foo.bar;//Uncaught TypeError: Cannot read property 'bar' of undefined
[/cc]

Et si jamais la fonction retournait le "this", on se retrouvait avec l'objet global... argh!

<h2>Les classes ES2015</h2>

<h3>La syntaxe</h3>

ES2015, aka ES6, propose une nouvelle syntaxe de déclaration de classe plus explicite (ou en tout cas plus traditionnelle). On est obligé de passer par le <em>new</em> et l'objet est bien une instance de la classe.

[cc lang='javascript' ]
class Foo{
    constructor(bar){
        this.bar = bar;
    }
}

var foo = new Foo('bzzz');
console.debug(foo.bar); //'bzzz'
console.debug(foo instanceof Foo); //true
[/cc]

<h3>Le problème</h3>

On s'est vraiment éloigné de l'esprit de liberté offert par les objets littéraux du premier exemple. On se retrouve avec un code plus lourd (mais plus réutilisable) qui se rapproche de l'écriture traditionnelle de la programmation orientée objet.

<h2>Conclusions</h2>

Et donc, je me pose la question: Comment bien écrire un objet en javascript?... tout dépend du contexte! ;-)

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3155</wp:post_id>
		<wp:post_date>2016-03-06 12:34:29</wp:post_date>
		<wp:post_date_gmt>2016-03-06 11:34:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>comment-ecrire-un-objet-en-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="constructor"><![CDATA[constructor]]></category>
		<category domain="post_tag" nicename="es2015"><![CDATA[ES2015]]></category>
		<category domain="post_tag" nicename="fonction"><![CDATA[fonction]]></category>
		<category domain="post_tag" nicename="instanication"><![CDATA[instanication]]></category>
		<category domain="category" nicename="les-patterns-de-js"><![CDATA[Les patterns de JS]]></category>
		<category domain="post_tag" nicename="object"><![CDATA[object]]></category>
		<category domain="post_tag" nicename="return"><![CDATA[return]]></category>
		<category domain="post_tag" nicename="this"><![CDATA[this]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[constructor, ES2015, function, instanciation]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment déclarer un objet en Javascript: plus d'une méthode existent!]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_nicolas.issalene@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2016-03-06 17:23:28|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_dhoko@cyaneus.org</wp:meta_key>
			<wp:meta_value><![CDATA[2016-03-07 14:31:42|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_Nicolas.issalenr@gmail.Com</wp:meta_key>
			<wp:meta_value><![CDATA[2016-03-07 16:40:55|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_badlee.oshimin@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2016-04-03 18:06:38|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_badinga.ulrich@gmail.com</wp:meta_key>
			<wp:meta_value><![CDATA[2016-04-07 01:01:02|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_thouvenot@yahoo.fr</wp:meta_key>
			<wp:meta_value><![CDATA[2016-07-27 09:25:48|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>17639</wp:comment_id>
			<wp:comment_author><![CDATA[Nico]]></wp:comment_author>
			<wp:comment_author_email>nicolas.issalene@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-03-06 17:23:28</wp:comment_date>
			<wp:comment_date_gmt>2016-03-06 16:23:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Tu peux aussi utiliser les closures pour limiter ce qui est publique et privé ^^
<pre>
function Car(brand, horsePower)
{
     this.brand = brand;
     this.hp = horsePower;

    this.start = function() { accelerate(); };
    this.stop = function() {};

    function accelerate() {};

    return {
      start: this.start,
      stop: this.stop
    };
}
</pre>
Avec cette syntaxe, tu masques la méthode "accelerate" :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457281408.9158881;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457284415.066473;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17640</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2016-03-06 18:21:16</wp:comment_date>
			<wp:comment_date_gmt>2016-03-06 17:21:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[La façon dont on accède aux propriétés pourrait faire l'objet d'un article à part entière! Tins, c'est une idée... ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17639</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457284876.152976;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17641</wp:comment_id>
			<wp:comment_author><![CDATA[Nico]]></wp:comment_author>
			<wp:comment_author_email>nicolas.issalene@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-03-06 18:40:52</wp:comment_date>
			<wp:comment_date_gmt>2016-03-06 17:40:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[D'ailleurs, je n'en suis pas fan de cette notation.. J'aime bien comme toi mixer les deux selon mes besoins, mais ca peut être très sympa et ca me donne une idée :)

https://jsfiddle.net/4m3x3L8r/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17640</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457286052.1724751;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17646</wp:comment_id>
			<wp:comment_author><![CDATA[dhoko]]></wp:comment_author>
			<wp:comment_author_email>dhoko@cyaneus.org</wp:comment_author_email>
			<wp:comment_author_url>http://dhoko.me/liens</wp:comment_author_url>
			<wp:comment_date>2016-03-07 14:31:42</wp:comment_date>
			<wp:comment_date_gmt>2016-03-07 13:31:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Tu présentes des approches différentes qui ne font pas du tout la même chose, avec des concepts différents.
C'est un peu un gros bordel. 

"Et donc, je me pose la question: Comment bien écrire un objet en javascript?… tout dépend du contexte! ;-)"
Exactement, mais bon avec un peu plus de texte ce serait mieux:

Structurer de la data simple: Objet littéral
Système de collection: Classe/Prototype (ce que tu as sous la ref Objet instancié depuis une classe).
Ensuite c'est le gout les couleurs, si tu veux manipuler des trucs en private sans te faire chier à créer une classe ES2015 ou son équivalent un poil plus verbeux ES5 une fonction instanciée (Prototype), tu utilises une factory:

<pre>
function factory(name) {
   function formatDate() {}
   return {
     name: name,
     date: formatDate()
   }
}
</pre>

Comme dans tout langage ça dépend du besoin, faut pas se prendre la tête et rester dans le simple. On ne fait pas du Java mais du JavaScript, donc si je veux un objet qui _ressemble_ à une map, je fais un {}.

Object.create osef, on s'en sert si tu veux faire des trucs plus avancés (genre dans 90% des cas osef). 

KISS bordel.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457357502.8467619;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457364883.7376029;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17647</wp:comment_id>
			<wp:comment_author><![CDATA[dhoko]]></wp:comment_author>
			<wp:comment_author_email>dhoko@cyaneus.org</wp:comment_author_email>
			<wp:comment_author_url>http://dhoko.me/liens</wp:comment_author_url>
			<wp:comment_date>2016-03-07 14:33:37</wp:comment_date>
			<wp:comment_date_gmt>2016-03-07 13:33:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[En espérant que ça va répondre à ton questionnement. Le JS c'est pas si complexe, suffit de faire comme partout, avoir une approche KISS. ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457357617.4872811;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457364851.254416;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17648</wp:comment_id>
			<wp:comment_author><![CDATA[Nico]]></wp:comment_author>
			<wp:comment_author_email>Nicolas.issalenr@gmail.Com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-03-07 16:40:55</wp:comment_date>
			<wp:comment_date_gmt>2016-03-07 15:40:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[D'ailleurs une super technique est celle du canard :) (Google inside ^^)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17647</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457365255.8894711;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457370349.8791771;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17656</wp:comment_id>
			<wp:comment_author><![CDATA[dhoko]]></wp:comment_author>
			<wp:comment_author_email>dhoko@cyaneus.org</wp:comment_author_email>
			<wp:comment_author_url>http://dhoko.me/liens</wp:comment_author_url>
			<wp:comment_date>2016-03-08 09:01:48</wp:comment_date>
			<wp:comment_date_gmt>2016-03-08 08:01:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yup ça marche plutôt bien :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17648</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1457424108.430903;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17840</wp:comment_id>
			<wp:comment_author><![CDATA[oshimin]]></wp:comment_author>
			<wp:comment_author_email>badlee.oshimin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-04-03 18:06:38</wp:comment_date>
			<wp:comment_date_gmt>2016-04-03 17:06:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Petite erreur dans ta remarque : var foo = Foo('bzzz'); // Uncaught TypeError: foo is not a function(…)

<pre>
function Foo(bar){ this.bar = bar; }
var foo = Foo("baz"); // Executer sans erreur car sans new, this c'est l'objet global.
console.log(foo,bar); // affiche "undefined baz";
</pre>

Autre petite remarque tout dépends de ton approche, si on parle d'instancier des objets de même type ou fonctions il y a class/prototype sinon ce sont des hash/collection que tu fais et dans ce dernier cas je ne vois pas l’intérêt d'avoir une classe ou un prototype.

<pre>
// les collections, hash etc...
var monHash = {
  "cle" : "valeur"
};

// les class aproche prototype
var Point = function(x,y){
   if(this instanceof Point) return new Point(x,y); // accepte Point(x,y)
   this.x= x || 0;
   this.y= y || 0;
}
Point.prototype.egal = function(point){ // methodes
   return this.x == point.x && this.y == point.y;
}
var p1 = new Point(0,2);

// les class ES2015
class Point2015{
    constructor(x,y){
        this.x= x || 0;
        this.y= y || 0;
    }
    egal(point){ // methodes
        return this.x == point.x && this.y == point.y;
   }
}
var p2 = new Point2015(0,2);
</pre>

 Pour moi il n'y a que ses méthodes là pour créer les object, après si tu encapsule la création dans une function c'est la même chose.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1459703198.0286269;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1459975148.669004;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17869</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2016-04-06 21:54:36</wp:comment_date>
			<wp:comment_date_gmt>2016-04-06 20:54:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[corrigé! merci bcp! :) (pour info, c'est foo qui est undefined, car la fonction ne retourne rien.)

En fait, si tu pousses ton raisonnement encore plus loin, il n'y a qu'une façon de faire un objet, car même ce que tu appelles hash/collection, n'est en fait que l'instanciation littérale de la classe Object... ;-)

Moi je parle de différences syntaxiques, pas conceptuelles. Par exemple, la déclaration une classe en ES2015 peut s'écrire différemment, bien que conceptuellement il s'agisse exactement de la même chose qu'avec les prototypes.

PS: Est-ce que ton code ne tombe pas dans une récursion infinie?: "if(this instanceof Point) return new Point(x,y);"]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17840</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1459976076.348664;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17870</wp:comment_id>
			<wp:comment_author><![CDATA[Oshimin]]></wp:comment_author>
			<wp:comment_author_email>badinga.ulrich@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-04-07 01:01:02</wp:comment_date>
			<wp:comment_date_gmt>2016-04-07 00:01:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Le code ne boucle pas ça test que le this c'est bien un object de Point. car quand tu fais `new MyClass` il y a instanciation de myClass puis assignation de l'instance au `this` mais quand tu fais `MyCass()`, le `this` c'est l'object global(window) donc pour tester la presence de `new` on test si c'est une instance de myClass.  Si c'est pas le cas on envoie une instance de myClass.

Bon après maintenant (ES2015) tu peux tester `new.target` pour vérifier si c'est une instanciation ou un appel de fonction.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1459987262.816354;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1460035364.113163;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17871</wp:comment_id>
			<wp:comment_author><![CDATA[Oshimin]]></wp:comment_author>
			<wp:comment_author_email>badinga.ulrich@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-04-07 01:05:52</wp:comment_date>
			<wp:comment_date_gmt>2016-04-07 00:05:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[effectivement c'est une boucle infini il manque le !(négation).
Merci pour la remarque ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17869</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1459987552.933635;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1461058891.7296441;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17882</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2016-04-07 14:25:26</wp:comment_date>
			<wp:comment_date_gmt>2016-04-07 13:25:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ah ok, alors le test devrait être inversé:
<pre>
if(!(this instanceof Point)) return new Point(x,y);
</pre>
pas con, j'y avais jamais pensé! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17870</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1460035526.5539379;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17883</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2016-04-07 14:26:39</wp:comment_date>
			<wp:comment_date_gmt>2016-04-07 13:26:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[donc, encore une autre syntaxe.. ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17882</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1460035599.766681;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17960</wp:comment_id>
			<wp:comment_author><![CDATA[Oshimin]]></wp:comment_author>
			<wp:comment_author_email>badinga.ulrich@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-04-15 14:55:59</wp:comment_date>
			<wp:comment_date_gmt>2016-04-15 13:55:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mdrrr... et oui encore une syntaxe...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17883</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1460728559.977185;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18472</wp:comment_id>
			<wp:comment_author><![CDATA[Pieces Velo]]></wp:comment_author>
			<wp:comment_author_email>thouvenot@yahoo.fr</wp:comment_author_email>
			<wp:comment_author_url>http://pieces-velo.fr/</wp:comment_author_url>
			<wp:comment_date>2016-07-27 09:25:48</wp:comment_date>
			<wp:comment_date_gmt>2016-07-27 08:25:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[C est pour cela que je recommande, lors d une grosse colere, de passer ses nerfs  sur des objets. Eh oui, j ai souvent des disputes virulentes avec mon placard lorsqu il me cogne le petit orteil. Ca peut paraitre absurde, mais le petit juron qui vient du c?ur quand on a ete maladroit peut-etre bon pour la sante. Cela permet d evacuer la petite contrariete du moment, on ne la garde pas avec les autres pour finalement l evacuer a coup de club de golf sur le monsieur qui nous a fait une queue de poisson en allant au boulot.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1469607948.321974;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Evangéliste devenir tu veux</title>
		<link>http://www.thedarksideofthewebblog.com/evangeliste-devenir-tu-veux/</link>
		<pubDate>Tue, 06 Sep 2016 07:46:30 +0000</pubDate>
		<dc:creator>raphael@raphaellefebvre.be</dc:creator>
		<guid isPermaLink="false">http://www.thedarksideofthewebblog.com/?p=3232</guid>
		<description></description>
		<content:encoded><![CDATA[Donc, tu travailles dans une boîte dont le code <em>sucks</em>. Vous n'avez jamais utilisé <a href="http://www.thedarksideofthewebblog.com/menu/php/composer-php/" title="Articles sur Composer" target="_blank">Composer</a> et vous ne savez même pas ce que sont les <a href="http://www.thedarksideofthewebblog.com/tag/psr/" title="Articles sur les PSR" target="_blank">PSR</a>. Votre <em>codebase</em> est énorme, pas toujours orientée objet, avec du code zombie et des fonctions d'une centaine de lignes.

Et donc, tu en as marre. Et ce matin, tu t'es levé en criant "stop". Et tu t'es dis que ça allait changer. Que vous alliez faire du code propre. Que vous alliez prendre en marche le train de la modernité. Que vous alliez instaurer des bonnes pratiques, faire du refactoring et tester unitairement. Et pourquoi pas mettre en place une stack d'intégration continue, avoir un process de déploiement continu et faire du devops? Bref, tous les trucs normaux que tout le monde fait depuis 5 ans au moins...

Et donc, évangéliste devenir tu veux... Et tu sais que tu devras suivre un chemin long et périlleux. Tu seras ton pire ennemi et tu devras triompher de toi-même. Enfin, si tu ne tombes dans les abîmes du mal, si tu ne cèdes pas à la facilité, si tu vaincs tous les démons, alors seulement tu accéderas à l'ultime sagesse et tu seras auréoler d'un karma divin.

Or donc, plus prosaïquement, tu devras faire quoi?


<h2>Un état d'esprit</h2>

Avant tout, les "bonnes pratiques" sont une question d'état d'esprit. Tant au niveau du management que des dev. Si cet état d'esprit n'est pas présent, leur mise en place demande beaucoup de persuasion et d'effort. Normalement, il devrait s'agir d'un objectif défini par le CTO et du combat quotidien d'un lead dev. Mais parfois, ça vient de quelques dev motivés...

Si l'impulsion ne vient pas du management, il est difficile de fournir l'effort sur le long terme pour les dev. Au premier raté, idées courtes, réponses faciles: ce sera ce changement qui sera mis en cause, voire remis en question.

Que faire également avec les dev qui seront contre ce changement? Car il y en aura qui diront "OK, pas de prob!" puis qui ne feront rien, qui continueront comme avant. Soit par manque d'envie, soit par manque de compétence. Il faut prévoir ce cas à l'avance: comment manager ce type de comportement? On vire les gens (ceux qui bossent dans la boîte depuis 10 ans et qui seront là 10 après que tu l'aies quittée)? On les laisse faire (et on bousille l'effort des gens impliqués et motivés qui finiront par démissionner du coup)?

Donc avant tout, il faut convaincre les gens. C'est l'ensemble de la boîte qui doit regarder dans une direction commune. Il s'agit d'avoir une vision d'avenir.


<h2>Convaincre les gens</h2>

<h3>Le management</h3>

Ne mens pas au management en leur vendant du rêve. Changer des habitudes est difficile. Cela prend du temps. Cela coûte. Cela impacte le code, le projet, le temps de dev.

Ecrire un code testé met probablement deux fois plus de temps qu'un code non testé. Et tester un code ne garantit pas que vous ferez moins de bug. En fait, il s'agit d'un investissement. Donc, avant tout, il faut avoir l'état d'esprit.

Pose-leur la question: comment sera l'app dans 5 ans, dans 10 ans? Et si un jour développer une nouvelle fonctionnalité devient trop compliqué? Et si un jour on ne sait plus engager de dev car le code est trop ancien/pourri? 

Mais n'oublie pas: il te faut leur soutien.

<h3>Les dev</h3>

A priori, un tel changement, c'est tout bénef pour les dev, car ils vont acquérir de nouvelles compétences. Toutefois, il faut compter avec l'inertie de chacun, les habitudes, la difficulté de se remettre en question. 

De plus, tout le monde n'a pas les mêmes ambitions. Est-ce blâmable que quelqu'un préfère rester en mode "fonctionnaire"? En fait non, c'est juste un choix personnel. C'est pour ça que, là aussi, il faut cet état d'esprit.

Et à nouveau, il s'agit d'un investissement. Pose-leur la question: où se voient-ils dans 5 ans, dans 10 ans? et s'ils n'arrivent plus à trouver de boulot sympa parce qu'ils sont obsolètes? 

Mais n'oublie pas: il te faut leur soutien.

<h3>Soi-même</h3>

Si les dev ne veulent pas ou que le management ne veut pas, c'est peut-être toi qui n'est pas à ta place. Remets-toi toi-même en question.

Bon OK, tu me rétorqueras que dans la vraie vie, il est rare que les planètes soient toutes alignées... Et que ça vaut quand même la peine d'essayer. Finalement, la meilleure raison, c'est d'aimer ça, de le vouloir, de relever le défi. C'est aussi ça qui nous motive.


<h2>Par où commencer?</h2>

Quelques conseils parmi d'autres (à prendre pour ce qu'ils valent), fruits de ma modeste expérience et de mes propres erreurs. 

<h3>Etre irréprochable</h3>

Avant tout, applique toi-même ce que tu prodigues: code superbement bien et en grande quantité. Que ton code soit nickel. Et si tu te trompes, reconnais tes erreurs, rectifie-les. Et apprends. Tu t'imposeras par la qualité de ton travail, tu seras respecté uniquement pour cela. Et seulement là tu seras écouté car tu bénéficieras d'une autorité naturelle. Tu dois être irréprochable si tu veux être un leader. Sois honnête, sois modeste, sois intègre. Enfin, partage ton savoir, gratuitement, sans rien attendre en retour. Bref, assume le poids, seul! 

Il faut également que tu te rendes compte que ta vision n'est qu'un choix parmi d'autres. Même si tu n'as pas tort, tu n'as pas forcément raison. Ecoute les autres, respecte leurs décisions. Chacun doit suivre son propre chemin. Les "bonnes pratiques" ne sont qu'une voie parmi d'autres, et <a href="http://www.phpthewrongway.com/" title="PHP The Wrong Way" target="_blank">pas forcément la bonne</a> pour tout le monde.

Sinon, l'oncle Bob a écrit un livre intéressant sur le sujet de la responsabilité du codeur: <a href="https://www.amazon.fr/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=asap_bc?ie=UTF8" title="Robert C. Martin: The clean coder" target="_blank">The clean coder</a>.


<h3>Ouvrir les esprits</h3>

Trouve constamment des ressources (livres, articles, etc) à faire lire de manière régulière pour que les gens "se rendent compte", que ça travaille dans leurs têtes, que ça ouvre les esprits. Faites des dojo ensemble, des présentations techniques en groupe. Stimulez-vous les uns les autres. Il faut mettre en place une émulation de groupe.



<h3>Petit à petit</h3>

Commence petit à petit, par des choses simples, des règles simples. Et surtout: une chose à la fois! Par exemple: ajouter des PHPDoc, puis suivre les PSR, puis réduire la taille des fonctions, puis faire des DI, puis comprendre <a href="http://www.mechantblog.com/2013/12/solid-single-responsability/" title="SOLID" target="_blank">SOLID</a>, puis introduire les tests unitaires, puis introduire les design patterns, etc.

Pour les guidelines, si tu travailles avec PHPStorm, il y a moyen de configurer pour que ça te pête à la gueule dès que tu ne suis pas les PSR, etc. Moi, j'ai ça en permanence. Je me rends compte du moindre espace en trop. Si tu n'as pas PHPStorm, passe à PHPStorm.

Une règle qu'on a instauré dans une de mes anciennes boîtes et que j'aime beaucoup: "Laisser le code un petit peu plus propre lorsqu'on le quitte". Le mot important dans cette phrase, ce n'est pas "plus propre", mais "un petit peu". Car "un petit peu" ça garantit déjà que le code n'est pas plus moche après le passage d'un dev. Ca maintient donc un niveau constant, ça ne se dégrade pas. Et ce minimum vital, c'est parfois déjà beaucoup. Et "un petit peu", ça veut dire que ça ne demande pas énormément d'effort, ni de gros risque. On peut le faire sans que cela impacte le code en profondeur. Par contre, "un petit peu" + "un petit peu" + ..., ça fait pas mal en fin de compte. C'est un peu comme débarrasser la table après avoir manger, c'est une question d'hygiène et de respect des autres. Ca coûte pas cher et ça fait la différence.

Ma référence dans ce domaine, c'est notamment <a href="https://www.amazon.fr/Clean-Code-Handbook-Software-Craftsmanship-ebook/dp/B001GSTOAM/ref=asap_bc?ie=UTF8" title="Robert C. Martin: Clean code" target="_blank">Clean code</a> de l'oncle Bob. Il y a aussi le livre <a href="https://www.amazon.fr/Modern-PHP-Features-Good-Practices-ebook/dp/B00TKVLL26/ref=sr_1_1?s=digital-text&ie=UTF8&qid=1471643828&sr=1-1&keywords=modern+php" title="Josh Lockhart: Modern PHP" target="_blank">Modern PHP</a>, ou encore le tour d'horizon fait par Octo dans <a href="http://www.octo.com/fr/publications/11-les-geants-du-web" title="Octo: Les génats du web" target="_blank">Les géants du web</a>. Rien de tel non plus que de commencer par jeter un oeil sur <a href="http://www.phptherightway.com/" title="PHP The Right Way" target="_blank">PHP the right way</a>.


<h3>Etre une équipe</h3>

Faites les choses en équipe, d'un commun accord, après discussion. Pour ça, <a href="http://www.thedarksideofthewebblog.com/retour-dexperience-agile-mise-en-place-de-bonnes-pratiques-au-sein-de-projets-existants/" title="Agilité et bonnes pratiques" target="_blank">Scrum c'est bien,</a> car il y a l'idée de réappropriation du code par l'équipe, de l'équipe qui s'auto-gère. L'équipe est responsable du code et doit le gérer en bon père de famille. 

Osez poser la question: que fait-on si les gens ne respectent pas ce que l'on a décidé? Que fait-on de la minorité qui n'approuve pas les décisions prises? Scrum, c'est aussi le courage!

Et s'il y a un problème? Des reproches à formuler? Surtout, communiquez oralement! Toujours parler. Face à face, franchement. Bannissez les mails collectifs, les sous-entendus, ou toute autre forme de communication lâche et destructrice.

En fait, la véritable question à se poser, c'est: <a href="https://fr.wikipedia.org/wiki/Le_travail_en_%C3%A9quipe" title="Wikipédia: le travail en équipe" target="_blank">êtes-vous réellement une équipe?</a> Etes-vous juste des codeurs dans un même bureau, ou mouillez-vous chacun votre maillot en vous serrant les coudes? Faites-vous partie de la même mêlée? Une équipe ressemble à des rameurs sur un même bateau: il faut que tout le monde rame. Il faut ramer ensemble, dans la même direction et au même rythme.


<h3>Review</h3>
Instaure des <a href="http://www.thedarksideofthewebblog.com/review-de-code-pros-cons/" title="Reviews: pros and cons" target="_blank">reviews</a>, en définissant clairement leurs objectifs. 

L'avantage, c'est que si on sait qu'on peut être potentiellement reviewé, on fera le petit effort pour avoir un meilleur code. Et puis, ça permet de s'améliorer, et d'améliorer le code.

Attention toutefois qu'il ne faut pas en sous-estimer la charge de travail, ni que cela peut être mal vécu par certains.

Dans une de mes anciennes boîtes (la même et à nouveau un truc que j'aimais bien), chaque dev avait la responsabilité de reviewer les derniers commit de la branche dans la quelle il allait ajouter son propre code (et cela faisait même partie de notre <a href="https://www.scrumalliance.org/community/articles/2008/september/what-is-definition-of-done-(dod)" title="Definition of done" target="_blank">DOD</a>). Cela permettait de s'immerger dans le projet en cours et dans le code déjà réalisé. De voir des bugs ou des incohérences aussi. A nouveau, c'était intéressant car léger individuellement tout en étant impactant du fait que ce soit collectif et systématique.



<h2>Conclusion</h2>

Les bonnes pratiques, c'est une vision, un investissement. Cela demande du courage et de la persévérance. Fais-le pour toi, fais-le pour les autres.

Bonne chance! :)




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3232</wp:post_id>
		<wp:post_date>2016-09-06 08:46:30</wp:post_date>
		<wp:post_date_gmt>2016-09-06 07:46:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>evangeliste-devenir-tu-veux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile-2"><![CDATA[agile]]></category>
		<category domain="post_tag" nicename="clean-code"><![CDATA[clean code]]></category>
		<category domain="post_tag" nicename="clean-coder"><![CDATA[clean coder]]></category>
		<category domain="post_tag" nicename="code-review"><![CDATA[code review]]></category>
		<category domain="post_tag" nicename="coding-dojo"><![CDATA[coding dojo]]></category>
		<category domain="post_tag" nicename="complexite"><![CDATA[complexité]]></category>
		<category domain="post_tag" nicename="composer"><![CDATA[composer]]></category>
		<category domain="post_tag" nicename="devops"><![CDATA[devops]]></category>
		<category domain="category" nicename="genie-logiciel"><![CDATA[Génie logiciel]]></category>
		<category domain="category" nicename="les-bonnes-pratiques-en-php"><![CDATA[Les bonnes pratiques en PHP]]></category>
		<category domain="post_tag" nicename="phpstorm"><![CDATA[phpstorm]]></category>
		<category domain="post_tag" nicename="psr"><![CDATA[PSR]]></category>
		<category domain="post_tag" nicename="scrum"><![CDATA[scrum]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_body</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_schema_disable_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[clean code, clean coder, PSR, composer, devops, scrum, agile, phpstorm, code review]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_bseop_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[Comment mettre an place une politique de "bonnes pratiques" dans son équipe]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_lgnap@helpcomputer.org</wp:meta_key>
			<wp:meta_value><![CDATA[2017-01-03 02:27:26|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_stcr@_webmaster@lva.fr</wp:meta_key>
			<wp:meta_value><![CDATA[2017-03-08 12:24:26|Y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>18536</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2016-09-06 08:57:56</wp:comment_date>
			<wp:comment_date_gmt>2016-09-06 07:57:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Quelques ressources supplémentaires: 
https://blog.enki.com/coding-is-boring-unless-4e496720d664#.wyjb7j54k
https://blog.codinghorror.com/sucking-less-every-year/
https://blog.pascal-martin.fr/post/developpeur-plus-que-9h-18h.html
https://www.sitepoint.com/good-developer/
https://github.com/Droogans/unmaintainable-code

mais il en existe tout plein...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1473148676.9317319;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18537</wp:comment_id>
			<wp:comment_author><![CDATA[Olivier]]></wp:comment_author>
			<wp:comment_author_email>massutolivier@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-09-06 14:48:58</wp:comment_date>
			<wp:comment_date_gmt>2016-09-06 13:48:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Grâce à toi évangéliste, je vais devenir.
Merci :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1473169738.4536569;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18590</wp:comment_id>
			<wp:comment_author><![CDATA[Pascal Borreli]]></wp:comment_author>
			<wp:comment_author_email>pascal@borreli.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2016-10-07 18:28:55</wp:comment_date>
			<wp:comment_date_gmt>2016-10-07 17:28:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[avec une fonte légèrement plus épaisse, plus lisible ce blog serait.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1475861335.7114241;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489151118.51652;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19035</wp:comment_id>
			<wp:comment_author><![CDATA[LGnap]]></wp:comment_author>
			<wp:comment_author_email>lgnap@helpcomputer.org</wp:comment_author_email>
			<wp:comment_author_url>http://lgnap.helpcomputer.org</wp:comment_author_url>
			<wp:comment_date>2017-01-03 02:27:26</wp:comment_date>
			<wp:comment_date_gmt>2017-01-03 01:27:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,

A croire que tu regrettes cette ancienne boîte dont tu parles dans ton article à plusieurs reprises ^^.

Merci pour les liens, j'vais en avoir rudement besoin ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1483406846.893153;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19824</wp:comment_id>
			<wp:comment_author><![CDATA[plancton]]></wp:comment_author>
			<wp:comment_author_email>webmaster@lva.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2017-03-08 12:24:26</wp:comment_date>
			<wp:comment_date_gmt>2017-03-08 11:24:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Je me suis trop reconnu dans ton portrait mais ce qui fait toute la différence c'est que je suis tout seul !! Donc l'évangéliste c'est moi et le "fonctionnaire" qui code sur Dreamweaver et balance tout en  prod par FTP c'est moi aussi !!

En gros je me mets moi-même des coups de pied au cul et en même temps  je suis mon propre frein...J'ai pourtant décidé récemment de vraiment m'y mettre mais je pars de zéro et la question la plus difficile pour moi est "par où commencer ?" . Je me suis donc installé un nouveau serveur debian8 tout neuf et je commence à configurer mon premier projet "propre" et là je suis tombé sur ton article bien débuter sa lib PHP : http://www.thedarksideofthewebblog.com/bien-debuter-sa-lib-php-part-i-les-outils/ 
C'est parfait pour moi mais je me disais qu'il commençait à dater (2014) et le dépôt github n'a pas bougé depuis non plus  alors si tu as 2-3 mises à jour à faire, ben je suis preneur...sinon je vais partir là-dessus illico. C'est génial. Merci]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1488972266.9478409;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489150057.2093329;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19825</wp:comment_id>
			<wp:comment_author><![CDATA[plancton]]></wp:comment_author>
			<wp:comment_author_email>webmaster@lva.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2017-03-08 12:39:21</wp:comment_date>
			<wp:comment_date_gmt>2017-03-08 11:39:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[en complément de mon précédent commentaire : je viens de découvrir php-app-bootstrap sur ton github qui en fait me concerne davantage que lib mais surtout samurai  qui vient en surcouche et permet  ainsi de bootstraper un bootstrap (lib ,app ou framework au choix)  : c'est trop génial, c'est exactement ce qu'il me faut...tu devrais en parler sur ton blog !!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1488973161.5209451;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489150067.0315089;s:7:"message";s:65:"raphael@raphaellefebvre.be a changé le statut du commentaire en approved";s:5:"event";s:15:"status-approved";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19838</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2017-03-10 14:01:02</wp:comment_date>
			<wp:comment_date_gmt>2017-03-10 13:01:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Eh bien fait, tu as déjà commencé, rien que en lisant un article ou deux! ^^ Sinon tu dois absolument lire "modern php" chez o'reily. Tu vas faire un bon en avant. Puis je te conseille de coder des PETITS projets pour toi. Mets-les absolument en open source sur github/gitlab, pour la discipline de faire bien. Des petites lib qui t'inspirent. Par exemple, perso, j'ai essayé de faire un mini framework à ma sauce. Ça sert bien sûr à rien car il en existe plein, et bien plus aboutis. C'est juste pour le challenge. Passe ta certification php. Apprends bien toutes les bases en js, http,... puis apprends un framework comme symfony, etc. Mais SURTOUT apprends les tests automatisés! Ça fait la différence!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>19824</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489150862.7169349;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19839</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2017-03-10 14:03:15</wp:comment_date>
			<wp:comment_date_gmt>2017-03-10 13:03:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci! ^^ c'est pas super abouti comme projet malheureusement...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>19825</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489150996.1558139;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19858</wp:comment_id>
			<wp:comment_author><![CDATA[plancton]]></wp:comment_author>
			<wp:comment_author_email>webmaster@lva.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2017-03-13 17:58:05</wp:comment_date>
			<wp:comment_date_gmt>2017-03-13 16:58:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Il ne faut pas que ce soit trop abouti justement. Les projets trop aboutis se sont pas réutilisables car ils deviennent trop spécifiques et vont trop loin.
Le tien fonctionne parfaitement et répond au S de Solid: il initie le répertoire avec la structure nécessaire et une config de base . Derrière je me suis créé un script shell qui crée le virtual host et modifie légèrement le htaccess et le index.php à ma sauce puis met en place le lien avec le repo distant github (je pense que ton projet se contente d'un git init localement).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>19839</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489424285.247088;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19859</wp:comment_id>
			<wp:comment_author><![CDATA[plancton]]></wp:comment_author>
			<wp:comment_author_email>webmaster@lva.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2017-03-13 18:01:18</wp:comment_date>
			<wp:comment_date_gmt>2017-03-13 17:01:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour ces conseils. Mais justement la difficulté est de mener toutes ces actions d'auto-formation de front en gardant une certaine cohérence et une continuité dans l'apprentissage de chacune. D'où la nécessité de suivre un parcours balisé pour ne pas se laisser emporter ....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>19838</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489424478.5160301;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19862</wp:comment_id>
			<wp:comment_author><![CDATA[Raphaël]]></wp:comment_author>
			<wp:comment_author_email>raphael@raphaellefebvre.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.raphaellefebvre.be</wp:comment_author_url>
			<wp:comment_date>2017-03-14 10:42:55</wp:comment_date>
			<wp:comment_date_gmt>2017-03-14 09:42:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[pas abouti => car il y avait un problème: les modules ne géraient pas les injections de dépendances qui leurs étaient propres. on ne récupérait qu'un container de services global, sans moyen de lui injecter ses propres services. il aurait fallut un moyen pour déclarer ses propres services, comme dans les bundle de symfony par exemple.

git => je crois.. (me souviens plus très bien) n'hésite pas à forker si le coeur t'en dit: https://github.com/Raphhh/samurai-module-git]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>19858</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489484575.7597051;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:18:"raphael@raphaellefebvre.be";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19881</wp:comment_id>
			<wp:comment_author><![CDATA[plancton]]></wp:comment_author>
			<wp:comment_author_email>webmaster@lva.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>2017-03-17 17:53:54</wp:comment_date>
			<wp:comment_date_gmt>2017-03-17 16:53:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OK. Je viens de me mettre  à Git  et un peu PHPunit. du coup j'ai fait mon premier pull-request sur ton repo samurai histoire de m'entraîner....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>19862</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1489769634.4845631;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
